{
  "id": "6",
  "name": "Read Faiss DB",
  "description": "Read Vector Embeddings, from faiss db",
  "input": "It takes in a DataFrame as input",
  "output": "",
  "type": "pyspark",
  "engine": "pyspark",
  "nodeClass": "fire.nodes.gai.NodeReadFromFaissDB",
  "fields" : [
    {"name":"faissIndexDir",  "display": true, "value":"", "widget": "textfield", "title": "Path Of FAISS Index Directory", "description":"Enter FAISS Index Directory path."},
    {"name": "topK", "value":"3", "widget": "textfield", "title": "Top K", "description": "Consider the top k(3) probable words at each step during text generation.", "datatypes":["integer"]},
    {"name":"faissIndexName",  "display": true, "value":"", "widget": "textfield", "title": "Name Of FAISS Index", "description":"Enter FAISS Index Name."}
  ]
}

start-details:

<h2>Read Faiss DB Node Details</h2>
The Read Faiss DB node retrieves vector embeddings from a FAISS vector database based on a user query or query embeddings provided in a DataFrame. It performs a similarity search to find the most relevant documents and returns the results as a DataFrame with columns for the user query and corresponding content. This node is designed for PySpark-based workflows, enabling efficient retrieval of vector-based data for similarity search applications.

<h4>General:</h4>

<h5>Path Of FAISS Index Directory:</h5> Specifies the directory path (local or distributed filesystem) where the FAISS index is stored. This is required and must point to a valid directory containing the FAISS index.

<h5>Top K:</h5> Specifies the number of top results to retrieve from the FAISS index based on similarity. Default is 3. Must be a positive integer.

<h5>Name Of FAISS Index:</h5> Specifies the name of the FAISS index to query. This is required and must match an existing index in the specified directory.

<h4>Output:</h4>
The node outputs a DataFrame with the following columns:
* userquery: The original query from the input DataFrame or derived from the query embeddings.
* content: The content of the top matching documents retrieved from the FAISS index, based on similarity to the query.

end-details:

start-examples:

<h2>Example: Read Faiss DB Node</h2>

<h3>Input:</h3>
A DataFrame contains the following data:
- userQuery: ["What is climate change?", "AI advancements in 2025"]
- embeddings: [[0.12, 0.45, ...], [0.23, 0.67, ...]] (1024-dimensional vectors)

The Read Faiss DB node is configured as follows:
* Path Of FAISS Index Directory: /data/faiss_indices/
* Top K: 3
* Name Of FAISS Index: faiss_index

<h3>Output:</h3>
The node queries the FAISS database and produces a DataFrame with the following structure:

userquery                    | content
-----------------------------|--------------------------------------
What is climate change?      | Climate change refers to long-term shifts in weather patterns...
AI advancements in 2025      | Recent AI advancements include improved neural networks...

<h3>Explanation:</h3>
- The node processes the DataFrame, using the userQuery and embeddings columns to perform a similarity search in the FAISS index named 'faiss_index' located in the '/data/faiss_indices/' directory.
- The Top K setting of 3 ensures that up to three matching documents are retrieved for each query based on similarity to the provided embeddings.
- The userquery column in the output DataFrame contains the original text queries from the input DataFrame for reference.
- The content column contains the text of the most relevant documents retrieved from the FAISS index.
- The Path Of FAISS Index Directory and Name Of FAISS Index settings ensure the node queries the correct index in the specified location.
- If the input DataFrame only provided text queries without embeddings, the node would rely on the FAISS service to generate embeddings internally (if supported by the configuration).

end-examples:
