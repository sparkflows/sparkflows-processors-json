{
  "id": "11",
  "name": "Jython",
  "description": "This node runs any given Jython code. The input dataframe is passed in the variable inDF. The output dataframe should be placed in the variable outDF",
  "input": "The input dataframe is passed in the variable in DF",
  "output": "The output dataframe should be placed in the variable outDF",
  "type": "transform",
  "nodeClass": "fire.nodes.etl.NodeJython",
  "fields" : [
    {"name":"tempTable", "value":"fire_temp_table", "widget": "textfield", "title": "Temp Table", "description": "Temp Table Name to be used"},
    {"name":"code", "value":"", "widget": "textarea_large", "title": "Jython", "description": "Python code to be run. Input dataframe is in inDF. Output dataframe is in outDF."},

    {"name": "schema", "value":"", "widget": "tab", "title": "InferSchema"},
    
    {"name":"outputColNames", "value":"[]", "widget": "schema_col_names", "title": "Column Names for the CSV", "description": "New Output Columns of the SQL"},
    {"name":"outputColTypes", "value":"[]", "widget": "schema_col_types", "title": "Column Types for the CSV", "description": "Data Type of the Output Columns"},
    {"name":"outputColFormats", "value":"[]", "widget": "schema_col_formats", "title": "Column Formats for the CSV", "description": "Format of the Output Columns"}

  ]
}


start-details:

h2:Jython Details

This node runs any given Jython code.

Below is an example Jython code. It takes the input dataframe 'inDF', and returns the new dataframe 'outDF'

outDF = inDF.groupBy("c2").count()

end-details:
