{
  "id": "1",
  "name": "Join Using SQL",

  "description": "This node registers the incoming DataFrames as temporary tables and executes the SQL provided",
  "input": "It takes in 2 or more DataFrames as input and produces one DataFrame as output by executing the provided SQL.",
  "output": "The DataFrame created as a result of executing the join SQL",

  "type": "join",
  "engine": "all",
  "nodeClass": "fire.nodes.etl.NodeJoinUsingSQL",
  "fields" : [
    {"name":"tempTables", "value":"[]", "widget": "array_of_values", "title": "Temp Table Names", "description": "Temp Table Name to be used"},

    {"name":"sql", "value":"", "widget": "code_editor", "type": "sql_mysql", "title": "SQL", "description": "SQL to be run", "required": true},

    {"name": "schema", "value":"", "widget": "tab", "title": "InferSchema"},
    
    {"name":"outputColNames", "value":"[]", "widget": "schema_col_names", "title": "Column Names for the CSV", "description": "New Output Columns of the SQL"},
    {"name":"outputColTypes", "value":"[]", "widget": "schema_col_types", "title": "Column Types for the CSV", "description": "Data Type of the Output Columns"},
    {"name":"outputColFormats", "value":"[]", "widget": "schema_col_formats", "title": "Column Formats for the CSV", "description": "Format of the Output Columns"}
  ]
}

start-details:

h2:Join Using SQL Details

* This node receives two or more input data frames and creates the corresponding temporary tables.
* Allows the user to write a SQL query to join these temporary tables.
* The resulting output dataframe contains the output of the SQL execution.

end-details:

start-examples:

h2:Join Using SQL Examples

h4: Two-table joins

The following example shows a two-table join:
SELECT order_num, lname, fname FROM tempTable1, tempTable2
WHERE tempTable1.customer_num = tempTable2.customer_num

h4: Multi-table joins

The following multiple-table join yields the company name of the customer who ordered an item as well as its stock number and manufacturer code:
SELECT DISTINCT company, stock_num, manu_code
FROM tempTable1 c, tempTable2 o, tempTable3 i
WHERE c.customer_num = o.customer_num
AND o.order_num = i.order_num;

h4: LEFT OUTER joins

The below table join yields data of all customers irrespective of whether or not they have placed any orders:
SELECT c.ID, c.NAME, o.AMOUNT, o.DATE
FROM tempTable1 c
LEFT OUTER JOIN tempTable2 o
ON (c.ID = o.CUSTOMER_ID)

end-examples:
