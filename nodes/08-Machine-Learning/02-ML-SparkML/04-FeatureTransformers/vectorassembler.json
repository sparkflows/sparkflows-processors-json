{
  "id": "7",
  "name": "Vector Assembler",
  "type": "ml-transformer",
  "description" : "Merges multiple columns into a vector column.",

  "input": "It takes in a DataFrame and transforms it to another DataFrame",
  "output": "It adds a new column to the incoming DataFrame. The new column contains the values of the input columns concatenated into a vector in the specified order.",

  "nodeClass": "fire.nodes.ml.NodeVectorAssembler",
  "engine": "all",
  "fields" : [
    {"name":"inputCols", "value":"[]", "widget": "variables", "title": "Input Columns",
     "description": "Input column of type - all numeric, boolean and vector", "datatypes":["integer", "long", "double", "float", "vectorudt"]},
    {"name":"outputCol", "value":"", "widget": "textfield", "title": "Output Column", "required":"true", "description": "Output column name"},
    {"name":"handleInvalid", "value":"error", "widget": "array", "title": "Handle Invalid", "optionsArray": ["error","skip","keep"],
      "description": "How to handle invalid data (NULL values). Options are 'skip' (filter out rows with invalid data), 'error' (throw an error), or 'keep' (return relevant number of NaN in the output)."}
  ]
}

start-details:

h2: VectorAssembler Node Details

The VectorAssembler node is a transformer that combines a given list of columns into a single vector column. 
It is useful for combining raw features and features generated by different feature transformers into a single feature vector, in order to train ML models like logistic regression and decision trees. 
VectorAssembler accepts the following input column types: all numeric types, boolean type, and vector type. In each row, the values of the input columns will be concatenated into a vector in the specified order.

h4:Input Parameters
* OUTPUT STORAGE LEVEL : Keep this as DEFAULT.
* INPUT COLUMNS : Columns are based on the input dataframe schema. 
* Available : : The available columns for transformation.
* Selected : The selected columns which are to be transformed.
* OUTPUT COLUMN : The transformed column name.
* HANDLEINVALID : How to handle invalid data (NULL and NaN values). Options are 'skip' (filter out rows with invalid data), 'error' (default value, throw an error), or 'keep' (return relevant number of NaN in the output).

start-examples:

h2: h2: VectorAssembler Node Example

Assume that we have a DataFrame with the columns id, hour, mobile, userFeatures, and clicked:

 id | hour | mobile | userFeatures     | clicked
----|------|--------|------------------|---------
 0  | 18   | 1.0    | [0.0, 10.0, 0.5] | 1.0

 If we set VectorAssembler's <b>input Selected columns</b> to hour, mobile, and userFeatures and <b>output column</b> to features, after transformation we should get the following DataFrame:

 id | hour | mobile | userFeatures     | clicked | features
----|------|--------|------------------|---------|-----------------------------
 0  | 18   | 1.0    | [0.0, 10.0, 0.5] | 1.0     | [18.0, 1.0, 0.0, 10.0, 0.5]

end-examples:
