{
  "id": "5",
  "name": "Logistic Regression",
  "description": "Logistic regression. Currently, this class only supports binary classification.",

  "input": "This takes in a DataFrame and performs Logistic Regression",
  "output": "The Logistic Regression Model generated is passed along to the next nodes. The input DataFrame is also passed along to the next nodes",

  "type": "ml-estimator",
  "engine": "scala",
  "nodeClass": "fire.nodes.ml.NodeLogisticRegression",
  "fields" : [
    {"name": "featuresCol", "value":"", "required":true, "widget": "variable", "title": "Features Column", "description": "Features column of type vectorUDT for model fitting", "datatypes":["vectorudt"]},

    {"name": "labelCol", "value":"", "required":true, "widget": "variable", "title": "Label Column", "description": "The label column for model fitting", "datatypes":["double"]},

    {"name": "predictionCol", "value":"", "widget": "textfield", "title": "Prediction Column", "description": "The prediction column created during model scoring"},
    {"name": "splitRatio", "value":1.0, "widget": "textfield", "title": "Split Ratio", "description": "Split Ratio", "datatypes":["float"]},

    {"name":"path", "value":"", "widget": "textfield", "title": "Path", "description": "Save Confusion Matrix to Path"},

    {"name": "maxIter", "value":100, "widget": "textfield", "title": "Maximum Iterations", "description": "Maximum number of iterations (>= 0)", "datatypes":["integer"]},

    {"name": "fitIntercept", "value":"true", "widget": "array", "title": "Fit Intercept", "optionsArray": ["true","false"], "description": "Whether to fit an intercept term", "datatypes":["boolean"]},

    {"name": "regParam", "value":0.0, "widget": "textfield", "title": "Regularization Param", "description": "The regularization parameter", "datatypes":["double"]},

    {"name": "standardization", "value":"true", "widget": "array", "title": "Standardization","optionsArray": ["true","false"], "description": "Whether to standardize the training features before fitting the model", "datatypes":["boolean"]},

    {"name": "threshold", "value":0.5, "widget": "textfield", "title": "Threshold", "description": "The threshold in binary classification prediction", "datatypes":["double"]},

    {"name": "tol", "value":1E-6, "widget": "textfield", "title": "Tolerance", "description": "The convergence tolerance for iterative algorithms", "datatypes":["double"]},

    {"name": "elasticNetParam", "value":0.0, "widget": "textfield", "title": "ElasticNet Param", "description": "The ElasticNet mixing parameter. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty", "datatypes":["double"]},

    {"name": "weightCol", "value":"", "widget": "variable", "title": "Weight Column", "description": "If the 'weight column' is not specified, all instances are treated equally with a weight 1.0", "datatypes":["double"]},

    {"name": "aggregationDepth", "value":2, "widget": "textfield", "title": "Aggregation Depth", "description": "Param for suggested depth for treeAggregate (>= 2)", "datatypes":["integer"]},

    {"name": "family", "value":"auto", "widget": "array","title": "Family", "optionsArray": ["auto", "binomial", "multinomial"], "description": "Param for the name of family which is a description of the label distribution to be used in the model" },



    {"name": "gridSearch", "value":"", "widget": "tab", "title": "Grid Search"},

    {"name": "regParamGrid", "value":"", "widget": "textfield", "title": "Regularization Param Grid Search", "description": "Regularization Parameters for Grid Search"},

    {"name": "elasticNetGrid", "value":"", "widget": "textfield", "title": "ElasticNet Param Grid Search", "description": "ElasticNet Parameters for Grid Search"},

    {"name": "confusionMatrix", "value":"", "widget": "tab", "title": "Confusion Matrix"},
    {"name": "output_confusion_matrix_chart", "value":"false", "widget": "array", "title": "Output Confusion Matrix Chart", "optionsArray": ["false","true"], "description": "Whether to display Confusion Matrix Chart." ,"datatypes":["boolean"]},
    {"name": "cmChartTitle", "value":"Title", "widget": "textfield", "title": "Confusion Matrix Chart Title", "description": "Title name to display in Confusion Matrix Chart"},
    {"name": "cmChartDescription", "value":"Visual Representation of Predicted vs. Actual Classes", "widget": "textfield", "title": "Confusion Matrix Chart Description", "description": "Description to display in Confusion Matrix Chart"},
    {"name": "confusionMatrixTargetLegend", "value":"Target", "widget": "textfield", "title": "Confusion Matrix Target Legend", "description": "Legend name to display for Target in Confusion Matrix"},
    {"name": "confusionMatrixPredictedLabelLegend", "value":"PredictedLabel", "widget": "textfield", "title": "Confusion Matrix PredictedLabel Legend", "description": "Legend name to display for Predicted Label in Confusion Matrix"},

    {"name": "Description", "value":"", "widget": "tab", "title": "Confusion Matrix Description"},

    {"name": "confusionMatrixRowDescription", "value":"", "widget": "textarea_rich", "title": "Confusion Matrix Outcome description", "description": "Add the business details of the outcome of the confusion matrix rows"},
    {"name": "ROC Curve", "value":"", "widget": "tab", "title": "ROC Curve"},
    {"name": "output_roc_chart", "value":"false", "widget": "array", "title": "Output ROC Curve", "optionsArray": ["false","true"], "description": "Whether to display confusion matrix chart." ,"datatypes":["boolean"]},
    {"name": "roc_title", "value":"Title", "widget": "textfield", "title": "ROC Curve Chart Title", "description": "Title name to display in ROC Curve Chart"},
    {"name": "roc_description", "value":"Receiver operating characteristic (ROC) curve", "widget": "textfield", "title": "ROC Curve Chart Description", "description": "Add Description for ROC Curve Chart"},
    {"name": "xlabel", "value":"False Positive Rate (specificity)", "widget": "textfield", "title": "X Label", "description": "X label"},
    {"name": "ylabel", "value":"True Positive Rate (sensitivity)", "widget": "textfield", "title": "Y Label", "description": "Y Label"}
  ]
}

start-details:

Logistic regression is a popular method to predict a categorical response. 

It is a special case of Generalized Linear models that predicts the probability of the outcomes. 
In spark.ml logistic regression can be used to predict a binary outcome by using binomial logistic regression, or it can be used to predict a multiclass outcome by using multinomial logistic regression.

More details are available at:

http://spark.apache.org/docs/latest/ml-classification-regression.html#logistic-regression

end-details:

start-examples:

h2:The below example is available at : https://spark.apache.org/docs/2.3.0/ml-classification-regression.html#logistic-regression


import org.apache.spark.ml.classification.LogisticRegression

// Load training data
val training = spark.read.format("libsvm").load("data/mllib/sample_libsvm_data.txt")

val lr = new LogisticRegression()
  .setMaxIter(10)
  .setRegParam(0.3)
  .setElasticNetParam(0.8)

// Fit the model
val lrModel = lr.fit(training)

// Print the coefficients and intercept for logistic regression
println(s"Coefficients: ${lrModel.coefficients} Intercept: ${lrModel.intercept}")

// We can also use the multinomial family for binary classification
val mlr = new LogisticRegression()
  .setMaxIter(10)
  .setRegParam(0.3)
  .setElasticNetParam(0.8)
  .setFamily("multinomial")

val mlrModel = mlr.fit(training)

// Print the coefficients and intercepts for logistic regression with multinomial family
println(s"Multinomial coefficients: ${mlrModel.coefficientMatrix}")
println(s"Multinomial intercepts: ${mlrModel.interceptVector}")

end-examples:
