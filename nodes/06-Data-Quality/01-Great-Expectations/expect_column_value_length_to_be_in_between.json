{
  "id": "7",
  "name": "ExpectColumnValueLengthToBeInBetween",
  "description": "",
  "type": "transform",
  "engine": "pyspark",
  "nodeClass": "fire.nodes.ge.NodeExpectColumnValueLengthToBeInBetween",
  "fields" : [

    {"name": "cols", "value":"[]", "widget": "variables_list_select",
      "title": "Column Name", "description": "The column name."},

    {"name": "min", "value":"[]", "widget": "variables_list_textfield",
      "title": "Min", "description": "The minimum value for a column entry length."},

    {"name": "max", "value":"[]", "widget": "variables_list_textfield",
      "title": "Max", "description": "The maximum value for a column entry length."}

  ]
}

start-details:

h2:Expect Column Value length To be in Between Details

Expect the column value lengths to be between a minimum value and a maximum value (inclusive).

h4:Keyword Args

Column Name: The column name
Min (comparable type or None): The minimum value for a column entry.
Max (comparable type or None): The maximum value for a column entry.

h4:Notes
`Min` and `Max` are both inclusive.
If `Min` is None, then `Max` is treated as an upper bound, and there is no minimum value checked.
If `Max` is None, then `Min` is treated as a lower bound, and there is no maximum value checked.

end-details:

start-examples:

If the incoming DataFrame has the following values in column6:

column6
apple
orange
pineapple
kiwi
banana
Setting Min to 5 and Max to 7 will yield the following result:

Valid values: "orange" and "banana"
Invalid values: "apple" (too short), "pineapple" (too long), "kiwi" (too short)
end-examples:
