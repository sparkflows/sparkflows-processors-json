{
  "id": "6",
  "name": "Parse JSON Col",
  "iconImage": "/images/icons/node-icon/JSON.svg",
  "description": "Parses JSON content in a given column",
  "type": "transform",
  "nodeClass": "fire.nodes.etl.NodeParseJSONColumn",
  "engine": "all",
  "fields" : [

    {"name": "jsonColName", "value":"", "widget": "variable",
      "title": "JSON Col Name", "description": "Specifies the input column containing the JSON data",
      "datatypes":["string"]},

    {"name": "inputCol", "value":"[]", "widget": "variables_list_select",
      "title": "Input Col", "description": "Input Columns"},

    {"name": "jsonFieldNames", "value":"[]", "widget": "variables_list_textfield",
      "title": "JSON Field names", "description": "JSON Field names"},

    {"name": "jsonFieldTypes", "value":"[]", "widget": "variables_list_array",
      "optionsArray": ["STRING", "INTEGER", "DOUBLE", "FLOAT", "LONG", "BOOLEAN", "BYTE", "SHORT", "STRUCT", "ARRAY", "MAP"],
      "title": "JSON Field Type", "description": "Data Type of the JSON field"},

    {"name": "advance", "value":"", "widget": "tab", "title": "Advance"},

    {"name": "stringJsonColNames", "value":"[]", "widget": "variables_list_select",
      "title": "String Json ColNames", "datatypes":["string"], "description": "Specifies the input column containing the JSON data"},

    {"name": "outputJsonColNames", "value":"[]", "widget": "variables_list_textfield",
      "title": "Output ColNames", "description": "uses the schema from the column you provide and create the new output column."},


    {"name": "outputSchema", "value":"", "widget": "tab", "title": "InferSchema"},
    {"name":"outputColNames", "value":"[]", "widget": "schema_col_names", "title": "Output Column Name", "description": "Output Columns"},
    {"name":"outputColTypes", "value":"[]", "widget": "schema_col_types", "title": "Output Column Type", "description": "Data Type of the Output Columns"},
    {"name":"outputColFormats", "value":"[]", "widget": "schema_col_formats", "title": "Output Column Format", "description": "Format of the Output Columns"}

  ]
}

start-details:

h2: Parse JSON Column Node

h4: Overview:

The Parse JSON Column node parses a JSON column into individual columns. It's useful for extracting specific fields from JSON data.

h4: Input:

JSON Column Name: The name of the column containing the JSON data.
Variables: A table to define the JSON fields to extract and their corresponding data types.
h4: Output:

The node creates new columns for each specified JSON field, extracting the relevant data from the JSON column.

end-details:

start-examples:

Example:

Let's assume we have a column named json_data containing JSON data like this:

JSON
{
  "name": "John Doe",
  "age": 30,
  "city": "New York"
}

Configure the Node:

JSON Column Name: json_data
Variables:
Input Col: json_data
JSON Field Name: name
JSON Field Type: string
Input Col: json_data
JSON Field Name: age
JSON Field Type: integer
Input Col: json_data
JSON Field Name: city
JSON Field Type: string
Node Execution:

The node will create three new columns: name, age, and city, extracting the corresponding values from the json_data column.

end-examples:


