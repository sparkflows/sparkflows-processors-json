{
  "id": "12",
  "name": "JDBC Incremental Load",
  "description": "This node is used to load incremental data from RDBMS to Hive.",
  "input": "RDBMS detail like URL, Username , Password, Hive DB , Hive Table name",
  "type": "dataset",
  "nodeClass": "fire.nodes.dataset.NodeDatasetJDBCIncrementalLoad",

  "fields" : [

    {"name":"connection", "value":"", "widget": "object_array", "title": "Connection", "description": "The JDBC connection to connect" ,"required":"true"},
    {"name":"sqltable", "value": "", "widget": "textfield", "title": "SQL Table", "description": ""},
    {"name":"sqlkeycolumn", "value": "", "widget": "textfield", "title": "SQL Key Column", "description": ""},
    {"name":"sqlkeycolumntype", "value": "", "widget": "textfield", "title": "SQL Key Column type", "description": ""},
    {"name":"homeDirectory", "value": "", "widget": "textfield", "title": "Config Path", "description": ""},

    {"name": "performance", "value":"", "widget": "tab", "title": "Performance"},
    {"name":"partitionColumn", "value":"", "widget": "textfield", "title": "Partition Column", "description": "PartitionColumn must be a numeric, date, or timestamp column from the table" },
    {"name":"lowerBound", "value":"", "widget": "textfield", "title": "LowerBound", "description": " LowerBound and UpperBound are just used to decide the partition stride, not for filtering the rows in the table. All rows in the table will be partitioned and returned. This option applies only to reading" },
    {"name":"upperBound", "value":"", "widget": "textfield", "title": "UpperBound", "description": " LowerBound and UpperBound are just used to decide the partition stride, not for filtering the rows in the table. All rows in the table will be partitioned and returned. This option applies only to reading" },
    {"name":"numPartitions", "value":"", "widget": "textfield", "title": "NumPartitions", "description": "The maximum number of partitions that can be used for parallelism in table reading" },
    {"name":"fetchsize", "value":"", "widget": "textfield", "title": "FetchSize", "description": "The JDBC fetch size, which determines how many rows to fetch per round trip" },

    {"name": "schema", "value":"", "widget": "tab", "title": "Schema"},

    {"name":"outputColNames", "value":"[]", "widget": "schema_col_names", "title": "Column Names of the Table", "description": "Output Column Names of the Table"},
    {"name":"outputColTypes", "value":"[]", "widget": "schema_col_types", "title": "Column Types of the Table", "description": "Output Column Types of the Table"},
    {"name":"outputColFormats", "value":"[]", "widget": "schema_col_formats", "title": "Column Formats", "description": "Output Column Formats"}

  ]
}
start-details:

h2: JDBC Incremental Load Node Details

This node is used to load incremental data from RDBMS to Hive.

h4: Parameters to be set:
General:
*OUTPUT STORAGE LEVEL: Define the data storage level, DEFAULT is typically used for standard storage.
*CONNECTION: Select the JDBC connection to the target database.
*SQL TABLE: Enter the name of the table from which incremental data is to be loaded.
*SQL KEY COLUMN: Specify the unique key column used to track incremental changes.
*SQL KEY COLUMN TYPE: Indicate the data type of the key column (e.g.,INTEGER,VARCHAR).
*CONFIG PATH: Path to any additional configuration files needed for the connection.
Performance:
*PARTITION COLUMN: Choose a column to split the data into partitions for parallel data loading.
*LOWERBOUND: Set the minimum value for the partition column to define the start of data partitioning.
*UPPERBOUND: Set the maximum value for the partition column to define the end of data partitioning.
*NUMPARTITIONS: Specify the number of partitions to enable parallel data processing.
*FETCHSIZE: Define the number of rows fetched per call to optimize retrieval performance.
Schema:
*SCHEMA COLUMNS: Use the Refresh Schema option to update the schema, which loads the column names, data types, and formats of the selected SQL table.

end-details:

start-examples:

h2: JDBC Incremental Load Node Examples

h4: Example of Connection Values
General:
*CONNECTION: POSTGRES_DEV_ENV
*SQL TABLE: sales_transactions
Performance:
*PARTITION COLUMN: transaction_id
*LOWERBOUND: 1000
*UPPERBOUND: 5000
*NUMPARTITIONS: 5
*FETCHSIZE: 1000
Schema:
*SCHEMA COLUMNS: Use the Refresh Schema to update the schema.

end-examples
