{
  "name": "Lease-Agreement-Analysis-test",
  "uuid": "701e50a8-66a3-4cbb-bb6c-be96d528b7b6",
  "category": "RealEstate",
  "description": "-",
  "parameters": " --var uploadFile=storage:name:url:size:type:originalName:hash**base64:verizon_lease_uae_5-91daf239-95eb-4f44-b549-36f261fc8d66.pdf:data:application/pdf;base64,JVBERi0xLjQKJZOMi54gUmVwb3J0TGFiIEdlbmVyYXRlZCBQREYgZG9jdW1lbnQgaHR0cDovL3d3dy5yZXBvcnRsYWIuY29tCjEgMCBvYmoKPDwKL0YxIDIgMCBSIC9GMiAzIDAgUgo+PgplbmRvYmoKMiAwIG9iago8PAovQmFzZUZvbnQgL0hlbHZldGljYSAvRW5jb2RpbmcgL1dpbkFuc2lFbmNvZGluZyAvTmFtZSAvRjEgL1N1YnR5cGUgL1R5cGUxIC9UeXBlIC9Gb250Cj4+CmVuZG9iagozIDAgb2JqCjw8Ci9CYXNlRm9udCAvSGVsdmV0aWNhLUJvbGQgL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcgL05hbWUgL0YyIC9TdWJ0eXBlIC9UeXBlMSAvVHlwZSAvRm9udAo+PgplbmRvYmoKNCAwIG9iago8PAovQ29udGVudHMgOSAwIFIgL01lZGlhQm94IFsgMCAwIDYxMiA3OTIgXSAvUGFyZW50IDggMCBSIC9SZXNvdXJjZXMgPDwKL0ZvbnQgMSAwIFIgL1Byb2NTZXQgWyAvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJIF0KPj4gL1JvdGF0ZSAwIC9UcmFucyA8PAoKPj4gCiAgL1R5cGUgL1BhZ2UKPj4KZW5kb2JqCjUgMCBvYmoKPDwKL0NvbnRlbnRzIDEwIDAgUiAvTWVkaWFCb3ggWyAwIDAgNjEyIDc5MiBdIC9QYXJlbnQgOCAwIFIgL1Jlc291cmNlcyA8PAovRm9udCAxIDAgUiAvUHJvY1NldCBbIC9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUkgXQo+PiAvUm90YXRlIDAgL1RyYW5zIDw8Cgo+PiAKICAvVHlwZSAvUGFnZQo+PgplbmRvYmoKNiAwIG9iago8PAovUGFnZU1vZGUgL1VzZU5vbmUgL1BhZ2VzIDggMCBSIC9UeXBlIC9DYXRhbG9nCj4+CmVuZG9iago3IDAgb2JqCjw8Ci9BdXRob3IgKFwoYW5vbnltb3VzXCkpIC9DcmVhdGlvbkRhdGUgKEQ6MjAyNTA0MjQxNDUzNDErMDUnMDAnKSAvQ3JlYXRvciAoXCh1bnNwZWNpZmllZFwpKSAvS2V5d29yZHMgKCkgL01vZERhdGUgKEQ6MjAyNTA0MjQxNDUzNDErMDUnMDAnKSAvUHJvZHVjZXIgKFJlcG9ydExhYiBQREYgTGlicmFyeSAtIHd3dy5yZXBvcnRsYWIuY29tKSAKICAvU3ViamVjdCAoXCh1bnNwZWNpZmllZFwpKSAvVGl0bGUgKFwoYW5vbnltb3VzXCkpIC9UcmFwcGVkIC9GYWxzZQo+PgplbmRvYmoKOCAwIG9iago8PAovQ291bnQgMiAvS2lkcyBbIDQgMCBSIDUgMCBSIF0gL1R5cGUgL1BhZ2VzCj4+CmVuZG9iago5IDAgb2JqCjw8Ci9GaWx0ZXIgWyAvQVNDSUk4NURlY29kZSAvRmxhdGVEZWNvZGUgXSAvTGVuZ3RoIDE0MzQKPj4Kc3RyZWFtCkdhdFVzZ0pbJmsmO0tZIU1TPEpWWVNCOi9GLlRyNSJASyI4VmZBNiNBckBWSW1OZ01valdIJ2FaOzg0ZUhPNCtPIkQhQ0EnWEg2UnJtXnMkYHJWWllTRG5JTyFka0k5ZHU9SGkkZk4ocVxsRk5pJXQ4Y3NFOUAnX1pkamVCYS8tbTdBZiJydEVDUy1BPnBOVTs7QTlxO1taOUBZM18kL15lTjVALylUR1Y8TldvU01raztZUW9SMVo7SzZKOjBya0tWMVFPcy0qaUxiKHM1Ry5aTDdSJlBJQltvZzszK1dTIU0sUkFPakE2L0w0R1EsKyo1UGlNYCJbb1dxb1Y+XkZFKWQ6b0pnRDohbV1zRy5LNSxXP3NAVTk8SClmYW5XX2hGSGw8cF1NcFxzOE5EQihmUTo1IU5GJzo2ZDJQSlxWKCQ9ckJtUj0pSF4jPSpgJ082LE9SXEY8LDFcL2BFLlYkUyFLRSwvTFtQN0NQVURsJitGWnVDQWtSWUA4Qk1TRzFFSVVSVzQlZktqLUsnblc5SkZlJF51SUM/bjYpcFBrLShoN15NQmREcEAxSmhfLmAwP2lLI29taTheKjRYXyYlNSNGSSRfPEA3Nk5fcSI8bV9eJGtAMilSLWZlPiYwNzdOWTMiNGE5SFI/TUE2MWpvM3U7SEYuQ1UxOjI4JV02YkRWKDUuLGowV0NnRTFXRlFQOCojUUMiXXEzP1RNVk1JYnM9S2MzKyNTIjBMTTQ/JmZSdUMtTFdKXHJGSF88LzEjIiM+VihET2kvaVVCViMic2hYKXJvLlZSLUctYFtePFdDNDspJENJLDE7Q2txJCQ+SzQxbmtiKT1KR1kpPTQyNm4zNlJaI1xnUzlMdFJdNUg8cVZfZiclV0VucW1JTWdHTCRkRDVPJk1QQloiSUckO0M4QUJlPmwvIjlXSTE0UFheW11BYSo8Ul5XTTVURUYlS1EwImohRGEnWT40SGVKbE00aiJTMDgiVlxYNCU9NnREXEchdDw4XkMpOUcwNnBgSm04cicoZnNrYyd1azRcZltZL0k2TkIhcSoyQnEmakZGaGw8W2QyV0FeaWNQcixWVDpaKCElZV8lYjNgRD9mJ2krTDhRXjtuPUFJMl9ZYT42I1lhWTlPJCQjVnM4K00xJCx0W0czVTk4TTxXNkpaTTREN2lzRmN0Lj5tIkZxLmtxTTRKSENcYCdkN2FzMjUmIjIhRVNhRDBzbDZoPmdNVU5rb3M6VjpnblgrRDBASjJNaEIwW2kkXTNTPW1dUSJUdHFlLzIhRltuTEk6Z0dDTmhTLkg/IXMjdVZNKyg9MiVYa1MnNCxQOyxXYj9WdTE+PV0yaDNZMmhXQUNJb0VpTjdzKFtLJWUhcW5aNSpbOiw8W18iRT86TmtSQW9naSU2P3BiOEMuRTpzUm1zRDs0bicoKzwhXFNvP1VKTSxtXUI0anFDUVhfMiwpbnFdbEpLcEJrUUhZVTFRX0Y3NWQ4O0JZbURTPyFnMkQnamJrL05uYU5JS25LYG1ANXNvVVxfWWsrbmhZYjxjI0xpUzMoUCNucEgwVGE2Z0tbYlI2ZlZzNigmUFwvck9QUyNTODUvaW4hXi4wSkFmIS0hXl4sNSohNVswRDZPT0dyPGskXlVEaWFWTkprVHRbNyVYWHRFRUpMRkVRaytlW1o3VlFrMCY1Zl4uNG06NVZHTCY4a2stPGBcWlRsPidgZkVLU1gscE5jal9vYWc/K002ND51OVpNVGVQI01Zcj1GVDlQUzQnIjxlJDxhKWorOV5xNSZiQkxiJlQ0JGgmJFo4SmxyRiI3c2hFcCwzMU4pLT5qbkk+LVNYa3J0WyhIT1AzQzIlT0dldUBhcStjVnQndWRURDhOJFo4ZVRLbiZhKzpTcyElOG5JRm9+PmVuZHN0cmVhbQplbmRvYmoKMTAgMCBvYmoKPDwKL0ZpbHRlciBbIC9BU0NJSTg1RGVjb2RlIC9GbGF0ZURlY29kZSBdIC9MZW5ndGggMjUyCj4+CnN0cmVhbQpHYXQlXDN0Jm5aJ0xxaXBNSmxIW21CKGVNMl1tMSIoJDIxSiwjWTE4Pi9mJl1KJV9mbCY9I0tvUDJSJiEzSjpmKTlvaEJdSix1RS4tQkpcbkpYaSMuUTNeV2AiaGU3PT8kUTRhUkAmQ3M0ZzFCSUwlVWhwSF9GbT9fPDRMdW01TmNQYVloYjQ3V0xPMyJhMDs4Z2FISTcrKixGIWtIZ2BFNHE9PzpfdVVXJzpOISdUUTpcNVc8PjpmR2dNTnIlRE1laEFYLzsrS0EhLUdmYVInaydrWk9eMlFUZzkyZilUVUgxNTM2UDxGKl9nLHVtRyNRUC85ZmlnYk1gfj5lbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCAxMQowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAwNzMgMDAwMDAgbiAKMDAwMDAwMDExNCAwMDAwMCBuIAowMDAwMDAwMjIxIDAwMDAwIG4gCjAwMDAwMDAzMzMgMDAwMDAgbiAKMDAwMDAwMDUyNiAwMDAwMCBuIAowMDAwMDAwNzIwIDAwMDAwIG4gCjAwMDAwMDA3ODggMDAwMDAgbiAKMDAwMDAwMTA3MSAwMDAwMCBuIAowMDAwMDAxMTM2IDAwMDAwIG4gCjAwMDAwMDI2NjEgMDAwMDAgbiAKdHJhaWxlcgo8PAovSUQgCls8ZjhiYTM3YjE5MTdkNjMyNTM5OTUzMzE4ODE4ZGIyZjE+PGY4YmEzN2IxOTE3ZDYzMjUzOTk1MzMxODgxOGRiMmYxPl0KJSBSZXBvcnRMYWIgZ2VuZXJhdGVkIFBERiBkb2N1bWVudCAtLSBkaWdlc3QgKGh0dHA6Ly93d3cucmVwb3J0bGFiLmNvbSkKCi9JbmZvIDcgMCBSCi9Sb290IDYgMCBSCi9TaXplIDExCj4+CnN0YXJ0eHJlZgozMDA0CiUlRU9GCg==:3451:application/pdf:verizon_lease_uae_5.pdf:bb389014d20113b439fe0e23c0696e53 --var destinationPath=/home/sparkflows/fire-data/data/GENAI/Lease-Agreement/Upload/verizon_lease_uae_5.pdf --var submit1=true --var genAiResponse=<p><br></p>",
  "nodes": [
    {
      "id": "1",
      "name": "DocumentToText",
      "iconImage": "/images/icons/node-icon/PDF.svg",
      "description": "The DocumentToText node extracts text content from documents, including PDF, TXT, DOCX, and image files, located in a specified file path or directory. It processes either a single file or an entire directory, producing a structured DataFrame with columns for the extracted text, file name, page numbers, and optionally, base64-encoded data for PDFs and images.",
      "details": "<h2>DocumentToText Node Details</h2><br>\nThe DocumentToText node extracts text content from documents, including PDF, TXT, DOCX, and image files, located in a specified file path or directory. It processes either a single file or an entire directory, producing a structured DataFrame with columns for the extracted text, file name, page numbers, and optionally, base64-encoded data for PDFs and images.<br>\n<br>\n<br>\n<h4>General:</h4><br>\n<br>\n<h5>Directory/File Path:</h5> Specifies the path to a single document file or a directory containing multiple documents. This field is required and must be accessible to the PySpark engine.<br>\n<br>\n<h5>Document Type:</h5> Selects the types of documents to process. Options include:<br>\n<br>\n<ul>\n<li> pdf: Processes PDF files, extracting text and optionally converting pages to base64-encoded images.</li>\n<li> txt: Processes plain text files, extracting text only.</li>\n<li> docx: Processes Microsoft Word documents, extracting text only.</li>\n<li> image: Processes image files (e.g., PNG, JPEG) for text extraction via OCR, with optional base64 encoding.</li>\n</ul>\nIf left empty, the node processes all supported file types (PDF, TXT, DOCX, and images) in the specified path.<br>\n<br>\n<br>\n<h5>Select Image Column:</h5> Specifies a column containing paths to image files when processing images. This is optional and only required if image paths are provided in a DataFrame column rather than the directory path.<br>\n<br>\n<h5>Image Encoding:</h5> Determines whether to include a column with base64-encoded data for PDFs and images. Options are:<br>\n<ul>\n<li> true: Adds a column with base64-encoded representations of PDF pages and image files.</li>\n<li> false: Does not include base64-encoded data (default).</li>\n</ul>\nNote: TXT and DOCX files are not converted to base64 encodings, even if this option is enabled.<br>\n<br>\n<br>\n<h4>Recursive Processing:</h4><br>\n<h5>Recursive:</h5> Controls whether the node processes documents in subdirectories. Options are:<br>\n<ul>\n<li> true: Recursively processes all documents in the specified directory and its subdirectories.</li>\n<li> false: Processes only documents directly in the specified directory (default).</li>\n</ul>\n<br>\n<h4>Output Storage:</h4><br>\n<h5>Save Images Directory Path:</h5> Specifies a directory path to save extracted images (for PDFs and image files) when Image Encoding is enabled. This is optional and relevant for storing extracted image data.<br>\n<br>\n<h4>Output:</h4><br>\nThe node outputs a DataFrame with the following default columns:<br>\n<br>\n<ul>\n<li> fileName: The name of the source file.</li>\n<li> content: The extracted text content from the document.</li>\n<li> pageNumber:> The page number of the extracted content (for multi-page documents like PDFs; single-page documents like TXT, DOCX, and images use page number 1).</li>\n<li> If Image Encoding is set to true, a base64ImageData column is included for PDFs and images, containing base64-encoded representations of the pages or images. TXT and DOCX files will have null in this column.</li>\n</ul>",
      "examples": "<h2> Example: DocumentToText Node</h2>\n<br>\n<h3> Input:</h3>\nA directory /data/documents/ contains the following files:<br>\n- report.pdf (a 2-page PDF document)<br>\n- notes.txt (a plain text file)<br>\n- proposal.docx (a Microsoft Word document)<br>\n- chart.png (an image file with text)<br>\n<br>\nThe DocumentToText node is configured as follows:<br>\n<ul>\n<li> Directory/File Path: /data/documents/</li>\n<li> Document Type: [\"pdf\", \"txt\", \"docx\", \"image\"] (process all supported types)</li>\n<li> Select Image Column: Empty (no specific image column; uses file path for images)</li>\n<li> Image Encoding: true (includes base64-encoded data for PDFs and images)</li>\n<li> Recursive: false (processes only files in the specified directory)</li>\n<li> Save Images Directory Path: /data/output/images/</li>\n</ul>\n<h3> Output:</h3>\nThe node processes the files and produces a DataFrame with the following structure:<br>\n<br>\nfileName       | content                              | pageNumber | base64ImageData<br>\n---------------|--------------------------------------|------------|----------------------------------<br>\nreport.pdf     | This is page 1 of the report...      | 1          | iVBORw0KGgoAAAANSUhEUg...<br>\nreport.pdf     | This is page 2 of the report...      | 2          | iVBORw0KGgoAAAANSUhEUg...<br>\nnotes.txt      | Meeting notes: discuss project...    | 1          | null<br>\nproposal.docx  | Proposal for new project...          | 1          | null<br>\nchart.png      | Sales: Q1 2025...                    | 1          | iVBORw0KGgoAAAANSUhEUg...<br>\n<br>\n<h3> Explanation:</h3>\n- The report.pdf file is processed, extracting text from both pages, resulting in two rows (one per page). With Image Encoding set to true, each page is also converted to a base64-encoded image in the base64ImageData column.<br>\n- The notes.txt file is processed as a single-page document, with its text extracted into the content column. No base64 encoding is applied, so base64ImageData is null.<br>\n- The proposal.docx file is processed, extracting its text content into a single row. No base64 encoding is applied, so base64ImageData is null.<br>\n- The chart.png file is processed using OCR to extract text, and its base64-encoded image data is included in the base64ImageData column.<br>\n- Extracted images from the PDF and PNG files are saved to /data/output/images/.<br>\n- Since Recursive is set to false, only files directly in /data/documents/ are processed.<br>",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeDocumentToText",
      "x": "106.594px",
      "y": "91.5938px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "filePath",
          "value": "${genaiHome}${destinationPath}",
          "widget": "textfield",
          "title": "Directory/File Path",
          "description": "Select a Pdf/Text/Docx File or Directory",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileType",
          "value": "pdf",
          "widget": "array",
          "title": "Document Type",
          "description": "Choose a Document Type.If Empty all four types of files will be processed.",
          "optionsArray": [
            "pdf",
            "txt",
            "docx",
            "image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "recursive",
          "value": "false",
          "widget": "array",
          "title": "Recursive",
          "description": "Recursively process the documents in the given Directory",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "imgPathCols",
          "value": "[]",
          "widget": "variables",
          "title": "Select Image Column",
          "description": "",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "isImage",
          "value": "false",
          "widget": "array",
          "title": "Image Encoding",
          "description": "Adds a column for base64 encoded pages",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "saveImageDir",
          "value": "",
          "widget": "textfield",
          "title": "Save Images Directory Path",
          "description": "The file path to save the output",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "columns",
          "value": "",
          "widget": "tab",
          "title": "Rename Output Cols",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileNameCol",
          "value": "fileName",
          "widget": "textfield",
          "title": "File Name Column",
          "description": "Rename File Name Column. Defaults to fileName",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "contentCol",
          "value": "content",
          "widget": "textfield",
          "title": "Content Column",
          "description": "Rename Content Column. Defaults to content",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "pageNumberCol",
          "value": "pageNumber",
          "widget": "textfield",
          "title": "Page Number Column",
          "description": "Rename Page Number Column. Defaults to pageNumber",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "base64ImageCol",
          "value": "base64ImageCol",
          "widget": "textfield",
          "title": "Base64 Image Column",
          "description": "Rename Image Column. Defaults to base64ImageCol",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "2",
      "name": " Multi LLM Query",
      "iconImage": "/images/icons/node-icon/Graph_group_by_column.svg",
      "description": "The Multi LLM Query node is designed to query multiple large language models (LLMs) from providers such as OpenAI, Bedrock, and Gemini, using a DataFrame as input. It processes user queries, text content, and/or base64-encoded images to generate responses based on the selected model and task, producing a structured DataFrame output.",
      "details": "<h2>Multi LLM Query Node Details</h2>\n<br>\nThe Multi LLM Query node is designed to query multiple large language models (LLMs) from providers such as OpenAI, Bedrock, and Gemini, using a DataFrame as input. It processes user queries, text content, and/or base64-encoded images to generate responses based on the selected model and task, producing a structured DataFrame output.<br>\n<br>\n<h3>General:</h3>\n<br>\n<h4>Select Task:</h4>\nSpecifies the task to perform. Options include:<br>\n- summary: Generates a summary of the content in bullet points.<br>\n- translation: Translates the content to English.<br>\n- topic_extraction: Extracts key topics from the content.<br>\n- other: Allows for a custom task defined by the user.<br>\n<br>\n<h4>Prompt:</h4>\nAllows users to provide a custom prompt / instructions for the selected task.<br>\n<br>\n<h4>Content Column:</h4>\nSpecifies the DataFrame column containing the text content to be processed. Required for text or text+image modes.<br>\n<br>\n<h4>Model Selection:</h4>\nSelects the LLM provider to use. Options are:<br>\n- openai: Uses OpenAI models (e.g., gpt-4o).<br>\n- bedrock: Uses AWS Bedrock models (e.g., Claude models).<br>\n- gemini: Uses Google Gemini models (e.g., gemini-1.5-flash-latest).<br>\n<br>\n<h4>Select Connection:</h4>\nSpecifies the connection details for the selected LLM provider (e.g., API keys for OpenAI/Gemini, AWS credentials for Bedrock). Required to authenticate and access the chosen model.<br>\n<br>\n<h4>Temperature:</h4>\nControls the randomness of the LLM's output. Default is 0.7. Higher values increase creativity, while lower values ensure more deterministic responses.<br>\n<br>\n<h4>Image Column:</h4>\nSpecifies the DataFrame column containing base64-encoded images. Required for image or text+image modes.<br>\n<br>\n<h4>Mode Selection:</h4>\nDetermines the input mode for the LLM. Options are:<br>\n- text: Processes text-only input from the content column or custom prompt.<br>\n- image: Processes base64-encoded images from the image column.<br>\n- text+image: Processes both text and base64-encoded images.<br>\n<br>\n<h4>Timeout (seconds):</h4>\nSpecifies the maximum time (in seconds) to wait for the model response. Visible when OpenAI or Gemini is selected.<br>\n<br>\n<h4>Thinking Budget:</h4>\nControls the computational budget (e.g., steps or tokens) for Gemini models. Only visible when Gemini is selected.<br>\n<br>\n<h3>Advanced:</h3>\n<br>\n<h4>Aggregate Response:</h4>\nSpecifies how to aggregate input data before processing. Options are:<br>\n- none: Processes each row individually, retaining fileName and pageNumber (if provided).<br>\n- all: Aggregates all rows into a single response.<br>\n- perfile: Aggregates rows by fileName, producing one response per file.<br>\n<br>\n<h4>Number of Partitions:</h4>\nSpecifies the number of Spark partitions for distributed processing. Default is 3.<br>\n<br>\n<h4>File Name Column:</h4>\nSpecifies the DataFrame column containing file names. Required for perfile aggregation mode.<br>\n<br>\n<h4>Page Number Column:</h4>\nSpecifies the DataFrame column containing page numbers (e.g., for PDFs). Optional, used for row-wise processing with none aggregation mode.<br>\n<br>\n<h3>Output:</h3>\nThe node outputs a DataFrame with columns based on the aggregation mode:<br>\n- none: Includes fileName (if provided), pageNumber (if provided), and response.<br>\n- perfile: Includes fileName and response.<br>\n- all: Includes only the response column.<br>\nThe response column contains the LLM-generated text or error messages if the API call fails.<br>",
      "examples": "<h2>Multi LLM Query Node Examples</h2>\n<br>\n<h3>Input:</h3>\nA DataFrame contains the following data:<br>\n- fileName: [\"doc1.pdf\", \"doc1.pdf\", \"doc2.pdf\"]<br>\n- pageNumber: [\"1\", \"2\", null]<br>\n- content: [\"Article about climate change...\", \"Climate change impacts...\", \"Renewable energy report...\"]<br>\n- imageBase64: [null, \"iVBORw0KGgoAAAANSUhEUg...\", null]<br>\n<br>\nThe Multi LLM Query node is configured as follows:<br>\n- Select Task: summary<br>\n- Prompt: \"Summarize the content in bullet points.\"<br>\n- Content Column: content<br>\n- Model Selection: openai<br>\n- Select Connection: Configured with valid OpenAI API key<br>\n- Temperature: 0.7<br>\n- Timeout (seconds): 90<br>\n- Image Column: imageBase64<br>\n- Mode Selection: text+image<br>\n- Aggregate Response: perfile<br>\n- Number of Partitions: 3<br>\n- File Name Column: fileName<br>\n- Page Number Column: pageNumber<br>\n<br>\n<h3>Output:</h3>\nThe node processes the DataFrame and produces a DataFrame with the following structure:<br>\n- fileName: doc1.pdf<br>\nresponse:<br>\n- Climate change effects on ecosystems<br>\n- Rising temperatures<br>\n<br>\n- fileName: doc2.pdf<br>\nresponse:<br>\n- Renewable energy advancements<br>\n- Solar and wind adoption<br>",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeMultiLLMQuery",
      "x": "258.762px",
      "y": "300.762px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "llmConnection",
          "value": "openai-api-connection",
          "widget": "object_array",
          "title": "Select Connection",
          "description": "Select Connection",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "temperature",
          "value": "0",
          "widget": "textfield",
          "title": "Temperature",
          "description": "Temperature setting for the model (default: 0).",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "contentCol",
          "value": "content",
          "widget": "variable",
          "title": "Content Column",
          "description": "Column name for the text content.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "imageCol",
          "value": "",
          "widget": "variable",
          "title": "Image Column",
          "description": "Column name for the base 64 image.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "inputMode",
          "value": "text",
          "widget": "array",
          "title": "Mode Selection",
          "description": "Select the model to use (text, image, text+image).",
          "optionsArray": [
            "text",
            "image",
            "text+image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "Prompt",
          "value": "",
          "widget": "tab",
          "title": "Prompt",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "task",
          "value": "other",
          "widget": "key_value_array",
          "title": "Select Prompt",
          "description": "Specify the task to perform: summary, translation, topic extraction, or other.",
          "optionsMap": {
            "summary": "Generate Summary in bullet points ",
            "translation": "Translate the following content to default language",
            "topic_extraction": "Extract key topics from the following content.",
            "other": ""
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "customPrompt",
          "value": "You are a professional real estate legal consultant. Review the lease agreement and produce a cleanly structured summary using HTML only.\n\nThe sections should include:\n- <h1>Lease Agreement Summary</h1>\n- <h2>Key Terms</h2> ÃÂ¢ÃÂÃÂ Use a two-column table with borders: ÃÂ¢ÃÂÃÂTermÃÂ¢ÃÂÃÂ and ÃÂ¢ÃÂÃÂDescriptionÃÂ¢ÃÂÃÂ.\n- <h2>Problematic Clauses</h2> ÃÂ¢ÃÂÃÂ Two-column tableÃÂÃÂ with borders: ÃÂ¢ÃÂÃÂClauseÃÂ¢ÃÂÃÂ and ÃÂ¢ÃÂÃÂExplanationÃÂ¢ÃÂÃÂ.\n- <h2>Legal and Commercial Implications</h2> ÃÂ¢ÃÂÃÂ One short, professional paragraph.\n- <h2>Recommendations</h2> ÃÂ¢ÃÂÃÂ Two-column tableÃÂÃÂ with borders: ÃÂ¢ÃÂÃÂActionÃÂ¢ÃÂÃÂ and ÃÂ¢ÃÂÃÂRationaleÃÂ¢ÃÂÃÂ.\n\nÃÂ¢ÃÂÃÂÃÂÃÂ Only return clean, structured business professional HTML with no additional commentary or code formatting.",
          "widget": "textareafield",
          "title": "Prompt",
          "description": "Custom prompt to override the default instructions.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "userQueryCol",
          "value": "",
          "widget": "variable",
          "title": "User Query Column",
          "description": "Column name for user query, (if the query is in a column)",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "Advanced",
          "value": "",
          "widget": "tab",
          "title": "Advanced",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "aggregateMode",
          "value": "ALL",
          "widget": "enum",
          "title": "Aggregate Response",
          "optionsMap": {
            "NONE": "Do not aggregate rows",
            "ALL": "Aggregate all rows",
            "PERFILE": "Aggregate per file"
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "numPartitions",
          "value": "3",
          "widget": "textfield",
          "title": "Number of Partitions",
          "description": "Number of Partitions",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileNameCol",
          "value": "fileName",
          "widget": "variable",
          "title": "File Name Column",
          "description": "Select File Name Column",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "pageNumberCol",
          "value": "",
          "widget": "variable",
          "title": "Page Number Column",
          "description": " Select Page Number column.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "timeout",
          "value": "180",
          "widget": "textfield",
          "title": "Timeout (seconds)",
          "description": "Maximum time to wait for Openai and Gemini API response",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%"
        },
        {
          "name": "thinkingBudget",
          "value": "-1",
          "widget": "textfield",
          "title": "Thinking Budget",
          "description": "Configure the Gemini thinking budget by specifying the number of tokens to allocate for thinking. For Flash and Flash Lite models, values can range from 0 to 24,576 or -1 for dynamic thinking. For 2.5 Pro model, values must be between 1 and 24,576; setting 0 is not allowed.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%"
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "3",
      "name": "Print N Rows",
      "iconImage": "/images/icons/node-icon/print_n_rows.svg",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "<h2>Print N Rows Node Details</h2>\n<br>\nThis node is used to print the first N rows from the incoming dataframe.<br>\n<br>\nThe Number of rows that needs to be printed can be configured in the node.<br>\n<br>\n<h4>Input Parameters</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> TITLE : Enter a short description for the type of information being displayed.</li>\n<li> NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N=10).</li>\n<li> DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li> This node can be used to view, analyze and validate the output of the Dataframe.</li>\n</ul>",
      "examples": "when input 5 in no of rows,it will show first 5 rows of the table as follows<br>\n<br>\nPartID\tSupplierID\tPartName\t<br>\n<br>\nP9271\t  S798\t    Part_D\t<br>\nP523\t  S955\t    Part_K\t<br>\nP3201\t  S332\t    Part_M\t<br>\nP9634\t  S527\t    Part_G\t<br>\nP9345\t  S850\t    Part_M<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "591.357px",
      "y": "324.369px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Lease Analysis",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "5",
      "name": "Sticky Note",
      "iconImage": "fa fa-file-text",
      "description": "Allows capturing Notes on the Workflow",
      "details": "",
      "examples": "",
      "type": "sticky",
      "nodeClass": "fire.nodes.doc.NodeStickyNote",
      "x": "657px",
      "y": "70px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "bgColor",
          "value": "gray",
          "widget": "textfield",
          "title": "Bg Color",
          "description": "Background of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "width",
          "value": "491.306878px",
          "widget": "textfield",
          "title": "Width",
          "description": "Width of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "height",
          "value": "463.306878px",
          "widget": "textfield",
          "title": "Height",
          "description": "Height of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "comment",
          "value": "<h3><strong>Lease Agreement Flow</strong></h3><h4><br></h4><h4>Step 1: <code>DocumentToText</code> (PDF Parser)</h4><p><br></p><p><strong>Purpose:</strong></p><p> Converts uploaded lease agreements (PDF/DOCX) into machine-readable structured text.</p><p> </p><p><strong>Input:</strong></p><ul><li>Folder containing one or more lease documents</li></ul><p><br></p><p><strong>Output:</strong></p><ul><li>Structured lease text per file</li><li>Includes: <code>fileName</code>, <code>pageNumber</code>, <code>contentConcat</code></li></ul><h4><br></h4><h4><br></h4><h4>Step 2: <code>Multi LLM Query</code></h4><p><br></p><p><strong>Purpose:</strong></p><p> Extracts key legal and financial terms from lease agreements and flags potentially problematic clauses.</p><p><br></p><p><strong>Input:</strong></p><ul><li>Parsed lease content from <code>DocumentToText</code></li></ul><p><br></p><p><strong>What it does:</strong></p><ul><li>Identifies and summarizes critical terms:</li><li class=\"ql-indent-1\">Lease duration, rent structure, renewal options, termination clauses</li><li>Highlights vague or risky language</li><li>Flags sections that may lead to legal or financial uncertainty</li></ul><p><br></p><p><strong>Output:</strong></p><ul><li>Professional summary of key terms</li><li>Highlighted ÃÂ¢ÃÂÃÂProblem ClausesÃÂ¢ÃÂÃÂ with short risk descriptions</li><li>Brief legal and commercial implications section</li></ul><p><br></p>",
          "widget": "textarea_rich",
          "title": "Comment",
          "description": "Comments for the Workflow",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "id": 1
    },
    {
      "source": "2",
      "target": "3",
      "id": 2
    }
  ],
  "dataSetDetails": [],
  "engine": "pyspark"
}