{
  "name": "Generic-Chat-Embedding",
  "uuid": "d21b4eec-9827-4217-9c18-07f4ced6551f",
  "category": "-",
  "nodes": [
    {
      "id": "2",
      "name": "DocumentToText",
      "iconImage": "/images/icons/node-icon/PDF.svg",
      "description": "The DocumentToText node extracts text content from documents, including PDF, TXT, DOCX, and image files, located in a specified file path or directory. It processes either a single file or an entire directory, producing a structured DataFrame with columns for the extracted text, file name, page numbers, and optionally, base64-encoded data for PDFs and images.",
      "details": "<h2>DocumentToText Node Details</h2><br>\nThe DocumentToText node extracts text content from documents, including PDF, TXT, DOCX, and image files, located in a specified file path or directory. It processes either a single file or an entire directory, producing a structured DataFrame with columns for the extracted text, file name, page numbers, and optionally, base64-encoded data for PDFs and images.<br>\n<br>\n<br>\n<h4>General:</h4><br>\n<br>\n<h5>Directory/File Path:</h5> Specifies the path to a single document file or a directory containing multiple documents. This field is required and must be accessible to the PySpark engine.<br>\n<br>\n<h5>Document Type:</h5> Selects the types of documents to process. Options include:<br>\n<br>\n<ul>\n<li> pdf: Processes PDF files, extracting text and optionally converting pages to base64-encoded images.</li>\n<li> txt: Processes plain text files, extracting text only.</li>\n<li> docx: Processes Microsoft Word documents, extracting text only.</li>\n<li> image: Processes image files (e.g., PNG, JPEG) for text extraction via OCR, with optional base64 encoding.</li>\n</ul>\nIf left empty, the node processes all supported file types (PDF, TXT, DOCX, and images) in the specified path.<br>\n<br>\n<br>\n<h5>Select Image Column:</h5> Specifies a column containing paths to image files when processing images. This is optional and only required if image paths are provided in a DataFrame column rather than the directory path.<br>\n<br>\n<h5>Image Encoding:</h5> Determines whether to include a column with base64-encoded data for PDFs and images. Options are:<br>\n<ul>\n<li> true: Adds a column with base64-encoded representations of PDF pages and image files.</li>\n<li> false: Does not include base64-encoded data (default).</li>\n</ul>\nNote: TXT and DOCX files are not converted to base64 encodings, even if this option is enabled.<br>\n<br>\n<br>\n<h4>Recursive Processing:</h4><br>\n<h5>Recursive:</h5> Controls whether the node processes documents in subdirectories. Options are:<br>\n<ul>\n<li> true: Recursively processes all documents in the specified directory and its subdirectories.</li>\n<li> false: Processes only documents directly in the specified directory (default).</li>\n</ul>\n<br>\n<h4>Output Storage:</h4><br>\n<h5>Save Images Directory Path:</h5> Specifies a directory path to save extracted images (for PDFs and image files) when Image Encoding is enabled. This is optional and relevant for storing extracted image data.<br>\n<br>\n<h4>Output:</h4><br>\nThe node outputs a DataFrame with the following default columns:<br>\n<br>\n<ul>\n<li> fileName: The name of the source file.</li>\n<li> content: The extracted text content from the document.</li>\n<li> pageNumber:> The page number of the extracted content (for multi-page documents like PDFs; single-page documents like TXT, DOCX, and images use page number 1).</li>\n<li> If Image Encoding is set to true, a base64ImageData column is included for PDFs and images, containing base64-encoded representations of the pages or images. TXT and DOCX files will have null in this column.</li>\n</ul>",
      "examples": "<h2> Example: DocumentToText Node</h2>\n<br>\n<h3> Input:</h3>\nA directory /data/documents/ contains the following files:<br>\n- report.pdf (a 2-page PDF document)<br>\n- notes.txt (a plain text file)<br>\n- proposal.docx (a Microsoft Word document)<br>\n- chart.png (an image file with text)<br>\n<br>\nThe DocumentToText node is configured as follows:<br>\n<ul>\n<li> Directory/File Path: /data/documents/</li>\n<li> Document Type: [\"pdf\", \"txt\", \"docx\", \"image\"] (process all supported types)</li>\n<li> Select Image Column: Empty (no specific image column; uses file path for images)</li>\n<li> Image Encoding: true (includes base64-encoded data for PDFs and images)</li>\n<li> Recursive: false (processes only files in the specified directory)</li>\n<li> Save Images Directory Path: /data/output/images/</li>\n</ul>\n<h3> Output:</h3>\nThe node processes the files and produces a DataFrame with the following structure:<br>\n<br>\nfileName       | content                              | pageNumber | base64ImageData<br>\n---------------|--------------------------------------|------------|----------------------------------<br>\nreport.pdf     | This is page 1 of the report...      | 1          | iVBORw0KGgoAAAANSUhEUg...<br>\nreport.pdf     | This is page 2 of the report...      | 2          | iVBORw0KGgoAAAANSUhEUg...<br>\nnotes.txt      | Meeting notes: discuss project...    | 1          | null<br>\nproposal.docx  | Proposal for new project...          | 1          | null<br>\nchart.png      | Sales: Q1 2025...                    | 1          | iVBORw0KGgoAAAANSUhEUg...<br>\n<br>\n<h3> Explanation:</h3>\n- The report.pdf file is processed, extracting text from both pages, resulting in two rows (one per page). With Image Encoding set to true, each page is also converted to a base64-encoded image in the base64ImageData column.<br>\n- The notes.txt file is processed as a single-page document, with its text extracted into the content column. No base64 encoding is applied, so base64ImageData is null.<br>\n- The proposal.docx file is processed, extracting its text content into a single row. No base64 encoding is applied, so base64ImageData is null.<br>\n- The chart.png file is processed using OCR to extract text, and its base64-encoded image data is included in the base64ImageData column.<br>\n- Extracted images from the PDF and PNG files are saved to /data/output/images/.<br>\n- Since Recursive is set to false, only files directly in /data/documents/ are processed.<br>",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeDocumentToText",
      "x": "118px",
      "y": "321px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "filePath",
          "value": "/home/sparkflows/fire-data/Gai_pdf",
          "widget": "textfield",
          "title": "Directory/File Path",
          "description": "Select a Pdf/Text/Docx File or Directory",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileType",
          "value": "pdf",
          "widget": "array",
          "title": "Document Type",
          "description": "Choose a Document Type.If Empty all four types of files will be processed.",
          "optionsArray": [
            "pdf",
            "txt",
            "docx",
            "image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "recursive",
          "value": "false",
          "widget": "array",
          "title": "Recursive",
          "description": "Recursively process the documents in the given Directory",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "imgPathCols",
          "value": "",
          "widget": "variables",
          "title": "Select Image Column",
          "description": "",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "isImage",
          "value": "false",
          "widget": "array",
          "title": "Image Encoding",
          "description": "Adds a column for base64 encoded pages",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "saveImageDir",
          "value": "",
          "widget": "textfield",
          "title": "Save Images Directory Path",
          "description": "The file path to save the output",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "columns",
          "value": "",
          "widget": "tab",
          "title": "Rename Output Cols",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileNameCol",
          "value": "fileName",
          "widget": "textfield",
          "title": "File Name Column",
          "description": "Rename File Name Column. Defaults to fileName",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "contentCol",
          "value": "content",
          "widget": "textfield",
          "title": "Content Column",
          "description": "Rename Content Column. Defaults to content",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "pageNumberCol",
          "value": "pageNumber",
          "widget": "textfield",
          "title": "Page Number Column",
          "description": "Rename Page Number Column. Defaults to pageNumber",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "base64ImageCol",
          "value": "base64ImageCol",
          "widget": "textfield",
          "title": "Base64 Image Column",
          "description": "Rename Image Column. Defaults to base64ImageCol",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "3",
      "name": "Create Text Embedding",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node enables the creation of a embedding text data and output as dataframe",
      "details": "<h2> Text Embedder Node Details</h2>\n<br>\nThis node enables the creation of a embedding text data further used for indexing it into a vector database using the specified configuration. It supports multiple embedding providers including OpenAI, Bedrock, and HuggingFace.<br>\n<br>\n<h4> Parameters to be set:</h4>\n<br>\n### General:<br>\n- **Embedding Method**: Choose the embedding method from HuggingFace, OpenAI, or Bedrock.<br>\n- **Chunk Size**: Define the size of text chunks for processing large inputs (default: 1024).<br>\n- **Chunk Overlap**: Set the overlap size between consecutive chunks (default: 100).<br>\n- **Content Column**: Select the column that contains the text content (default: `content`).<br>\n- **File Name Column**: Select the column that contains file names (default: `fileName`).<br>\n- **Page Number Column**: Select the column that contains page numbers (default: `pageNumber`).<br>\n- **Base64 Image Column**: Select the column that contains Base64 encoded images (default: `base64Image`).<br>\n- **User Query**: Provide a user query string for search or processing.<br>\n- **Directory Path Column**: Set the column name for directory paths (default: `directoryPath`).<br>\n<br>\n### Service-Specific Configurations:<br>\n<br>\n#### OpenAI:<br>\n- **API Key**: Provide your OpenAI API key.<br>\n- **Embedding Model**: Specify the OpenAI embedding model.<br>\n- **Max Retries**: Set the maximum number of retries for API calls (default: 6).<br>\n- **Embedding Context Length**: Define the context length for embeddings (default: 8191).<br>\n<br>\n#### Bedrock:<br>\n- **Service Name**: Specify the Bedrock service name.<br>\n- **Region Name**: Provide the AWS region name.<br>\n- **AWS Access Key ID**: Provide your AWS Access Key ID.<br>\n- **AWS Secret Access Key**: Provide your AWS Secret Access Key.<br>\n- **Embedding Model**: Specify the Bedrock embedding model.<br>\n<br>\n#### HuggingFace:<br>\n- **Model Name**: Specify the HuggingFace embedding model (default: `all-MiniLM-L6-v2`).<br>",
      "examples": "",
      "type": "transform",
      "nodeClass": "fire.nodes.gai.NodeTextEmbedder",
      "x": "293px",
      "y": "331px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "createEmbedding",
          "value": "",
          "widget": "tab",
          "title": "Create Embedding",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "embeddingMethod",
          "value": "OpenAI",
          "widget": "array",
          "title": "Embedding Method",
          "description": "Select the embedding method.",
          "optionsArray": [
            "HuggingFace",
            "OpenAI",
            "Bedrock"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "llmConnection",
          "value": "openai-api-connection",
          "widget": "object_array",
          "title": "Select Connection",
          "description": "Select Connection",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "chunkSize",
          "value": "2000",
          "widget": "textfield",
          "title": "Chunk Size",
          "description": "Size of each text chunk.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "chunkOverlap",
          "value": "100",
          "widget": "textfield",
          "title": "Chunk Overlap",
          "description": "Overlap size between consecutive chunks.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "contentCol",
          "value": "content",
          "widget": "variable",
          "title": "Vector Indexer",
          "description": "Column name for content.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "queryEmbedding",
          "value": "",
          "widget": "tab",
          "title": "Query Embedding",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "userQuery",
          "value": "",
          "widget": "textarea_small",
          "title": "User Query",
          "description": "User provided query.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "huggingface",
          "value": "",
          "widget": "tab",
          "title": "Hugging Face",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "hfModelName",
          "value": "",
          "widget": "textfield",
          "title": "Hugging Face Model",
          "description": "Hugging Face embedding model.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "4",
      "name": "Save Faiss DB",
      "iconImage": "fa fa-tumblr-square",
      "description": "Save Vector Embeddings to faiss db",
      "details": "<h2>Save Faiss DB Node Details</h2><br>\nThe Save Faiss DB node stores vector embeddings and associated metadata from a DataFrame into a FAISS vector database, enabling efficient similarity search and retrieval. It is designed for PySpark-based workflows, making it suitable for integrating vector-based storage into data pipelines. The node allows specification of columns for text content, embeddings, and metadata, which are saved to a FAISS index for later querying.<br>\n<br>\n<h4>General:</h4><br>\n<br>\n<h5>File Name Column:</h5> Specifies the DataFrame column containing file names associated with the content. Default is 'fileName'. This is optional and used for metadata tracking.<br>\n<br>\n<h5>Page Number Column:</h5> Specifies the DataFrame column containing page numbers for multi-page documents. Default is 'pageNumber'. This is optional and relevant for documents like PDFs.<br>\n<br>\n<h5>Content Column:</h5> Specifies the DataFrame column containing the text content to be stored. Default is 'content'. This is required to associate text with the embeddings.<br>\n<br>\n<h5>Directory Path Column:</h5> Specifies the DataFrame column containing directory paths for the source files. Default is 'directoryPath'. This is optional and used for metadata tracking.<br>\n<br>\n<h5>Embeddings Column:</h5> Specifies the DataFrame column containing the embeddings (vector representations) of the text content. Default is 'embeddings'. This is required for storage in the FAISS database.<br>\n<br>\n<h5>Base64 Image Column:</h5> Specifies the DataFrame column containing base64-encoded images associated with the content. Default is 'base64Image'. This is optional and used for storing image-related metadata.<br>\n<br>\n<h5>FAISS Index Name:</h5> Specifies the name of the FAISS index where the embeddings will be stored. Default is 'faiss_index'. This is required to identify the index.<br>\n<br>\n<h5>FAISS Index Directory Path:</h5> Specifies the directory path (local or distributed filesystem) where the FAISS index will be saved. This is required to store the index.<br>\n<br>\n<h5>Dimension:</h5> Specifies the dimensionality of the embeddings. Default is 0, which must be overridden to match the embedding model (e.g., 1536 for text-embedding-ada-002, 1024 for multilingual-e5-large). This is required for proper index creation.<br>\n<br>\n<h4>Output:</h4><br>\nThe node saves the embeddings, content, and optional metadata (file names, page numbers, directory paths, base64 images) to the specified FAISS index in the designated directory. It does not produce a DataFrame output but confirms the successful storage of data in the FAISS vector database, ready for similarity search and retrieval.<br>",
      "examples": "<h2>Example: Save Faiss DB Node</h2><br>\n<br>\n<h3>Input:</h3><br>\nA DataFrame contains the following data:<br>\n- fileName: [\"report.pdf\", \"study.docx\"]<br>\n- pageNumber: [1, 1]<br>\n- content: [\"Climate change impacts ecosystems...\", \"AI advancements in 2025...\"]<br>\n- directoryPath: [\"/data/docs/\", \"/data/docs/\"]<br>\n- embeddings: [[0.12, 0.45, ...], [0.23, 0.67, ...]] (1024-dimensional vectors)<br>\n- base64Image: [\"iVBORw0KGgoAAAANSUhEUg...\", null]<br>\n<br>\nThe Save Faiss DB node is configured as follows:<br>\n<ul>\n<li> File Name Column: fileName</li>\n<li> Page Number Column: pageNumber</li>\n<li> Content Column: content</li>\n<li> Directory Path Column: directoryPath</li>\n<li> Embeddings Column: embeddings</li>\n<li> Base64 Image Column: base64Image</li>\n<li> FAISS Index Name: faiss_index</li>\n<li> FAISS Index Directory Path: /data/faiss_indices/</li>\n<li> Dimension: 1024</li>\n</ul>\n<h3>Output:</h3><br>\nThe node stores the embeddings and associated data in the FAISS vector database under the index named 'faiss_index' in the directory '/data/faiss_indices/'. The stored data includes:<br>\n- Vectors from the embeddings column (1024-dimensional).<br>\n- Text from the content column.<br>\n- Metadata from the fileName, pageNumber, directoryPath, and base64Image columns.<br>\n<br>\nThe FAISS index is now ready for similarity search queries.<br>\n<br>\n<h3>Explanation:</h3><br>\n- The node processes the DataFrame, extracting the embeddings and content columns to store in the FAISS index named 'faiss_index'.<br>\n- The fileName, pageNumber, directoryPath, and base64Image columns are stored as metadata, providing additional context for each vector (e.g., fileName: \"report.pdf\", base64Image: base64-encoded image for the first row, null for the second).<br>\n- The Dimension is set to 1024 to match the embedding model (e.g., multilingual-e5-large).<br>\n- The FAISS Index Directory Path ('/data/faiss_indices/') specifies where the index is saved.<br>\n- If optional columns like Base64 Image Column or Directory Path Column were not provided, they would not be included as metadata in the FAISS index.<br>\n- The node ensures the FAISS index is created or updated with the provided data, making it available for efficient similarity searches.<br>",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeSaveToFaissDB",
      "x": "475px",
      "y": "318px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileNameCol",
          "value": "fileName",
          "widget": "variable",
          "title": "File Name Column",
          "description": "Column name for file names.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "pageNumberCol",
          "value": "pageNumber",
          "widget": "variable",
          "title": "Page Number Column",
          "description": "Column name for page numbers.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "contentCol",
          "value": "text",
          "widget": "variable",
          "title": "Content Column",
          "description": "Column name for text content.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "directoryPathCol",
          "value": "directorypath",
          "widget": "variable",
          "title": "Directory Path Column",
          "description": "Column name for directory paths.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "embeddingsCol",
          "value": "embeddings",
          "widget": "variable",
          "title": "Embeddings Column",
          "description": "Column name for embeddings.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "base64ImageCol",
          "value": "",
          "widget": "variable",
          "title": "Base64 Image Column",
          "description": "Column name for Base64 encoded images.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "faissIndexName",
          "value": "faiss_index",
          "widget": "textfield",
          "title": "FAISS Index Name",
          "description": "Name of the FAISS index.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "faissIndexDir",
          "value": "/home/sparkflows/fire-data/Gai_pdf/Owners_Manual_DB",
          "widget": "textfield",
          "title": "FAISS Index Directory Path",
          "description": "Directory path for the FAISS index.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "dimension",
          "value": "1536",
          "widget": "textfield",
          "title": "Dimension",
          "description": "Dimension for embeddings.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [
    {
      "source": "2",
      "target": "3",
      "id": 1
    },
    {
      "source": "3",
      "target": "4",
      "id": 2
    }
  ],
  "dataSetDetails": [],
  "engine": "pyspark"
}