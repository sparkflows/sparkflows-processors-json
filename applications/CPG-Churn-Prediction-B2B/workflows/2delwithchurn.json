{
  "name": "2delwithchurn",
  "uuid": "d09e5e5b-b07a-4140-97e9-f9edc5fcec85",
  "category": "-",
  "nodes": [
    {
      "id": "1",
      "name": "Dataset Structured",
      "iconImage": "fa fa-th-list",
      "description": "This Node creates a DataFrame by reading data from HDFS, HIVE etc. The dataset was defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.",
      "details": "This Node creates a DataFrame by reading data from HDFS, HIVE etc.<br>\n<br>\nThe data has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.<br>",
      "examples": "<h2> Dataset Structured Node Example</h2>\n<br>\nScenario:<br>\n<br>\nLet's say you have multiple datasets available in your workflow and you want to select one of them as input for the next node. You can use the Dataset Structured node to choose the desired dataset.<br>\n<br>\nConfiguration:<br>\n<br>\n1. **Output Storage Level:** Select the desired storage level for the output DataFrame.<br>\n2. **Dataset:** Choose the dataset from the dropdown list.<br>\n<br>\nOutput:<br>\n<br>\nThe node will output the selected dataset as a DataFrame.<br>",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "159.889px",
      "y": "61.8889px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "dataset",
          "value": "d55c867b-e91d-425e-baad-93ffc56931e0",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "2",
      "name": "Dataset Structured",
      "iconImage": "fa fa-th-list",
      "description": "This Node creates a DataFrame by reading data from HDFS, HIVE etc. The dataset was defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.",
      "details": "This Node creates a DataFrame by reading data from HDFS, HIVE etc.<br>\n<br>\nThe data has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.<br>",
      "examples": "<h2> Dataset Structured Node Example</h2>\n<br>\nScenario:<br>\n<br>\nLet's say you have multiple datasets available in your workflow and you want to select one of them as input for the next node. You can use the Dataset Structured node to choose the desired dataset.<br>\n<br>\nConfiguration:<br>\n<br>\n1. **Output Storage Level:** Select the desired storage level for the output DataFrame.<br>\n2. **Dataset:** Choose the dataset from the dropdown list.<br>\n<br>\nOutput:<br>\n<br>\nThe node will output the selected dataset as a DataFrame.<br>",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "145.889px",
      "y": "207.889px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "dataset",
          "value": "eb70f21e-a80c-4bfa-9eac-c6788d1e627b",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "3",
      "name": "Dataset Structured",
      "iconImage": "fa fa-th-list",
      "description": "This Node creates a DataFrame by reading data from HDFS, HIVE etc. The dataset was defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.",
      "details": "This Node creates a DataFrame by reading data from HDFS, HIVE etc.<br>\n<br>\nThe data has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.<br>",
      "examples": "<h2> Dataset Structured Node Example</h2>\n<br>\nScenario:<br>\n<br>\nLet's say you have multiple datasets available in your workflow and you want to select one of them as input for the next node. You can use the Dataset Structured node to choose the desired dataset.<br>\n<br>\nConfiguration:<br>\n<br>\n1. **Output Storage Level:** Select the desired storage level for the output DataFrame.<br>\n2. **Dataset:** Choose the dataset from the dropdown list.<br>\n<br>\nOutput:<br>\n<br>\nThe node will output the selected dataset as a DataFrame.<br>",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "152.778px",
      "y": "340.778px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "dataset",
          "value": "cdab639b-a97b-4380-9cb5-d641844d4e67",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "4",
      "name": "Dataset Structured",
      "iconImage": "fa fa-th-list",
      "description": "This Node creates a DataFrame by reading data from HDFS, HIVE etc. The dataset was defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.",
      "details": "This Node creates a DataFrame by reading data from HDFS, HIVE etc.<br>\n<br>\nThe data has been defined earlier in Fire by using the Dataset Feature. As a user, you just have to select the Dataset of your interest.<br>",
      "examples": "<h2> Dataset Structured Node Example</h2>\n<br>\nScenario:<br>\n<br>\nLet's say you have multiple datasets available in your workflow and you want to select one of them as input for the next node. You can use the Dataset Structured node to choose the desired dataset.<br>\n<br>\nConfiguration:<br>\n<br>\n1. **Output Storage Level:** Select the desired storage level for the output DataFrame.<br>\n2. **Dataset:** Choose the dataset from the dropdown list.<br>\n<br>\nOutput:<br>\n<br>\nThe node will output the selected dataset as a DataFrame.<br>",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "324.889px",
      "y": "408.889px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "dataset",
          "value": "71e5a750-e14c-4b44-bc91-15bf83d86f15",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "5",
      "name": "Join Using SQL",
      "iconImage": "fa fa-stumbleupon",
      "description": "This node registers the incoming DataFrames as temporary tables and executes the SQL provided",
      "details": "<h2>Join Using SQL Details</h2>\n<br>\n<ul>\n<li> This node receives two or more input data frames and creates the corresponding temporary tables.</li>\n<li> Allows the user to write a SQL query to join these temporary tables.</li>\n<li> The resulting output dataframe contains the output of the SQL execution.</li>\n</ul>",
      "examples": "<h2>Join Using SQL Examples</h2>\n<br>\n<h4> Two-table joins</h4>\n<br>\nThe following example shows a two-table join:<br>\nSELECT order_num, lname, fname FROM tempTable1, tempTable2<br>\nWHERE tempTable1.customer_num = tempTable2.customer_num<br>\n<br>\n<h4> Multi-table joins</h4>\n<br>\nThe following multiple-table join yields the company name of the customer who ordered an item as well as its stock number and manufacturer code:<br>\nSELECT DISTINCT company, stock_num, manu_code<br>\nFROM tempTable1 c, tempTable2 o, tempTable3 i<br>\nWHERE c.customer_num = o.customer_num<br>\nAND o.order_num = i.order_num;<br>\n<br>\n<h4> LEFT OUTER joins</h4>\n<br>\nThe below table join yields data of all customers irrespective of whether or not they have placed any orders:<br>\nSELECT c.ID, c.NAME, o.AMOUNT, o.DATE<br>\nFROM tempTable1 c<br>\nLEFT OUTER JOIN tempTable2 o<br>\nON (c.ID = o.CUSTOMER_ID)<br>",
      "type": "join",
      "nodeClass": "fire.nodes.etl.NodeJoinUsingSQL",
      "x": "342.306px",
      "y": "165.389px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "tempTables",
          "value": "[\"sales_transactions\",\"customers\",\"products\",\"distributors\"]",
          "widget": "array_of_values",
          "title": "Temp Table Names",
          "description": "Temp Table Name to be used",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "sql",
          "value": "WITH CleanedSales AS (\r\n    -- Step 1: Clean and join the necessary source tables.\r\n    SELECT\r\n        st.DISTRIBUTOR_ID,\r\n        st.CUSTOMER_ID,\r\n        CAST(st.INV_DT AS DATE) AS INV_DT,\r\n        st.INV_NO,\r\n        st.SKUID,\r\n        st.QTY,\r\n        st.NET,\r\n        p.SECTOR,\r\n        p.CATEGORY,\r\n        p.SUBCATEGPRY,\r\n        d.DIST_NAME\r\n    FROM\r\n        sales_transactions st\r\n    LEFT JOIN\r\n        products p ON st.SKUID = p.SKUID\r\n    LEFT JOIN\r\n        distributors d ON st.DISTRIBUTOR_ID = d.DISTRIBUTOR_ID\r\n    WHERE\r\n        st.QTY > 0 AND st.NET > 0\r\n),\r\n\r\nCustomerFirstPurchase AS (\r\n    -- Step 2: Find the very first purchase date for each customer.\r\n    SELECT\r\n        CUSTOMER_ID,\r\n        MIN(INV_DT) as First_Invoice_Date\r\n    FROM\r\n        CleanedSales\r\n    GROUP BY\r\n        CUSTOMER_ID\r\n),\r\n\r\nMonthlyFeatures AS (\r\n    -- Step 3: Aggregate sales into monthly totals for each customer-product combination.\r\n    SELECT\r\n        CUSTOMER_ID,\r\n        TRUNC(INV_DT, 'MM') AS Invoice_Month,\r\n        SECTOR,\r\n        CATEGORY,\r\n        SUBCATEGPRY,\r\n        DIST_NAME,\r\n        ANY_VALUE(DISTRIBUTOR_ID) as DISTRIBUTOR_ID,\r\n        SUM(NET) AS Monthly_Total_Sales,\r\n        COUNT(DISTINCT INV_NO) AS Monthly_Invoice_Count_Calc\r\n    FROM\r\n        CleanedSales\r\n    GROUP BY\r\n        CUSTOMER_ID,\r\n        TRUNC(INV_DT, 'MM'),\r\n        SECTOR,\r\n        CATEGORY,\r\n        SUBCATEGPRY,\r\n        DIST_NAME\r\n),\r\n\r\n-- Step 4: Calculate all features using window functions to get cumulative values at each point in time.\r\nTimeSeriesFeatures AS (\r\n    SELECT\r\n        mf.CUSTOMER_ID,\r\n        mf.Invoice_Month,\r\n        mf.SECTOR,\r\n        mf.CATEGORY,\r\n        mf.SUBCATEGPRY,\r\n        mf.DIST_NAME,\r\n        mf.DISTRIBUTOR_ID,\r\n        \r\n        -- Monthly Features\r\n        mf.Monthly_Total_Sales AS Monthly_Avg_Sales,\r\n        mf.Monthly_Invoice_Count_Calc AS Monthly_Invoice_Count,\r\n        \r\n        -- Cumulative Period Averages/Sums\r\n        AVG(mf.Monthly_Total_Sales) OVER (PARTITION BY mf.CUSTOMER_ID, mf.SECTOR, mf.CATEGORY, mf.SUBCATEGPRY, YEAR(mf.Invoice_Month), QUARTER(mf.Invoice_Month) ORDER BY mf.Invoice_Month) AS Quarterly_Avg_Sales,\r\n        AVG(mf.Monthly_Total_Sales) OVER (PARTITION BY mf.CUSTOMER_ID, mf.SECTOR, mf.CATEGORY, mf.SUBCATEGPRY, YEAR(mf.Invoice_Month), (CASE WHEN MONTH(mf.Invoice_Month) <= 6 THEN 1 ELSE 2 END) ORDER BY mf.Invoice_Month) AS `6M_Avg_Sales`,\r\n        SUM(mf.Monthly_Invoice_Count_Calc) OVER (PARTITION BY mf.CUSTOMER_ID, mf.SECTOR, mf.CATEGORY, mf.SUBCATEGPRY, YEAR(mf.Invoice_Month), QUARTER(mf.Invoice_Month) ORDER BY mf.Invoice_Month) AS Quarterly_Invoice_Count,\r\n        SUM(mf.Monthly_Invoice_Count_Calc) OVER (PARTITION BY mf.CUSTOMER_ID, mf.SECTOR, mf.CATEGORY, mf.SUBCATEGPRY, YEAR(mf.Invoice_Month), (CASE WHEN MONTH(mf.Invoice_Month) <= 6 THEN 1 ELSE 2 END) ORDER BY mf.Invoice_Month) AS `6M_Invoice_Count`,\r\n        \r\n        -- Cumulative Lifetime Features\r\n        SUM(mf.Monthly_Total_Sales) OVER (PARTITION BY mf.CUSTOMER_ID ORDER BY mf.Invoice_Month) AS Total_Sales,\r\n        SUM(mf.Monthly_Invoice_Count_Calc) OVER (PARTITION BY mf.CUSTOMER_ID ORDER BY mf.Invoice_Month) AS Total_Invoice_Count,\r\n        \r\n        -- Other Features\r\n        DATEDIFF(mf.Invoice_Month, cfp.First_Invoice_Date) AS Customer_Age_In_Days,\r\n        MONTH(mf.Invoice_Month) AS INV_DATE_month\r\n    FROM\r\n        MonthlyFeatures mf\r\n    JOIN\r\n        CustomerFirstPurchase cfp ON mf.CUSTOMER_ID = cfp.CUSTOMER_ID\r\n),\r\n\r\n-- Step 5: Improved Churn Calculation - Track actual gaps between purchases\r\nChurnCalculation AS (\r\n    SELECT\r\n        CUSTOMER_ID, \r\n        SECTOR, \r\n        CATEGORY, \r\n        SUBCATEGPRY, \r\n        Invoice_Month,\r\n        LAG(Invoice_Month, 1) OVER (PARTITION BY CUSTOMER_ID, SECTOR, CATEGORY, SUBCATEGPRY ORDER BY Invoice_Month) AS Prev_Activity_Month,\r\n        Invoice_Month AS Current_Activity_Month\r\n    FROM MonthlyFeatures\r\n),\r\n\r\n-- Step 6: Apply improved churn flag logic\r\nFeaturesWithChurn AS (\r\n    SELECT\r\n        tsf.*,\r\n        (tsf.Total_Sales / NULLIF(tsf.Total_Invoice_Count, 0)) AS Avg_Sales_Per_Invoice,\r\n        CASE\r\n            WHEN cc.Prev_Activity_Month IS NULL THEN 0  -- First purchase, not churn yet\r\n            WHEN MONTHS_BETWEEN(cc.Current_Activity_Month, cc.Prev_Activity_Month) > 3 THEN 1  -- Churn detected\r\n            ELSE 0\r\n        END AS Actuals\r\n    FROM\r\n        TimeSeriesFeatures tsf\r\n    LEFT JOIN\r\n        ChurnCalculation cc ON tsf.CUSTOMER_ID = cc.CUSTOMER_ID \r\n                            AND tsf.Invoice_Month = cc.Invoice_Month \r\n                            AND tsf.SECTOR = cc.SECTOR \r\n                            AND tsf.CATEGORY = cc.CATEGORY \r\n                            AND tsf.SUBCATEGPRY = cc.SUBCATEGPRY\r\n),\r\n\r\nFirstChurnEventPerBucket AS (\r\n    -- Step 7: Find the FIRST churn event for each specific CUSTOMER-PRODUCT BUCKET.\r\n    SELECT\r\n        CUSTOMER_ID, SECTOR, CATEGORY, SUBCATEGPRY, MIN(Invoice_Month) AS First_Churn_Month\r\n    FROM FeaturesWithChurn \r\n    WHERE Actuals = 1\r\n    GROUP BY CUSTOMER_ID, SECTOR, CATEGORY, SUBCATEGPRY\r\n)\r\n\r\n-- Final Assembled Dataset with all requested columns and the correct filtering logic.\r\nSELECT\r\n    fwc.CUSTOMER_ID,\r\n    fwc.Monthly_Avg_Sales,\r\n    fwc.Quarterly_Avg_Sales,\r\n    fwc.`6M_Avg_Sales`,\r\n    fwc.Monthly_Invoice_Count,\r\n    fwc.Quarterly_Invoice_Count,\r\n    fwc.`6M_Invoice_Count`,\r\n    fwc.Avg_Sales_Per_Invoice,\r\n    fwc.Customer_Age_In_Days,\r\n    fwc.Total_Invoice_Count,\r\n    fwc.Total_Sales,\r\n    fwc.SECTOR,\r\n    fwc.CATEGORY,\r\n    fwc.INV_DATE_month,\r\n    fwc.DIST_NAME,\r\n    fwc.SUBCATEGPRY,\r\n    fwc.DISTRIBUTOR_ID,\r\n    fwc.Actuals\r\nFROM\r\n    FeaturesWithChurn fwc\r\nLEFT JOIN\r\n    FirstChurnEventPerBucket fce ON fwc.CUSTOMER_ID = fce.CUSTOMER_ID \r\n                                 AND fwc.SECTOR = fce.SECTOR \r\n                                 AND fwc.CATEGORY = fce.CATEGORY \r\n                                 AND fwc.SUBCATEGPRY = fce.SUBCATEGPRY\r\nWHERE\r\n    -- This condition keeps all data for a customer-product bucket *up to and including* their first churn month in that bucket.\r\n    fce.First_Churn_Month IS NULL OR fwc.Invoice_Month <= fce.First_Churn_Month\r\nORDER BY\r\n    fwc.CUSTOMER_ID,\r\n    fwc.Invoice_Month,\r\n    fwc.SECTOR,\r\n    fwc.CATEGORY,\r\n    fwc.SUBCATEGPRY;",
          "widget": "code_editor",
          "type": "sql_mysql",
          "title": "SQL",
          "description": "SQL to be run",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[\"CUSTOMER_ID\",\"Monthly_Avg_Sales\",\"Quarterly_Avg_Sales\",\"6M_Avg_Sales\",\"Monthly_Invoice_Count\",\"Quarterly_Invoice_Count\",\"6M_Invoice_Count\",\"Avg_Sales_Per_Invoice\",\"Customer_Age_In_Days\",\"Total_Invoice_Count\",\"Total_Sales\",\"SECTOR\",\"CATEGORY\",\"INV_DATE_month\",\"DIST_NAME\",\"SUBCATEGPRY\",\"DISTRIBUTOR_ID\",\"Actuals\"]",
          "widget": "schema_col_names",
          "title": "Column Names for the CSV",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"LONG\",\"LONG\",\"LONG\",\"DOUBLE\",\"INTEGER\",\"LONG\",\"DOUBLE\",\"STRING\",\"STRING\",\"INTEGER\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\"]",
          "widget": "schema_col_types",
          "title": "Column Types for the CSV",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Column Formats for the CSV",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "6",
      "name": "Print N Rows",
      "iconImage": "/images/icons/node-icon/print_n_rows.svg",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "<h2>Print N Rows Node Details</h2>\n<br>\nThis node is used to print the first N rows from the incoming dataframe.<br>\n<br>\nThe Number of rows that needs to be printed can be configured in the node.<br>\n<br>\n<h4>Input Parameters</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> TITLE : Enter a short description for the type of information being displayed.</li>\n<li> NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N=10).</li>\n<li> DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li> This node can be used to view, analyze and validate the output of the Dataframe.</li>\n</ul>",
      "examples": "when input 5 in no of rows,it will show first 5 rows of the table as follows<br>\n<br>\nPartID\tSupplierID\tPartName\t<br>\n<br>\nP9271\t  S798\t    Part_D\t<br>\nP523\t  S955\t    Part_K\t<br>\nP3201\t  S332\t    Part_M\t<br>\nP9634\t  S527\t    Part_G\t<br>\nP9345\t  S850\t    Part_M<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "574.778px",
      "y": "144.778px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Row Values",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "9",
      "name": "Count",
      "iconImage": "fa fa-th-list",
      "description": "This node counts the number of records in the incoming Dataframe and puts the count into result page.",
      "details": "This node counts the number of records in the incoming Dataframe and puts the count into result page.<br>\n<br>\nVariable Name to display count value and option to display it in the output can be specified in the node.<br>",
      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    LOCATION    |    DEPT         |    SALARY<br>\n-----------------------------------------------------------------------------<br>\nE01       |    DAVID       |    NEW YORK    |    HR           |    10000<br>\nE02       |    JOHN        |    NEW JERSEY  |    SALES        |    11000<br>\nE03       |    MARTIN      |    NEW YORK    |    MARKETING    |    12000<br>\nE04       |    TONY        |    NEW JERSEY  |    MARKETING    |    13000<br>\nE05       |    ROSS        |    NEW YORK    |    FRONT DESK   |    10000<br>\nE06       |    LISA        |    NEW JERSEY  |    FRONT DESK   |    11000<br>\nE07       |    PAUL        |    NEW YORK    |    MAINTENANCE  |    12000<br>\nE08       |    MARK        |    NEW JERSEY  |    MAINTENANCE  |    13000<br>\n<br>\nif Count node is configured to display count value against [EMP_COUNT] variable then it would be displayed in the output as below:<br>\n<br>\nEMP_COUNT      :    8<br>",
      "type": "shellcommand",
      "nodeClass": "fire.nodes.etl.NodeCount",
      "x": "467.556px",
      "y": "327.889px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "variable",
          "value": "count",
          "widget": "textfield",
          "title": "Variable Name",
          "description": "Name of the Variable in which the count is stored",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "printCount",
          "value": "true",
          "widget": "array",
          "title": "PrintCount",
          "description": "Print the count into result page.",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "10",
      "name": "Save CSV",
      "iconImage": "/images/icons/node-icon/csv.svg",
      "description": "Saves the DataFrame into the specified location in CSV Format",
      "details": "This node saves incoming Dataframe into the specified location in CSV format.<br>",
      "examples": "path-folder1/folder2/filename<br>\n<br>\nthe file will be saved under the file name at the path provided<br>\nif folder is not present it will be created and save the file<br>\nif the file already exists selection in save mode determines what happens to the file,append-adds the file data to it overwrite-replaces the file altogether<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.save.NodeSaveCSV",
      "x": "620.889px",
      "y": "266.889px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "path",
          "value": "/home/sparkflows/fire-data/sandbox/ouput/churn",
          "widget": "textfield",
          "title": "Path",
          "description": "Path where to save the CSV files",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "saveMode",
          "value": "Overwrite",
          "widget": "array",
          "title": "Save Mode",
          "description": "Whether to Append, Overwrite or Error if the path Exists",
          "optionsArray": [
            "Append",
            "Overwrite",
            "ErrorIfExists",
            "Ignore"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "header",
          "value": "true",
          "widget": "array",
          "title": "Header",
          "description": "Should a Header Row be saved with each File?",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "encoding",
          "value": "UTF-8",
          "widget": "textfield",
          "title": "Encoding",
          "description": "Decodes the CSV files by the given encoding type",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "quote",
          "value": "\"",
          "widget": "textfield",
          "title": "Quote",
          "description": "Sets a single character used for escaping quoted values where the separator can be part of the value",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "escape",
          "value": "\\",
          "widget": "textfield",
          "title": "Escape",
          "description": "Sets a single character used for escaping quotes inside an already quoted value.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "advanced",
          "value": "",
          "widget": "tab",
          "title": "Advanced",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "partitionColNames",
          "value": "[]",
          "widget": "variables",
          "title": "Partition Column Names",
          "description": "Partition Column Names",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "enableDownloadLink",
          "value": "true",
          "widget": "array_single",
          "title": "Enable Download Link",
          "description": "Generate download links for the saved CSV files",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileName",
          "value": "ChurnedDataSet",
          "widget": "textfield",
          "wdgtCommon": "enableDownloadLink",
          "title": "File Name To Download",
          "description": "Enter the FileName",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": "true"
        },
        {
          "name": "saveAsOneFile",
          "value": "true",
          "widget": "array",
          "title": "Save as One File",
          "description": "Save the output as a single CSV file using coalesce",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "5",
      "id": 1
    },
    {
      "source": "2",
      "target": "5",
      "id": 2
    },
    {
      "source": "3",
      "target": "5",
      "id": 3
    },
    {
      "source": "4",
      "target": "5",
      "id": 4
    },
    {
      "source": "5",
      "target": "9",
      "id": 5
    },
    {
      "source": "5",
      "target": "6",
      "id": 6
    },
    {
      "source": "5",
      "target": "10",
      "id": 7
    }
  ],
  "dataSetDetails": [
    {
      "id": 3286,
      "uuid": "d55c867b-e91d-425e-baad-93ffc56931e0",
      "header": true,
      "path": "/home/sparkflows/fire-data/sandbox/Raw-Data/sales_transactions_realistic.csv",
      "delimiter": ",",
      "datasetType": "CSV",
      "datasetSchema": "{\"colNames\":[\"DISTRIBUTOR_ID\",\"CUSTOMER_ID\",\"INV_DT\",\"INV_NO\",\"INV_NO_KEY\",\"SKUID\",\"QTY\",\"GROSS\",\"UNITPRICE\",\"NET_TOT_TAX\",\"ADJ_AMT\",\"CUST_DISC_AMT\",\"PRODUCT_DISC_AMT\",\"NET\"],\"colTypes\":[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"INTEGER\",\"DOUBLE\",\"INTEGER\",\"INTEGER\",\"DOUBLE\"],\"colFormats\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"colMLTypes\":[\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"NUMERIC\",\"NUMERIC\",\"NUMERIC\",\"NUMERIC\",\"NUMERIC\",\"NUMERIC\",\"NUMERIC\",\"NUMERIC\"]}"
    },
    {
      "id": 2246,
      "uuid": "eb70f21e-a80c-4bfa-9eac-c6788d1e627b",
      "header": true,
      "path": "data/CPG/CPG-Churn-Prediction-B2B/Raw-Data/customers.csv",
      "delimiter": ",",
      "datasetType": "CSV",
      "datasetSchema": "{\"colNames\":[\"DISTRIBUTOR_ID\",\"CUSTOMER_ID\",\"CUST_NAME\",\"CUST_STARTDT\",\"COUNTRY_ID\"],\"colTypes\":[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\"],\"colFormats\":[\"\",\"\",\"\",\"\",\"\"],\"colMLTypes\":[\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\"]}"
    },
    {
      "id": 2245,
      "uuid": "cdab639b-a97b-4380-9cb5-d641844d4e67",
      "header": true,
      "path": "data/CPG/CPG-Churn-Prediction-B2B/Raw-Data/products.csv",
      "delimiter": ",",
      "datasetType": "CSV",
      "datasetSchema": "{\"colNames\":[\"SECTOR\",\"CATEGORY\",\"SUBCATEGPRY\",\"SKUID\",\"_c4\"],\"colTypes\":[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\"],\"colFormats\":[\"\",\"\",\"\",\"\",\"\"],\"colMLTypes\":[\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\"]}"
    },
    {
      "id": 2247,
      "uuid": "71e5a750-e14c-4b44-bc91-15bf83d86f15",
      "header": true,
      "path": "data/CPG/CPG-Churn-Prediction-B2B/Raw-Data/distributors.csv",
      "delimiter": ",",
      "datasetType": "CSV",
      "datasetSchema": "{\"colNames\":[\"DISTRIBUTOR_ID\",\"DIST_NAME\",\"COUNTRY_ID\",\"_c3\",\"_c4\",\"_c5\",\"_c6\",\"_c7\"],\"colTypes\":[\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\"],\"colFormats\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"colMLTypes\":[\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\",\"TEXT\"]}"
    }
  ],
  "engine": "scala"
}