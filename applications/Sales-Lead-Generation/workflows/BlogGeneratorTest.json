{
  "name": "BlogGeneratorTest",
  "uuid": "d82bdcea-e903-4474-ada8-5cc4a8f18d00",
  "category": "GENAI",
  "description": "-",
  "parameters": " --var product_topic=Spark pilot --var target_audience=Senior Executives --var keywords=Agentic AI --var tone=Professional --var length=short --var destinationPath=data/GENAI/TEST-Prachi/Blog-Generator/ --var API=true",
  "nodes": [
    {
      "id": "1",
      "name": "Interactive LLM Agent",
      "iconImage": "/images/icons/node-icon/Graph_group_by_column.svg",
      "description": "This node enables standalone or dataframe-optional LLM queries across multiple providers (OpenAI, Bedrock, Gemini). It is designed for sequential agent flows like 'Similar Company Finder' and supports saving structured responses.",
      "details": "<h2>Interactive LLM Agent Node Details</h2><br>\nThe Interactive LLM Agent node enables querying large language models (LLMs) such as OpenAI, Bedrock (Anthropic), and Gemini from Google, using either a standalone prompt or content from a DataFrame. It is designed for flexible agent workflows like “Similar Company Finder” and provides guardrails for safe input and output validation.<br>\n<br>\n<h4>General:</h4><br>\n<br>\n<h5>Custom Prompt:</h5><br>\nThis field lets you specify the user query or task description. If the node is used without a DataFrame, this prompt is the only content passed to the LLM.<br>\n<br>\n<h5>Metadata Columns:</h5><br>\nWhen a DataFrame is passed into the node, you can select one or more content columns whose text will be sent to the LLM. The prompt and content will be combined and sent to the model.<br>\n<br>\n<h5>Model Selection:</h5><br>\nChoose the backend model provider:<br>\n<ul><br>\n<li><b>openai</b>: Uses OpenAI models like GPT-4 or GPT-3.5.</li><br>\n<li><b>bedrock</b>: Uses AWS Bedrock models like Claude.</li><br>\n<li><b>gemini</b>: Uses Google Gemini models.</li><br>\n</ul><br>\n<br>\n<h5>Select Connection:</h5><br>\nEach model provider requires specific connection credentials (e.g., API keys). These must be configured in the backend and are referenced here.<br>\n<br>\n<h5>Temperature, Max Tokens, and Retries:</h5><br>\n<ul><br>\n<li><b>Temperature</b> controls creativity: lower values yield more deterministic outputs.</li><br>\n<li><b>Max Tokens</b> sets the maximum length of the generated response.</li><br>\n<li><b>Retries</b> determine how many times to retry in case of failure.</li><br>\n</ul><br>\n<br>\n<h4>Output:</h4><br>\nThe output is a Spark DataFrame with a single column:<br>\n<ul><br>\n<li><b>response</b>: Contains the LLM-generated response, cleaned and validated.</li><br>\n</ul><br>\n<br>\nIf a DataFrame is passed in with metadata columns, their values are merged into the prompt. Otherwise, the prompt is used as-is.<br>\n<br>\n<h4>Guardrails:</h4><br>\nInput and output are both passed through safety guardrails to ensure they follow allowed formats and avoid unsafe content.<br>",
      "examples": "<h2>Example: Interactive LLM Agent Node</h2><br>\n<br>\n<h3>Input:</h3><br>\nA DataFrame with the following data:<br>\n<table border=\"1\"><br>\n<tr><th>company_name</th><th>industry</th></tr><br>\n<tr><td>TechCorp</td><td>Software</td></tr><br>\n<tr><td>InnovateAI</td><td>Artificial Intelligence</td></tr><br>\n</table><br>\n<br>\n<h3>Configuration:</h3><br>\n<ul><br>\n<li><b>Custom Prompt:</b> \"Find companies similar to {company_name} in the {industry} industry.\"</li><br>\n<li><b>Metadata Columns:</b> [company_name, industry]</li><br>\n<li><b>Model Selection:</b> openai</li><br>\n<li><b>Temperature:</b> 0.7</li><br>\n<li><b>Max Tokens:</b> 512</li><br>\n<li><b>Retries:</b> 2</li><br>\n</ul><br>\n<br>\n<h3>Output:</h3><br>\nA DataFrame with a single response column:<br>\n<table border=\"1\"><br>\n<tr><th>response</th></tr><br>\n<tr><td>TechCorp (Software): - CodeZap - SoftPeak - Nexlify<br/>InnovateAI (Artificial Intelligence): - AIWorks - NeuralNest - DeepMind</td></tr><br>\n</table><br>\n<br>\n<h3>Explanation:</h3><br>\n<ul><br>\n<li>The node reads values from metadata columns and constructs a prompt for each row.</li><br>\n<li>The content and task are passed to the OpenAI LLM with specified model parameters.</li><br>\n<li>The response is generated, cleaned of Markdown wrappers (e.g., ```json) and validated by guardrails.</li><br>\n<li>The output is returned in a DataFrame as a single response string (across all rows).</li><br>\n</ul><br>",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeInteractiveLLMAgent",
      "x": "356px",
      "y": "360px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "llmConnection",
          "value": "openai-api-connection",
          "widget": "object_array",
          "title": "Select Connection",
          "description": "Select Connection",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "customPrompt",
          "value": "You are a blog post generator.\n\nYour task is to write an engaging, informative, and SEO-optimized blog post in HTML format about '${product_topic}' for '${target_audience}'.\n\nUse the keywords '${keywords}' naturally, maintain a '${tone}' tone, and provide a good heading.\n\nAdhere to the specified '${length}':\n- \"short\" (300-600 words)\n-  \"medium\" (700-1000 words)\n-  \"long\" (1000-1500 words).\n\nStrict Following:\n-Ensure correct grammar and spacing. Deliver only the HTML output. Give only 1 heading h1 otherwise use h4 for mandatory points.",
          "widget": "textareafield",
          "title": "Prompt",
          "description": "Custom prompt to instruct the model.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "metadataCols",
          "value": "[]",
          "widget": "variables",
          "title": "Metadata Columns",
          "description": "Select one or more content columns to pass as input to the model.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "3",
      "name": "Output Formatter",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node formats output from Columns.",
      "details": "<h2> Output Formatter Node Details</h2>\nThe Output Formatter node formats data from a specified column in an input DataFrame and outputs it with a user-defined key. It is designed for use in PySpark-based data processing pipelines to extract and present data in a structured format, typically for downstream use or display. The node processes a single column from the input DataFrame, formats the content, and sends it as a JSON message with a specified key.<br>\n<br>\n<h4> General:</h4>\n<br>\nh5: Select Column:<br>\nSpecifies the column in the input DataFrame from which to extract data. This field is required and must correspond to a valid column name in the DataFrame.<br>\n<br>\nh5: Key:<br>\nDefines a key name for the formatted output. This field is required and is used to label the extracted column value in the output JSON message.<br>\n<br>\n<h4> Output:</h4>\nThe node does not modify the input DataFrame but instead generates a JSON-formatted message containing the following:<br>\n<ul>\n<li> id: The node’s ID.</li>\n<li> name: The node’s name (\"Output Formatter\").</li>\n<li> title: The display title (\"Output Formatter\").</li>\n<li> type: The node type (\"formatter\").</li>\n<li> resultType: Set to 3, indicating the output is a formatted message.</li>\n<li> visibility: Set to \"EXPANDED\" for display purposes.</li>\n<li> text: A nested structure containing:</li>\n<li> key: The user-specified key name.</li>\n<li> string: The value extracted from the selected column (from the first row of the DataFrame).</li>\n<li> format: Set to \"plaintext\" for the output format.</li>\n</ul>\nThe JSON message is sent to the workflow context for further processing or display. The input DataFrame is passed through unchanged as the node’s output schema.<br>",
      "examples": "<h2> Example: Output Formatter Node</h2>\n<br>\n<h3> Input:</h3>\nA DataFrame with the following structure, containing a single row of data:<br>\n<br>\n| summary_text                     |<br>\n|----------------------------------|<br>\n| Project meeting: Plan Q1 goals...|<br>\n<br>\nThe Output Formatter node is configured as follows:<br>\n<ul>\n<li> Select Column: summary_text</li>\n<li> Key: meeting_summary</li>\n</ul>\n<h3> Output:</h3>\nThe node processes the DataFrame and generates a JSON-formatted message sent to the workflow context, with the following structure:<br>\n<br>\n```json<br>\n{<br>\n\"id\": \"11\",<br>\n\"name\": \"Output Formatter\",<br>\n\"title\": \"Output Formatter\",<br>\n\"type\": \"formatter\",<br>\n\"resultType\": 3,<br>\n\"visibility\": \"EXPANDED\",<br>\n\"text\": {<br>\n\"key\": \"meeting_summary\",<br>\n\"string\": \"Project meeting: Plan Q1 goals...\",<br>\n\"format\": \"plaintext\"<br>\n}<br>\n}<br>\n```<br>\n<br>\nThe input DataFrame is passed through unchanged as the node’s output schema.<br>\n<br>\n<h3> Explanation:</h3>\n<ul>\n<li> The summary_text column is selected, and the value from its first row (\"Project meeting: Plan Q1 goals...\") is extracted.</li>\n<li> The key field is set to \"meeting_summary\", which is used to label the extracted value in the output JSON.</li>\n<li> The node formats the extracted value into a JSON message with a nested text object, specifying the key, string value, and format (\"plaintext\").</li>\n<li> The JSON message is sent to the workflow context for further processing or display.</li>\n<li> The original DataFrame is returned as the output schema without modification.</li>\n</ul>",
      "type": "transform",
      "nodeClass": "fire.nodes.graph.NodeOutputFormatter",
      "x": "726.917px",
      "y": "354.917px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "column",
          "value": "response",
          "widget": "variable",
          "title": " Select Column",
          "description": "Select Column to format",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "key",
          "value": "genAiResponse",
          "widget": "textfield",
          "title": "Key",
          "description": "Specify a key Name",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "4",
      "name": "Sticky Note",
      "iconImage": "fa fa-file-text",
      "description": "Allows capturing Notes on the Workflow",
      "details": "",
      "examples": "",
      "type": "sticky",
      "nodeClass": "fire.nodes.doc.NodeStickyNote",
      "x": "192.917px",
      "y": "235.917px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "bgColor",
          "value": "yellow",
          "widget": "textfield",
          "title": "Bg Color",
          "description": "Background of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "width",
          "value": "361.166666px",
          "widget": "textfield",
          "title": "Width",
          "description": "Width of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "height",
          "value": "115.166666px",
          "widget": "textfield",
          "title": "Height",
          "description": "Height of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "comment",
          "value": "<p>The Blog Generator Node creates SEO-optimized, tonally consistent, and audience-aligned blog posts of specified lengths (short, medium, long) using input variables like product topic, audience, keywords, and tone.</p>",
          "widget": "textarea_rich",
          "title": "Comment",
          "description": "Comments for the Workflow",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "5",
      "name": "Sticky Note",
      "iconImage": "fa fa-file-text",
      "description": "Allows capturing Notes on the Workflow",
      "details": "",
      "examples": "",
      "type": "sticky",
      "nodeClass": "fire.nodes.doc.NodeStickyNote",
      "x": "770.917px",
      "y": "37.9167px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "bgColor",
          "value": "yellow",
          "widget": "textfield",
          "title": "Bg Color",
          "description": "Background of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "width",
          "value": "450px",
          "widget": "textfield",
          "title": "Width",
          "description": "Width of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "height",
          "value": "239px",
          "widget": "textfield",
          "title": "Height",
          "description": "Height of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "comment",
          "value": "<p>This workflow automates blog creation tailored to a specific product topic, target audience, keywords, tone, and length. It starts by receiving user-defined inputs, then constructs a detailed content brief. The generation node creates a high-quality blog post that is grammatically correct, engaging, and formatted according to the requested length (short, medium, or long). The final output is ready for publication or review.</p>",
          "widget": "textarea_rich",
          "title": "Comment",
          "description": "Comments for the Workflow",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "3",
      "id": 1
    }
  ],
  "dataSetDetails": [],
  "engine": "pyspark"
}