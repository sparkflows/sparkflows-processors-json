{
  "id": 4364,
  "uuid": "f0a17d0c-155b-43eb-b2b1-4dd15f80defb",
  "name": "02-Data-Profiling-And-Preparation",
  "category": "",
  "projectId": 5198,
  "content": "<h2><strong>Data Profiling and Preparation:</strong></h2><p><br></p><p>This project aims to build a <strong>predictive maintenance system</strong> for diesel engines based on real-time sensor data, operational characteristics, and maintenance history. The primary objective is to forecast whether an engine is likely to require maintenance, enabling <strong>proactive servicing</strong>, reducing <strong>unplanned downtime</strong>, and minimizing <strong>repair costs</strong>.</p><p>The system leverages time-series sensor inputs (e.g., RPM, oil pressure), enriched metadata (engine specs, condition, criticality), and engineered features (rolling means, runtime hours, time since last maintenance) to train and deploy machine learning models.</p><p><br></p><p><strong>Classification Goal:</strong></p><p>Predict whether a given engine unit will require maintenance (<code>maintenance_required = 1</code>) in the near term based on operational data.</p><p><br></p><h3><strong>Dataset Description</strong></h3><p>Key Columns:</p><ul><li><code>engine_id</code>: Unique engine identifier.</li><li><code>Timestamp</code>: Time of data capture.</li><li><code>rpm</code>: Engine revolutions per minute (operating speed).</li><li><code>oil_pressure</code>: Pressure in the oil system (measured in PSI).</li><li><code>coolant_temp</code>: Temperature of the coolant fluid (Â°C).</li><li><code>vibration</code>: Engine vibration level (measured in g-force).</li><li><code>Maintenance_Done</code>: Binary flag indicating if maintenance was performed.</li><li><code>Engine_Runtime_Hours</code>: Cumulative operating time since installation.</li><li><code>Time_Since_Last_Maintenance</code>: Time since last recorded maintenance (in hours).</li><li><code>RollingMean_&lt;3M/6M&gt;</code>: Smoothed trends for RPM, oil pressure, coolant temp, and vibration.</li></ul><p>Additional context variables (if joined with metadata):</p><ul><li><code>equipment_make</code>, <code>equipment_model_number</code>, <code>criticality_code_desc</code>, <code>condition_code_desc</code>, etc.</li></ul><p><br></p><h3><strong>Data Preparation</strong></h3><h4>1. Data Cleaning</h4><ul><li><strong>Missing Values</strong>:</li><li class=\"ql-indent-1\">Replace empty strings with <code>NaN</code>.</li><li class=\"ql-indent-1\">Impute missing maintenance schedule using typical service intervals or median engine age.</li><li><strong>Date Formatting</strong>:</li><li class=\"ql-indent-1\">Convert all temporal fields (e.g., <code>Timestamp</code>, <code>warranty_date</code>, <code>scheduled_date</code>) to datetime.</li><li><strong>Outlier Handling</strong>:</li><li class=\"ql-indent-1\">Detect abnormal <code>replacement_cost</code>, <code>vibration</code>, and <code>coolant_temp</code> using IQR or Z-score.</li><li><strong>Anomaly Checks</strong>:</li><li class=\"ql-indent-1\">Identify cases where installation happens <em>after</em> replacement, or warranty ends <em>before</em> installation.</li></ul><h4>2. Feature Engineering</h4><ul><li><code>Engine_Age_Days</code> = current_date - <code>equipment_installation_date</code></li><li><code>Warranty_Expired</code> = current_date &gt; <code>warranty_date</code></li><li><code>Condition_Risk_Flag</code> = 1 if condition is \"Poor\" or \"Fair\"</li><li>Rolling Mean features:</li><li class=\"ql-indent-1\"><code>RPM_RollingMean_3M</code>, <code>Oil_Pressure_RollingMean_6M</code>, etc.</li><li>Lag or delta features (optional):</li><li class=\"ql-indent-1\"><code>rpm_change</code>, <code>vibration_jump</code></li></ul><h4>3. Transformation</h4><ul><li><strong>Scaling</strong>: Standardize numerical fields (<code>Engine_Age_Days</code>, <code>Runtime_Hours</code>, <code>Replacement_Cost</code>)</li><li><strong>Encoding</strong>:</li><li class=\"ql-indent-1\">Label encode ordinal fields (<code>condition_code_desc</code>, <code>criticality_code_desc</code>)</li><li class=\"ql-indent-1\">One-hot encode nominal ones (<code>equipment_make</code>, <code>replacement_type_code</code>, etc.)</li></ul><h4>4. Validation</h4><ul><li><strong>Date logic</strong>: No future installation or negative durations.</li><li><strong>Range checks</strong>: Confirm RPM, oil pressure, vibration fall within engineering limits.</li><li><strong>Class balance</strong>: Analyze imbalance in <code>maintenance_required</code> to prepare for model tuning.</li><li><strong>Multicollinearity</strong>: Correlation check for variables like <code>engine_age_days</code> and <code>warranty_expired</code>.</li></ul><h3><br></h3><h3><strong>Predictive Modeling</strong></h3><ul><li><strong>Target Variable</strong>: <code>maintenance_required</code></li><li><strong>Model Candidates</strong>:</li><li class=\"ql-indent-1\">Random Forest, Gradient Boosted Trees, H2O AutoML</li><li><strong>Validation</strong>:</li><li class=\"ql-indent-1\">Use time-aware cross-validation (optional) or holdout method</li><li><strong>Evaluation Metrics</strong>:</li><li class=\"ql-indent-1\">Accuracy, Precision, Recall, ROC-AUC</li></ul><h3><br></h3><h3><strong>Business Impact</strong></h3><ul><li>Reduces downtime by scheduling pre-failure maintenance.</li><li>Optimizes spare part and technician resource planning.</li><li>Improves customer satisfaction by reducing unexpected breakdowns.</li></ul><p><br></p>",
  "icon": "{\"type\":\"svg\",\"icon\":\"images/wiki_icon.svg\"}",
  "description": "",
  "syncedWithGithub": false,
  "createdBy": "admin",
  "dateCreated": "Jun 9, 2025, 10:53:03 AM",
  "dateLastUpdated": "Jun 9, 2025, 10:53:03 AM"
}