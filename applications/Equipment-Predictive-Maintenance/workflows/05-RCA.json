{
  "name": "05-RCA",
  "uuid": "b4ee0e01-bf43-49d2-a9ac-f21a302a2e8d",
  "category": "GENAI",
  "description": "-",
  "parameters": " --var workflow_3_featurecolumns1=RPM_RollingMean_3M,Oil_Pressure_RollingMean_3M,Coolant_Temp_RollingMean_3M,Vibration_RollingMean_3M --var workflow_3_featurecolumns=RPM_RollingMean_6M,Oil_Pressure_RollingMean_6M,Coolant_Temp_RollingMean_6M,Vibration_RollingMean_6M --var combinedVisual=false --var workflow_3_featurecolumns1=rpm,oilPressure,vibration,coolantTemp,RPM_RollingMean_3M,Oil_Pressure_RollingMean_3M,Coolant_Temp_RollingMean_3M,Vibration_RollingMean_3M,RPM_RollingMean_6M,Oil_Pressure_RollingMean_6M,Coolant_Temp_RollingMean_6M,Vibration_RollingMean_6M --var modelNametrain=m1 --var workflow_3_featurecolumns=Maintenance_Done,Engine_Runtime_Hours,Time_Since_Last_Maintenance,RPM_RollingMean_6M,Oil_Pressure_RollingMean_6M,Coolant_Temp_RollingMean_6M,Vibration_RollingMean_6M --var workflow_12_independentvariables1=LOG_PRD_PRICE,EVENT,SVD --var workflow_12_transformvariables1=PACK_PRICE_COMPETITOR1,PACK_PRICE_COMPETITOR2,PACK_PRICE_COMPETITOR3 --var modelPredict=m1 --var trainModel=false --var back1=false --var next1=true --var GenAIReport=true",
  "nodes": [
    {
      "id": "1",
      "name": "Read CSV",
      "iconImage": "/images/icons/node-icon/csv.svg",
      "description": "It reads in CSV files and creates a DataFrame from it.",
      "details": "<h2>Read CSV Details</h2>\n<br>\nThis node reads CSV files and creates a DataFrame from them. It can read either a single file or a directory containing multiple files. The user can configure the below fields to parse the file.<br>\n<br>\nThe user can choose the <b>Output storage level</b> from the drop down. The options in the dropdown can be one of the following:<br>\n<ul>\n<li> <b>MEMORY_ONLY</b>          Store RDD as deserialized Java objects in the JVM. If the RDD does not fit in memory, some partitions will not be cached and will be recomputed on the fly each time they are needed. This is the default level.</li>\n<li> <b>MEMORY_AND_DISK</b>       Store RDD as deserialized Java objects in the JVM. If the RDD does not fit in memory, store the partitions that do not fit on disk, and read them from there when they are needed.</li>\n<li> <b>MEMORY_ONLY_SER</b>        Store RDD as serialized Java objects (one byte array per partition). This is generally more space-efficient than deserialized objects, especially when using a fast serializer, but more CPU-intensive to read.</li>\n<li> <b>MEMORY_AND_DISK_SER</b>    Similar to MEMORY_ONLY_SER, but spill partitions that do not fit in memory to disk instead of recomputing them on the fly each time they're needed.</li>\n<li> <b>DISK_ONLY</b>              Store the RDD partitions only on disk.</li>\n<li> <b>MEMORY_ONLY_2, MEMORY_AND_DISK_2 others </b> . Same as the levels above, but replicate each partition on two cluster nodes.</li>\n<li> <b>OFF_HEAP</b>               Similar to MEMORY_ONLY_SER, but store the data in off-heap memory. This requires off-heap memory to be enabled.</li>\n</ul>\nThe user needs to provide a data file <b>Path</b> to read the data from. This is a required field.<br>\n<br>\nThe user can choose the <b>Separator</b> used in the data file to parse it. The default separator is <b>( , )</b> comma.<br>\n<br>\nIn the <b>Header</b> field, one can choose:<br>\n<ul>\n<li> <b>true</b> if the data file has a header.</li>\n<li> <b>false</b> Otherwise.</li>\n</ul>\nIn the <b>Drop special character in column name</b> field, one can choose:<br>\n<ul>\n<li> <b>true</b> If you want to remove the special characters from column names.</li>\n<li> <b>false</b> Otherwise.</li>\n</ul>\nIn the <b>Mode</b> field, one can choose from the below options in the dropdown:<br>\n<ul>\n<li> <b>PERMISSIVE</b> When the parser meets a corrupt field in a record, it sets the value of the field to NULL and continues to the next record.</li>\n<li> <b>DROPMALFORMED</b> ignores the whole corrupted record.</li>\n<li> <b>FAILFAST</b> throws an exception when it meets corrupted records.</li>\n</ul>\nIn the <b>Enforce Schema</b> field, one can choose:<br>\n<ul>\n<li> <b>true</b> The specified or inferred schema will be forcibly applied to datasource files, and headers in CSV files will be ignored.</li>\n<li> <b>false</b> The schema will be validated against all headers in CSV files when the header option is set to <b>false</b>.</li>\n</ul>\nIn the <b>Whether to add input file as a column in DataFrame</b> field, one can choose:<br>\n<ul>\n<li> <b>true</b> There will be a new column added to the DataFrame at the end, which can be seen in the schema columns. One can enter the name of this column.</li>\n<li> <b>false</b> This functionality is disabled, and the DataFrame consists of only the columns read from the data file.</li>\n</ul>\nIn the <b>ENCODING</b> field, one can specify the encoding type to be used for reading the files. By default, it is set as <b>UTF-8</b>.<br>\n<br>\nThe <b>QUOTE</b> field sets a single character used for escaping quoted values where the separator can be part of the value. The default value for this is <b>( \" )</b>, a double quote.<br>\n<br>\nThe <b>ESCAPE</b> field sets a single character used for escaping quotes inside an already quoted value. The default value for this is <b>( \\ )</b>, a backslash.\t<br>\n<br>\nAfter the above options are set, one can click on <b>InferSchema</b> to see the final columns.<br>\nUsers can still add or delete columns using <b>+</b> button next to the InferSchema and <b>-</b> button next to the column names.<br>",
      "examples": "<h2> Read CSV Node Example</h2>\n<br>\nGiven a CSV file with the following data:<br>\n<br>\nSupplierID,SupplierName,Region,YearsInBusiness,LeadTime,PriceIndex,OrderFulfillmentTime,OverallCost,OrderCancellations,CustomerRating<br>\nS1,Supplier A,Region 1,10,5,1.2,3,100,2,4<br>\nS2,Supplier B,Region 2,15,7,1.1,4,120,1,5<br>\nIf you configure the Read CSV node as follows:<br>\n<br>\nPath: /path/to/your/file.csv<br>\nSeparator: ,<br>\nHeader: true<br>\nThe output would be a DataFrame with the following schema:<br>\n<br>\nColumn Name\tData Type<br>\nSupplierID\tString<br>\nSupplierName\tString<br>\nRegion\tString<br>\nYearsInBusiness\tInteger<br>\nLeadTime\tInteger<br>\nPriceIndex\tDouble<br>\nOrderFulfillmentTime\tInteger<br>\nOverallCost\tInteger<br>\nOrderCancellations\tInteger<br>\nCustomerRating\tInteger<br>",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",
      "x": "50.1875px",
      "y": "327.194px",
      "hint": "Infer the schema when a new file is selected or the file content has changed",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "path",
          "value": "data/MANUFACTURING/Equipment-Predictive-Maintenance/Prediction",
          "widget": "textfield",
          "title": "Path",
          "description": "Path of the file/directory",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "separator",
          "value": ",",
          "widget": "textfield",
          "title": "Separator",
          "description": "CSV Separator",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "header",
          "value": "true",
          "widget": "array",
          "title": "Header",
          "description": "Whether the file has a header row",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "dropSpecialCharacterInColumnName",
          "value": "false",
          "widget": "array",
          "title": "Drop Special Character In ColumnName",
          "description": "Whether to drop the Special Characters and Spaces in Column Name.",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "mode",
          "value": "PERMISSIVE",
          "widget": "array",
          "title": "Mode",
          "description": "Mode for dealing with corrupt records during parsing.",
          "optionsArray": [
            "PERMISSIVE",
            "DROPMALFORMED",
            "FAILFAST"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "enforceSchema",
          "value": "false",
          "widget": "array",
          "title": "Enforce Schema",
          "description": "If it is set to true, the specified or inferred schema will be forcibly applied to datasource files, and headers in CSV files will be ignored. If the option is set to false, the schema will be validated against all headers in CSV files in the case when the header option is set to true.",
          "optionsArray": [
            "false",
            "true"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "addInputFileName",
          "value": "false",
          "widget": "array",
          "title": "Whether to Add Input File Name as Column in the Dataframe",
          "description": "Add the new field:input_file_name",
          "optionsArray": [
            "false",
            "true"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "encoding",
          "value": "UTF-8",
          "widget": "textfield",
          "title": "Encoding",
          "description": "Decodes the CSV files by the given encoding type",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "quote",
          "value": "\"",
          "widget": "textfield",
          "title": "Quote",
          "description": "Sets a single character used for escaping quoted values where the separator can be part of the value",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "escape",
          "value": "\\",
          "widget": "textfield",
          "title": "Escape",
          "description": "Sets a single character used for escaping quotes inside an already quoted value.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[\"Timestamp\",\"rpm\",\"oil_pressure\",\"coolant_temp\",\"vibration\",\"failure_type\",\"action_taken\",\"technician_notes\",\"Log_Time\",\"RPM_RollingMean_6M\",\"Oil_Pressure_RollingMean_6M\",\"Coolant_Temp_RollingMean_6M\",\"Vibration_RollingMean_6M\",\"Engine_Runtime_Hours\",\"Time_Since_Last_Maintenance\",\"Log_Time_year\",\"Log_Time_month\",\"Log_Time_monthname\",\"Maintenance_Done\",\"engine_id\",\"Log_Time_dayofmonth\",\"prediction\"]",
          "widget": "schema_col_names",
          "title": "Column Names for the CSV",
          "description": "New Columns from CSV",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"DATE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"INTEGER\",\"STRING\",\"INTEGER\",\"INTEGER\"]",
          "widget": "schema_col_types",
          "title": "Column Types for the CSV",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Column Formats for the CSV",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "properties",
          "value": "",
          "widget": "tab",
          "title": "Properties",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "extraOptionsKeys",
          "value": "[]",
          "widget": "key_array",
          "title": "Properties Name",
          "description": "Extra options/properites available while executing in Read CSV.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "extraOptionsValues",
          "value": "[]",
          "widget": "value_array",
          "title": "Properties Value",
          "description": "Config Values for the Corresponding properites name",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "10",
      "name": "Sort By",
      "iconImage": "fa fa-tumblr-square",
      "description": "It sorts the incoming DataFrame on the fields specified.",
      "details": "This node sorts the incoming DataFrame based on the values present in columns specified.<br>\n<br>\nMultiple columns can be selected for sorting data. Data can be sorted in Ascending or Descending order.<br>",
      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\nIf SortBy node is configured to sort data in descending order of values present in [CUST_NAME] column then outgoing Dataframe would be created as below:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSortBy",
      "x": "225px",
      "y": "325px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "sortByColNames",
          "value": "[\"Timestamp\"]",
          "widget": "variables_list_select",
          "title": "Columns",
          "description": "Columns on which to Sort By",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ascDesc",
          "value": "[\"ASC\"]",
          "widget": "variables_list_array",
          "title": "Sorting Order",
          "description": "Whether to sort in ascending or descending order",
          "optionsArray": [
            "DESC",
            "ASC"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "12",
      "name": "Concat Columns",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node creates a new DataFrame by concatenating the specified columns of the input DataFrame",
      "details": "<h2>Concat Columns Node Details</h2>\n<br>\nIt adds a new column to the dataframe created by concatenating multiple columns and separated by the specified separator. <br>\n<br>\n<h4>Input</h4>\n<ul>\n<li>   COLUMNS :- Select columns that need to be concatenated. Multiple columns can be selected for concatenation.</li>\n<li>   CONCATENATED COLUMN NAME :- Enter name of the column to list the concatenated values in the outgoing Dataframe.</li>\n<li>\t  SEPARATOR :- Enter a Separator value to separate values from different columns in the output. It can be a multi-character value. Common Separator values used are as follows:</li>\n</ul>\n  b. *<br>\n  c. -<br>\n  d. :<br>\n  e. [Blank Space]<br>\n<br>\n<h4>Output</h4>\n<ul>\n<li>   New concatenated column would be added to the Outgoing Dataframe listing the concatenated values.</li>\n</ul>",
      "examples": "<h2>Concat Columns Examples</h2>\n<br>\n<h4>Incoming Dataframe</h4>\n<br>\nIn this example we have considered an Incoming Dataframe with following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\n<h4>Concat Columns Node Configuration and Output </h4>\n<br>\nConcat Columns Node is configured to concatenate two columns [CUST_CD] and [CUST_NAME] from the incoming Dataframe into a new column [CUST_IDENTIFIER] using separator [-].<br>\nOutput Dataframe would be created as below:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY         |    CUST_IDENTIFIER<br>\n----------------------------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00  |    C01-MATT<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00  |    C02-LISA<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00   |    C03-ROBIN<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00  |    C04-MARCUS<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeConcatColumns",
      "x": "391.719px",
      "y": "337.725px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "inputCols",
          "value": "[\"Timestamp\",\"rpm\",\"oil_pressure\",\"coolant_temp\",\"vibration\",\"failure_type\",\"action_taken\",\"technician_notes\",\"Engine_Runtime_Hours\",\"Time_Since_Last_Maintenance\",\"engine_id\",\"prediction\",\"Maintenance_Done\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "Columns to be concatenated",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputCol",
          "value": "All_Data",
          "widget": "textfield",
          "title": "Concatenated Column Name",
          "description": "Column name for the concatenated columns",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "sep",
          "value": "\\n",
          "widget": "textfield",
          "title": "Separator",
          "description": "Separator to be used when concatenating the columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "13",
      "name": " Multi LLM Query",
      "iconImage": "/images/icons/node-icon/Graph_group_by_column.svg",
      "description": "The Multi LLM Query node is designed to query multiple large language models (LLMs) from providers such as OpenAI, Bedrock, and Gemini, using a DataFrame as input. It processes user queries, text content, and/or base64-encoded images to generate responses based on the selected model and task, producing a structured DataFrame output.",
      "details": "<h2>Multi LLM Query Node Details</h2>\n<br>\nThe Multi LLM Query node is designed to query multiple large language models (LLMs) from providers such as OpenAI, Bedrock, and Gemini, using a DataFrame as input. It processes user queries, text content, and/or base64-encoded images to generate responses based on the selected connection and task, producing a structured DataFrame output.<br>\n<br>\n<h3>General:</h3>\n<br>\n<h4>Select Task:</h4>\nSpecifies the task to perform. Options include:<br>\n- summary: Generates a summary of the content in bullet points.<br>\n- translation: Translates the content to English.<br>\n- topic_extraction: Extracts key topics from the content.<br>\n- other: Allows for a custom task defined by the user.<br>\n<br>\n<h4>Prompt:</h4>\nAllows users to provide a custom prompt / instructions for the selected task.<br>\n<br>\n<h4>Content Column:</h4>\nSpecifies the DataFrame column containing the text content to be processed. Required for text or text+image modes.<br>\n<br>\n<h4>Select Connection:</h4>\nSpecifies the connection details for the selected LLM provider (e.g., API keys for OpenAI/Gemini, AWS credentials for Bedrock). Required to authenticate and access the respective model.<br>\n<br>\n<h4>Temperature:</h4>\nControls the randomness of the LLM's output. Default is 0.7. Higher values increase creativity, while lower values ensure more deterministic responses.<br>\n<br>\n<h4>Image Column:</h4>\nSpecifies the DataFrame column containing base64-encoded images. Required for image or text+image modes.<br>\n<br>\n<h4>Mode Selection:</h4>\nDetermines the input mode for the LLM. Options are:<br>\n- text: Processes text-only input from the content column or custom prompt.<br>\n- image: Processes base64-encoded images from the image column.<br>\n- text+image: Processes both text and base64-encoded images.<br>\n<br>\n<h4>Timeout (seconds):</h4>\nSpecifies the maximum time (in seconds) to wait for the model response. Visible when OpenAI or Gemini is selected.<br>\n<br>\n<h4>Thinking Budget:</h4>\nControls the computational budget (e.g., steps or tokens) for Gemini models. Only visible when Gemini is selected.<br>\n<br>\n<h3>Advanced:</h3>\n<br>\n<h4>Aggregate Response:</h4>\nSpecifies how to aggregate input data before processing. Options are:<br>\n- none: Processes each row individually, retaining fileName and pageNumber (if provided).<br>\n- all: Aggregates all rows into a single response.<br>\n- perfile: Aggregates rows by fileName, producing one response per file.<br>\n<br>\n<h4>Number of Partitions:</h4>\nSpecifies the number of Spark partitions for distributed processing. Default is 3.<br>\n<br>\n<h4>File Name Column:</h4>\nSpecifies the DataFrame column containing file names. Required for perfile aggregation mode.<br>\n<br>\n<h4>Page Number Column:</h4>\nSpecifies the DataFrame column containing page numbers (e.g., for PDFs). Optional, used for row-wise processing with none aggregation mode.<br>\n<br>\n<h3>Output:</h3>\nThe node outputs a DataFrame with columns based on the aggregation mode:<br>\n- none: Includes fileName (if provided), pageNumber (if provided), and response.<br>\n- perfile: Includes fileName and response.<br>\n- all: Includes only the response column.<br>\nThe response column contains the LLM-generated text or error messages if the API call fails.<br>",
      "examples": "<h2>Multi LLM Query Node Examples</h2>\n<br>\n<h3>Input:</h3>\nA DataFrame contains the following data:<br>\n- fileName: [\"doc1.pdf\", \"doc1.pdf\", \"doc2.pdf\"]<br>\n- pageNumber: [\"1\", \"2\", null]<br>\n- content: [\"Article about climate change...\", \"Climate change impacts...\", \"Renewable energy report...\"]<br>\n- imageBase64: [null, \"iVBORw0KGgoAAAANSUhEUg...\", null]<br>\n<br>\nThe Multi LLM Query node is configured as follows:<br>\n- Select Task: summary<br>\n- Prompt: \"Summarize the content in bullet points.\"<br>\n- Content Column: content<br>\n- Select Connection: Configured with valid OpenAI API key<br>\n- Temperature: 0.7<br>\n- Timeout (seconds): 90<br>\n- Image Column: imageBase64<br>\n- Mode Selection: text+image<br>\n- Aggregate Response: perfile<br>\n- Number of Partitions: 3<br>\n- File Name Column: fileName<br>\n- Page Number Column: pageNumber<br>\n<br>\n<h3>Output:</h3>\nThe node processes the DataFrame and produces a DataFrame with the following structure:<br>\n- fileName: doc1.pdf<br>\nresponse:<br>\n- Climate change effects on ecosystems<br>\n- Rising temperatures<br>\n<br>\n- fileName: doc2.pdf<br>\nresponse:<br>\n- Renewable energy advancements<br>\n- Solar and wind adoption<br>",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeMultiLLMQuery",
      "x": "637.312px",
      "y": "161.325px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "llmConnection",
          "value": "azure-openai",
          "widget": "object_array",
          "title": "Select Connection",
          "description": "Select Connection",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "temperature",
          "value": "0.7",
          "widget": "textfield",
          "title": "Temperature",
          "description": "Temperature setting for the model (default: 0).",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "contentCol",
          "value": "All_Data",
          "widget": "variable",
          "title": "Content Column",
          "description": "Column name for the text content.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "imageCol",
          "value": "",
          "widget": "variable",
          "title": "Image Column",
          "description": "Column name for the base 64 image.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "inputMode",
          "value": "text",
          "widget": "array",
          "title": "Mode Selection",
          "description": "Select the model to use (text, image, text+image).",
          "optionsArray": [
            "text",
            "image",
            "text+image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "Prompt",
          "value": "",
          "widget": "tab",
          "title": "Prompt",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "task",
          "value": "other",
          "widget": "key_value_array",
          "title": "Select Prompt",
          "description": "Specify the task to perform: summary, translation, topic extraction, or other.",
          "optionsMap": {
            "summary": "Generate a concise, multi-level bullet-point summary capturing key facts, insights, and implications from the content. Preserve structure and section hierarchy.",
            "translation": "Translate the content into fluent, formal English while preserving tone, context, cultural nuances, and domain-specific terminology (e.g., legal, medical, technical).",
            "topic_extraction": "Identify and extract key topics, subtopics, and entities. Categorize them with tags (e.g., Person, Location, Concept) and provide brief descriptions or summaries of each.",
            "other": ""
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "customPrompt",
          "value": "You are to perform root cause analysis for failure (RCA) for each row dataset containing 24 maintenance logs for each day for single engine.\n\nMaintenance_Done = 0 means there is no maintenance by manufacturing company done.\nMaintenance_Done = 1 means there was maintenance performed by manufacturing company for that day\n\nprediction = 1 means our model has predicted maintenance is required for that day.\nprediction = 0 means our model did not predict maintenance for that day\n\n\nYour task is to only pick up data where prediction = 1 and give the following result:\n1. Group using timestamp and make each day into one row and average the RPM for each day, average the Coolant_Temp for each day, average the Oil_Pressure for each day and average the Vibration values for each day.\n2. Identify the variations in RPM, Coolant_Temp, Oil_Pressure and Vibration and tell why we have predicted a maintenance for the days with 1 in prediction\n   - The timestamp (use the earliest timestamp of the day),\n   - The engine_id involved,\n   - The failure_type(s) (summarize based on available fields),\n   - A concise RCA (Root Cause Analysis) based on observed data patterns.\n\n\nOnly provide **Three such daily summaries** in the output.\n\n\nFormat the result as a **neatly structured HTML table** with the following columns:\n\n\n| timestamp | engine_id | failure_type | RCA | \n\nSummarize with Top 3 Actionable Steps (only from business operational view) and write it below the table. \n\nStrictly give me only this output and no additional texts before the table or after the Top 3 Actionable Steps.",
          "widget": "textareafield",
          "title": "Prompt",
          "description": "Custom prompt to override the default instructions.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "userQueryCol",
          "value": "",
          "widget": "variable",
          "title": "User Query Column",
          "description": "Column name for user query, (if the query is in a column)",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "Advanced",
          "value": "",
          "widget": "tab",
          "title": "Advanced",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "aggregateMode",
          "value": "ALL",
          "widget": "enum",
          "title": "Aggregate Response",
          "optionsMap": {
            "NONE": "Do not aggregate rows",
            "ALL": "Aggregate all rows",
            "PERFILE": "Aggregate per file"
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "numPartitions",
          "value": "3",
          "widget": "textfield",
          "title": "Number of Partitions",
          "description": "Number of Partitions",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileNameCol",
          "value": "",
          "widget": "variable",
          "title": "File Name Column",
          "description": "Select File Name Column",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "pageNumberCol",
          "value": "",
          "widget": "variable",
          "title": "Page Number Column",
          "description": " Select Page Number column.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "timeout",
          "value": "180",
          "widget": "textfield",
          "title": "Timeout (seconds)",
          "description": "Maximum time to wait for Openai and Gemini API response",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "thinkingBudget",
          "value": "-1",
          "widget": "textfield",
          "title": "Thinking Budget",
          "description": "Configure the Gemini thinking budget by specifying the number of tokens to allocate for thinking. For Flash and Flash Lite models, values can range from 0 to 24,576 or -1 for dynamic thinking. For 2.5 Pro model, values must be between 1 and 24,576; setting 0 is not allowed.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "19",
      "name": "Output Formatter",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node formats output from Columns.",
      "details": "<h2> Output Formatter Node Details</h2>\nThe Output Formatter node formats data from a specified column in an input DataFrame and outputs it with a user-defined key. It is designed for use in PySpark-based data processing pipelines to extract and present data in a structured format, typically for downstream use or display. The node processes a single column from the input DataFrame, formats the content, and sends it as a JSON message with a specified key.<br>\n<br>\n<h4> General:</h4>\n<br>\nh5: Select Column:<br>\nSpecifies the column in the input DataFrame from which to extract data. This field is required and must correspond to a valid column name in the DataFrame.<br>\n<br>\nh5: Key:<br>\nDefines a key name for the formatted output. This field is required and is used to label the extracted column value in the output JSON message.<br>\n<br>\n<h4> Output:</h4>\nThe node does not modify the input DataFrame but instead generates a JSON-formatted message containing the following:<br>\n<ul>\n<li> id: The node’s ID.</li>\n<li> name: The node’s name (\"Output Formatter\").</li>\n<li> title: The display title (\"Output Formatter\").</li>\n<li> type: The node type (\"formatter\").</li>\n<li> resultType: Set to 3, indicating the output is a formatted message.</li>\n<li> visibility: Set to \"EXPANDED\" for display purposes.</li>\n<li> text: A nested structure containing:</li>\n<li> key: The user-specified key name.</li>\n<li> string: The value extracted from the selected column (from the first row of the DataFrame).</li>\n<li> format: Set to \"plaintext\" for the output format.</li>\n</ul>\nThe JSON message is sent to the workflow context for further processing or display. The input DataFrame is passed through unchanged as the node’s output schema.<br>",
      "examples": "<h2> Example: Output Formatter Node</h2>\n<br>\n<h3> Input:</h3>\nA DataFrame with the following structure, containing a single row of data:<br>\n<br>\n| summary_text                     |<br>\n|----------------------------------|<br>\n| Project meeting: Plan Q1 goals...|<br>\n<br>\nThe Output Formatter node is configured as follows:<br>\n<ul>\n<li> Select Column: summary_text</li>\n<li> Key: meeting_summary</li>\n</ul>\n<h3> Output:</h3>\nThe node processes the DataFrame and generates a JSON-formatted message sent to the workflow context, with the following structure:<br>\n<br>\n```json<br>\n{<br>\n\"id\": \"11\",<br>\n\"name\": \"Output Formatter\",<br>\n\"title\": \"Output Formatter\",<br>\n\"type\": \"formatter\",<br>\n\"resultType\": 3,<br>\n\"visibility\": \"EXPANDED\",<br>\n\"text\": {<br>\n\"key\": \"meeting_summary\",<br>\n\"string\": \"Project meeting: Plan Q1 goals...\",<br>\n\"format\": \"plaintext\"<br>\n}<br>\n}<br>\n```<br>\n<br>\nThe input DataFrame is passed through unchanged as the node’s output schema.<br>\n<br>\n<h3> Explanation:</h3>\n<ul>\n<li> The summary_text column is selected, and the value from its first row (\"Project meeting: Plan Q1 goals...\") is extracted.</li>\n<li> The key field is set to \"meeting_summary\", which is used to label the extracted value in the output JSON.</li>\n<li> The node formats the extracted value into a JSON message with a nested text object, specifying the key, string value, and format (\"plaintext\").</li>\n<li> The JSON message is sent to the workflow context for further processing or display.</li>\n<li> The original DataFrame is returned as the output schema without modification.</li>\n</ul>",
      "type": "transform",
      "nodeClass": "fire.nodes.graph.NodeOutputFormatter",
      "x": "709.194px",
      "y": "480.187px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "column",
          "value": "response",
          "widget": "variable",
          "title": " Select Column",
          "description": "Select Column to format",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "key",
          "value": "genAiResponse",
          "widget": "textfield",
          "title": "Key",
          "description": "Specify a key Name",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "disabled": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [
    {
      "source": "12",
      "target": "13",
      "id": 1
    },
    {
      "source": "13",
      "target": "19",
      "id": 2
    },
    {
      "source": "10",
      "target": "12",
      "id": 3
    },
    {
      "source": "1",
      "target": "10",
      "id": 4
    }
  ],
  "dataSetDetails": [],
  "engine": "pyspark"
}