{
  "name": "03-Document-Extractor-CSV",
  "uuid": "e4030173-5ca9-495f-9e6d-21a3c8ae887f",
  "category": "Main-Pipeline",
  "description": "-",
  "parameters": "--var read=true --var repositoryName=General --var refresh=false --var checkbox1=false --var view1=false --var translate=false --var destinationPath=/data/GENAI/Invoice-Extraction/General/invoice-english-britain.pdf --var folderPath=/data/GENAI/Invoice-Extraction/General/output --var refresh1=false --var checkbox2=false --var view2=false",
  "nodes": [
    {
      "id": "7",
      "name": "Execute In Loop",
      "iconImage": "fa fa-tumblr-square",
      "description": "",
      "type": "shellcommand",
      "nodeClass": "fire.nodes.etl.NodeDistinctValuesLoop",
      "x": "316.388px",
      "y": "151.4px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "loopCols",
          "value": "[\"fileName\"]",
          "widget": "variables",
          "title": "Loop Columns",
          "description": "",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "9",
      "name": "DocumentToText",
      "iconImage": "/images/icons/node-icon/PDF.svg",
      "description": "Extract text from Documents",
      "type": "dataset",
      "nodeClass": "fire.nodes.gai.NodeDocumentToText",
      "x": "179px",
      "y": "159px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "filePath",
          "value": "${genaiHome}${destinationPath}",
          "widget": "textfield",
          "title": "Directory Or File Path",
          "description": "Select a Pdf/Text/Docx File or Directory",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "fileType",
          "value": "pdf",
          "widget": "array",
          "title": "Document Type",
          "description": "Choose a Document Type.If Empty all four types of files will be processed.",
          "optionsArray": [
            "pdf",
            "txt",
            "docx",
            "image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "recursive",
          "value": "false",
          "widget": "array",
          "title": "Recursive",
          "description": "Recursively process the documents in the given Directory",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "isImage",
          "value": "true",
          "widget": "array",
          "title": "Image Encoding",
          "description": "Adds a column for base64 encoded pages",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "saveImageDir",
          "value": "",
          "widget": "textfield",
          "title": "Save Images Directory Path",
          "description": "The file path to save the output",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "columns",
          "value": "",
          "widget": "tab",
          "title": "Rename Output Cols",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "fileNameCol",
          "value": "fileName",
          "widget": "textfield",
          "title": "File Name Column",
          "description": "Rename File Name Column. Defaults to fileName",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "contentCol",
          "value": "content",
          "widget": "textfield",
          "title": "Content Column",
          "description": "Rename Content Column. Defaults to content",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "pageNumberCol",
          "value": "pageNumber",
          "widget": "textfield",
          "title": "Page Number Column",
          "description": "Rename Page Number Column. Defaults to pageNumber",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "base64ImageCol",
          "value": "base64ImageCol",
          "widget": "textfield",
          "title": "Base64 Image Column",
          "description": "Rename Image Column. Defaults to base64ImageCol",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "10",
      "name": " Multi LLM Query",
      "iconImage": "/images/icons/node-icon/Graph_group_by_column.svg",
      "description": "This node is designed to query multiple large language models (LLMs) from different providers (OpenAI, Bedrock, Gemini) using a vector database (e.g., Pinecone or FAISS) or a DataFrame. It processes user queries and returns responses by querying the selected vector database.",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeMultiLLMQuery",
      "x": "466px",
      "y": "140px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "task",
          "value": "other",
          "widget": "key_value_array",
          "title": "Select Option",
          "description": "Specify the task to perform: summary, translation, topic extraction, or other.",
          "optionsMap": {
            "summary": "Generate Summary in bullet points ",
            "translation": "Translate the following content to default language",
            "topic_extraction": "Extract key topics from the following content.",
            "other": ""
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "customPrompt",
          "value": "\"text\": \"\"\" Your task is to extract all the invoice information and present it in the following HTML structure:\n\n\n      Sections Required:\n\n\n      From Information: Includes the \"Company Name,\" \"Address,\" \"Contact,\" and \"Tax ID\" of the sender.\n      Invoice Information: Contains the Invoice Date and Invoice Number.\n      Items Table: A table with the following columns:\n      Description\n      Quantity\n      Unit Price\n      Amount\n      Tax Rate\n      Totals Section: Includes:\n      Net Total\n      VAT\n      Grand Total\n      HTML Output Requirements:\n\n\n      Ensure all data is presented in <section> tags with appropriate IDs (e.g., #invoice-info, #from-info, #items, #totals).\n      Display items in a table with borders and proper <thead> and <tbody> structure.\n      If any value is missing or not available, replace it with null or N/A.\n      here is example -\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Invoice Information</title>\n          <style>\n              table {\n                  border-collapse: collapse;\n                  width: 100%;\n              }\n              th, td {\n                  border: 1px solid #000;\n                  text-align: left;\n                  padding: 8px;\n              }\n              th {\n                  background-color: #f2f2f2;\n              }\n          </style>\n      </head>\n      <body>\n          <header>\n              <h1>Invoice Details</h1>\n          </header>\n          <main>\n              <section id=\"invoice-info\">\n                  <p><strong>Invoice Date:</strong> 2024-06-30</p>\n                  <p><strong>Invoice Number:</strong> AA3170000486</p>\n                  <p><strong>Net Total:</strong> 42,520</p>\n                  <p><strong>VAT:</strong> 4,252</p>\n                  <p><strong>Grand Total:</strong> 46,772</p>\n              </section>\n\n\n              <section id=\"items\">\n                  <h2>Items</h2>\n                  <table>\n                      <thead>\n                          <tr>\n                              <th>Description</th>\n                              <th>Quantity</th>\n                              <th>Unit Price</th>\n                              <th>Amount</th>\n                              <th>Tax Rate</th>\n                          </tr>\n                      </thead>\n                      <tbody>\n                          <tr>\n                              <td>Warehouse Storage Fee - 1st Period</td>\n                              <td>4</td>\n                              <td>8</td>\n                              <td>14,440</td>\n                              <td>10%</td>\n                          </tr>\n                          <tr>\n                              <td>Warehouse Storage Fee - 2nd Period</td>\n                              <td>2</td>\n                              <td>8</td>\n                              <td>14,440</td>\n                              <td>10%</td>\n                          </tr>\n                          <tr>\n                              <td>Warehouse Storage Fee - 3rd Period</td>\n                              <td>5</td>\n                              <td>8</td>\n                              <td>13,640</td>\n                              <td>10%</td>\n                          </tr>\n                      </tbody>\n                  </table>\n              </section>\n          </main>\n      </body>\n      </html>\n\t  Ensure each sections has an alternate color scheme between this two color ##FFF9EF, #ECFFFC codes. This is mandatory.\n      Ensure the structure remains consistent even if some fields are unavailable.\n      Also save all data as csv file in good common structure at following path\n      \n        \"\"\"",
          "widget": "textareafield",
          "title": "Custom Prompt",
          "description": "Custom prompt to override the default instructions.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "userQueryCol",
          "value": "",
          "widget": "variable",
          "title": "User Query Column",
          "description": "Column name for user query (default: 'userQuery').",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "contentCol",
          "value": "",
          "widget": "variable",
          "title": "Content Column",
          "description": "Column name for the text content.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "language",
          "value": "en",
          "widget": "textfield",
          "title": "Language",
          "description": "Language for translation (default: 'en').",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "llmConnection",
          "value": "openai-api-connection",
          "widget": "object_array",
          "title": "Select Connection",
          "description": "Select Connection",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "temperature",
          "value": "0",
          "widget": "textfield",
          "title": "Temperature",
          "description": "Temperature setting for the model (default: 0).",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "image_col",
          "value": "base64ImageCol",
          "widget": "variable",
          "title": "Image Column",
          "description": "Column name for the base 64 image.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "inputMode",
          "value": "image",
          "widget": "array",
          "title": "Mode Selection",
          "description": "Select the model to use (text, image, text+image).",
          "optionsArray": [
            "text",
            "image",
            "text+image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "System Prompt",
          "value": "",
          "widget": "tab",
          "title": "System Prompt",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "writePrompt",
          "value": "",
          "widget": "textareafield",
          "title": "Write Prompt",
          "description": "Prompt text for writing the output.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputPath",
          "value": "${folderPath}",
          "widget": "textfield",
          "title": "Output Path",
          "description": "Path where the output will be saved.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputFormat",
          "value": "text",
          "widget": "array",
          "title": "Output Format",
          "description": "Output format options: text, pdf, or docx.",
          "optionsArray": [
            "text",
            "pdf",
            "docx"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "11",
      "name": "PySpark",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node runs any given PySpark code. The input dataframe is passed into the function myfn as a parameter.",
      "type": "pyspark",
      "nodeClass": "fire.nodes.etl.NodePySpark",
      "x": "606px",
      "y": "137px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "code",
          "value": "'''\nInput:\n  spark: spark session \n  workflowContext:  workflowcontext object \n  id: node number \n  inDF: input pyspark dataframe \n  cust_dict: Dictionary of the workflow variables passed from previous node \nOutput:\n  outDF: return pyspark dataframe i.e outDF \n ''' \n \nfrom pyspark.sql.types import * \nfrom pyspark.sql.functions import * \nfrom pyspark.sql import * \nfrom fire.workflowcontext import WorkflowContext \n\ndef csv_translate(image, output_dir_path):\n    language = 'english'\n    inline_data = []\n    for i in image:\n        inline_data.append({\n            \"inlineData\": {\n                \"mimeType\": \"image/png\",\n                \"data\": i\n            }\n        })\n\n    payload = {\n        \"contents\": [\n            {\n                \"parts\": inline_data + [\n                    {\"text\": \"\"\" Your task is to extract all the invoice information and present it in the following HTML structure:\n\n        Sections Required:\n\n        From Information: Includes the \"Company Name,\" \"Address,\" \"Contact,\" and \"Tax ID\" of the sender.\n        Invoice Information: Contains the Invoice Date and Invoice Number.\n        Items Table: A table with the following columns:\n        Description\n        Quantity\n        Unit Price\n        Amount\n        Tax Rate\n        Totals Section: Includes:\n        Net Total\n        VAT\n        Grand Total\n        HTML Output Requirements:\n\n        Ensure all data is presented in <section> tags with appropriate IDs (e.g., #invoice-info, #from-info, #items, #totals).\n        Display items in a table with borders and proper <thead> and <tbody> structure.\n        If any value is missing or not available, replace it with null or N/A.\n\n        Ensure each section has an alternate color scheme between this two colors ##FFF9EF, #ECFFFC codes. This is mandatory.\n        Ensure the structure remains consistent even if some fields are unavailable.\n        Also save all data as CSV file in a good common structure at the following path:\n        \"\"\"}\n                ]\n            }\n        ]\n    }\n\n    model2 = \"gemini-1.5-flash\"\n\n    response = requests.post(\n        f\"https://generativelanguage.googleapis.com/v1beta/models/{model2}:generateContent?key={GOOGLE_API_KEY}\",\n        data=json.dumps(payload)\n    )\n    output_html = response.json()[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"]\n\n    # Clean up HTML content\n    ahtml = output_html.replace(\"\\n\", \"\")\n    if \"```\" in ahtml:\n        ahtml = ahtml.replace(\"```\", \"\")[4:]\n\n    # Parse the HTML using BeautifulSoup\n    soup = BeautifulSoup(ahtml, 'html.parser')\n\n    # Extract Invoice Info\n    invoice_info = soup.select_one(\"#invoice-info\")\n    invoice_data = {\n        \"Invoice Date\": invoice_info.find(\"strong\", text=\"Invoice Date:\").next_sibling.strip() if invoice_info else \"N/A\",\n        \"Invoice Number\": invoice_info.find(\"strong\", text=\"Invoice Number:\").next_sibling.strip() if invoice_info else \"N/A\",\n        \"Net Total\": invoice_info.find(\"strong\", text=\"Net Total:\").next_sibling.strip() if invoice_info else \"N/A\",\n        \"VAT\": invoice_info.find(\"strong\", text=\"VAT:\").next_sibling.strip() if invoice_info else \"N/A\",\n        \"Grand Total\": invoice_info.find(\"strong\", text=\"Grand Total:\").next_sibling.strip() if invoice_info else \"N/A\",\n    }\n\n    # Extract Items Table\n    items_table = soup.select_one(\"#items table tbody\")\n    items_data = []\n    if items_table:\n        rows = items_table.find_all(\"tr\")\n        for row in rows:\n            cols = row.find_all(\"td\")\n            items_data.append([col.text.strip() for col in cols])\n\n    # Save Data as CSV\n    csv_file_path = os.path.join(output_dir_path, \"invoice_data.csv\")\n    with open(csv_file_path, mode=\"w\", newline=\"\", encoding=\"utf-8\") as file:\n        writer = csv.writer(file)\n\n        # Write Invoice Information\n        writer.writerow([\"Field\", \"Value\"])\n        for key, value in invoice_data.items():\n            writer.writerow([key, value])\n\n        # Write Items Table\n        writer.writerow([])\n        writer.writerow([\"Description\", \"Quantity\", \"Unit Price\", \"Amount\", \"Tax Rate\"])\n        writer.writerows(items_data)\n\n    return ahtml\n\ndef myfn(spark: SparkSession, workflowContext: WorkflowContext, id: int, inDF: DataFrame, cust_dict:dict):\n  \toutput_dir_path = '${genaiHome}'+\"${folderPath}\"\n    content = inDF.first()[\"response\"]\n  \tdatacsv = csv_translate(content, output_dir_path)\n    outDF = inDF  #add custom logic\n    return outDF",
          "widget": "textarea_large",
          "title": "PySpark",
          "description": "PySpark code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputColNames",
          "value": "[]",
          "widget": "schema_col_names",
          "title": "Column Names",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputColTypes",
          "value": "[]",
          "widget": "schema_col_types",
          "title": "Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputColFormats",
          "value": "[]",
          "widget": "schema_col_formats",
          "title": "Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [
    {
      "source": "9",
      "target": "7",
      "id": 1
    },
    {
      "source": "7",
      "target": "10",
      "id": 2
    },
    {
      "source": "10",
      "target": "11",
      "id": 3
    }
  ],
  "dataSetDetails": [],
  "engine": "pyspark"
}