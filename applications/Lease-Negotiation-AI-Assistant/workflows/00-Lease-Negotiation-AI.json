{
  "name": "00-Lease-Negotiation-AI",
  "uuid": "faf99cd4-6465-4e57-8c34-06141d2848d6",
  "category": "GenAI",
  "description": "-",
  "parameters": "--var destinationPath=/data/GENAI/Lease-Negotiation/Upload",
  "nodes": [
    {
      "id": "1",
      "name": "DocumentToText",
      "iconImage": "/images/icons/node-icon/PDF.svg",
      "description": "Extract text from Documents",
      "details": "<h2> DocumentToText Node Details</h2>\n<br>\nThis node extracts text content from various document types (PDF, TXT, DOCX) located in a specified directory or file path. It processes individual files or entire directories, converting the documents into structured text.<br>\n<br>\n<h4> Parameters to be set:</h4>\n<br>\n### General:<br>\n<br>\n- **Directory or File Path**: Specify the path to the file or directory containing the documents. This input is required.<br>\n- **Document Type**: Choose the document types to process. Options include:<br>\n- `pdf`<br>\n- `txt`<br>\n- `docx`<br>\n- If left empty, the node will process all three types of files.<br>\n<br>\n### Recursive:<br>\n<br>\n- **Recursive**: Choose whether to recursively process documents in the provided directory. Options are:<br>\n- `true`: Process documents in the specified directory and its subdirectories.<br>\n- `false`: Process only the documents directly in the provided directory.<br>\n<br>\n### Output Column Renaming:<br>\n<br>\n- **File Name Column**: Rename the column that will store the file name. By default, this column is named `fileName`.<br>\n- **Content Column**: Rename the column that will store the extracted text content. By default, this column is named `content`.<br>\n- **Page Number Column**: Rename the column that will store the page number. By default, this column is named `pageNumber`.<br>",
      "examples": "",
      "type": "dataset",
      "nodeClass": "fire.nodes.gai.NodeDocumentToText",
      "x": "40.6518px",
      "y": "148.649px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "filePath",
          "value": "${genaiHome}${destinationPath}",
          "widget": "textfield",
          "title": "Directory Or File Path",
          "description": "Select a Pdf/Text/Docx File or Directory",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "fileType",
          "value": "pdf",
          "widget": "array",
          "title": "Document Type",
          "description": "Choose a Document Type.If Empty all four types of files will be processed.",
          "optionsArray": [
            "pdf",
            "txt",
            "docx",
            "image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "recursive",
          "value": "false",
          "widget": "array",
          "title": "Recursive",
          "description": "Recursively process the documents in the given Directory",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "isImage",
          "value": "false",
          "widget": "array",
          "title": "Image Encoding",
          "description": "Adds a column for base64 encoded pages",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "saveImageDir",
          "value": "",
          "widget": "textfield",
          "title": "Save Images Directory Path",
          "description": "The file path to save the output",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "columns",
          "value": "",
          "widget": "tab",
          "title": "Rename Output Cols",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "fileNameCol",
          "value": "fileName",
          "widget": "textfield",
          "title": "File Name Column",
          "description": "Rename File Name Column. Defaults to fileName",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "contentCol",
          "value": "content",
          "widget": "textfield",
          "title": "Content Column",
          "description": "Rename Content Column. Defaults to content",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "pageNumberCol",
          "value": "pageNumber",
          "widget": "textfield",
          "title": "Page Number Column",
          "description": "Rename Page Number Column. Defaults to pageNumber",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "base64ImageCol",
          "value": "base64ImageCol",
          "widget": "textfield",
          "title": "Base64 Image Column",
          "description": "Rename Image Column. Defaults to base64ImageCol",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "2",
      "name": " Multi LLM Query",
      "iconImage": "/images/icons/node-icon/Graph_group_by_column.svg",
      "description": "This node is designed to query multiple large language models (LLMs) from different providers (OpenAI, Bedrock, Gemini) using a vector database (e.g., Pinecone or FAISS) or a DataFrame. It processes user queries and returns responses by querying the selected vector database.",
      "details": "<h2> Create Content Generation Node Details</h2>\n<br>\nThis node allows you to define and configure a content generation workflow. It supports tasks such as summarization, translation, and topic extraction. Users can override default prompts with custom instructions, select the data columns for processing, and choose the desired model for content generation. The node also offers separate configuration sections for system prompts and for integrating with service providers like OpenAI, Bedrock, and Gemini.<br>\n<br>\n<h4> Parameters to be set:</h4>\n<br>\n### Generat Configuration:<br>\n- **Select Option (Task)**: Choose the task to perform. Options include:<br>\n- **Summary**: Generate a summary in bullet points.<br>\n- **Translation**: Translate the content into the default language.<br>\n- **Topic Extraction**: Extract key topics from the content.<br>\n- **Other**: Specify any other task.<br>\n- **Custom Prompt**: Provide a custom prompt to override the default instructions.<br>\n- **User Query Column**: Specify the column that contains the user query (default: 'userQuery').<br>\n- **Content Column**: Specify the column that contains the text content (default: 'content').<br>\n- **Language**: Define the language for translation tasks (default: 'en').<br>\n- **Model Selection**: Select the model to use for content generation from the available options: OpenAI, Bedrock, or Gemini.<br>\n<br>\n### System Prompt Configuration:<br>\n- **Write Prompt**: Enter the prompt text that will guide the content generation process.<br>\n- **Output Path**: Specify the file path where the generated output will be saved.<br>\n- **Output Format**: Choose the output format. Options include: text, pdf, or docx.<br>\n<br>\n### OpenAI Specific Configuration:<br>\n- **OpenAI API Key**: Provide your OpenAI API key.<br>\n- **OpenAI Chat Model**: Specify the OpenAI chat model to use.<br>\n- **Temperature**: Set the temperature for the model (default: 0).<br>\n- **Max Tokens**: Define the maximum number of tokens for the response (default: 1024).<br>\n- **Max Retries**: Set the maximum number of retries for API calls (default: 6).<br>\n<br>\n### Bedrock Specific Configuration:<br>\n- **Service Name**: Specify the Bedrock service name.<br>\n- **Region Name**: Provide the AWS region for Bedrock.<br>\n- **AWS Access Key ID**: Enter your AWS Access Key ID.<br>\n- **AWS Secret Access Key**: Enter your AWS Secret Access Key.<br>\n<br>\n### Gemini Specific Configuration:<br>\n- **Google API Key**: Provide your Google API key for Gemini.<br>\n- **Gemini Model**: Specify the Gemini model to use.<br>",
      "examples": "",
      "type": "pyspark",
      "nodeClass": "fire.nodes.gai.NodeMultiLLMQuery",
      "x": "269.714px",
      "y": "141.711px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "task",
          "value": "other",
          "widget": "key_value_array",
          "title": "Select Option",
          "description": "Specify the task to perform: summary, translation, topic extraction, or other.",
          "optionsMap": {
            "summary": "Generate Summary in bullet points ",
            "translation": "Translate the following content to default language",
            "topic_extraction": "Extract key topics from the following content.",
            "other": ""
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "customPrompt",
          "value": "You are analyzing lease agreements **only** from uploaded PDF files.\n\n\nStrictly follow these rules:\n- Only process lease agreements that match the pattern: `verizon_lease_uae_<n>.pdf`\n- Do not assume or infer any lease file exists unless its content is explicitly provided in this session\n- Ignore any leases not visible in the current input or previously processed — each run is independent\n\n\n\n\nGroup content using fileName and PageNumber, but do not display them. For each lease, perform the following:\n1. Lease Extraction\nÂ  Â  Property Name\nÂ  Â  Square Footage\nÂ  Â  Base Rent\nÂ  Â  Escalation Rate\nÂ  Â  Lease Term\nÂ  Â  Flag unusual clauses (e.g., excessive termination penalties)\n\n\n2. Comparative Analysis\n\n\nÂ  Â  Compare Base Rent against:\n\n\nÂ  Â  Â  Â  Market rates from market_rates_uae.pdf\nÂ  Â  Â  Â  Competitor rates from competitor_leases.pdf\nÂ  Â  Calculate % rent premium/discount vs. market\n\n\n3. Performance Recommendation Logic\n\n\nÂ  Â  Use 30-day average foot traffic from verizon_performance.pdf\nÂ  Â  If traffic < 100/day â recommend rent reduction\nÂ  Â  If vacancy rate > 15% â recommend negotiation leverage\n\n\nOUTPUT FORMAT\nA) HTML Summary Table (No markdown, no file names)\n\n\nReturn the following table formatted in pure HTML (no triple quotes, no markdown):\n<table border=\"1\" cellpadding=\"6\" cellspacing=\"0\" style=\"border-collapse: collapse; font-family: Arial, sans-serif; font-size: 14px;\"> <thead style=\"background-color: #f2f2f2;\"> <tr> <th>Location</th> <th>Current Rent</th> <th>Market Rate</th> <th>Competitor Rate</th> <th>Foot Traffic</th> <th>Recommendation Summary</th> </tr> </thead> <tbody> <!-- One <tr> per lease here --> </tbody> </table>\n\nB) Detailed Recommendations (HTML, No markdown)\n\n\nAfter the table, for each lease, return the following in plain HTML, properly structured and styled (no markdown bullets or code blocks):\n\n<hr style=\"margin-top: 40px; margin-bottom: 20px; border: none; border-top: 1px solid #ccc;\" />\n\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"0\" style=\"border-collapse: collapse; font-family: Arial, sans-serif; font-size: 14px; width: 100%;\">\nÂ  <thead style=\"background-color: #f2f2f2;\">\nÂ  Â  <tr>\nÂ  Â  Â  <th style=\"text-align: left; width: 25%;\">Property</th>\nÂ  Â  Â  <th style=\"text-align: left;\">Recommendation & Negotiation Strategy</th>\nÂ  Â  </tr>\nÂ  </thead>\nÂ  <tbody>\nÂ  Â  <tr>\nÂ  Â  Â  <td><strong>Dubai Mall</strong></td>\nÂ  Â  Â  <td>\nÂ  Â  Â  Â  Foot traffic is consistently strong at 123/day, and the rent is only 4.2% above market, indicating competitive positioning.Â \nÂ  Â  Â  Â  We recommend maintaining current lease terms with a capped escalation of 3%.Â \nÂ  Â  Â  Â  Emphasize stability and long-term partnership to justify continuity. Propose: âGiven stable performance metrics and fair market alignment, we suggest locking in current terms with limited annual increases.â\nÂ  Â  Â  </td>\nÂ  Â  </tr>\nÂ  Â  <tr>\nÂ  Â  Â  <td><strong>Yas Mall</strong></td>\nÂ  Â  Â  <td>\nÂ  Â  Â  Â  With foot traffic at 108/day and rent already 2.5% below market, the location shows potential but is impacted by a >15% vacancy rate in the area.\nÂ  Â  Â  Â  Recommend a modest rent reduction or temporary concession (6â8%) during renegotiation. Leverage area vacancy trends to support the ask.\nÂ  Â  Â  Â  Suggested message: âIn view of prevailing area vacancy and evolving tenant demand, we request a rent adjustment to reflect the broader retail environment.â\nÂ  Â  Â  </td>\nÂ  Â  </tr>\nÂ  Â  <tr>\nÂ  Â  Â  <td><strong>Mall of the Emirates</strong></td>\nÂ  Â  Â  <td>\nÂ  Â  Â  Â  Traffic levels (97/day) fall just below the 100/day threshold. While rent is 19% below market, lower performance warrants a re-evaluation.\nÂ  Â  Â  Â  Recommend maintaining rent but requesting a grace period on escalation clauses or a short-term rent relief clause.\nÂ  Â  Â  Â  Proposed note: âWhile rates remain below market, traffic softness merits short-term flexibility to support continued occupancy.â\nÂ  Â  Â  </td>\nÂ  Â  </tr>\nÂ  Â  <!-- Additional properties here -->\nÂ  </tbody>\n</table>\n\n\n\n\nÂ  <!-- Add more mall blocks similarly -->\n</div>\n\n\n\n**Do not include or reference any documents not explicitly listed above.**\n**Do not include file name or page number. Do not use markdown, triple quotes, or any explanation. Output only clean HTML: one table followed by detailed, styled lease-by-lease sections.**",
          "widget": "textareafield",
          "title": "Custom Prompt",
          "description": "Custom prompt to override the default instructions.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "userQueryCol",
          "value": "",
          "widget": "variable",
          "title": "User Query Column",
          "description": "Column name for user query (default: 'userQuery').",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "contentCol",
          "value": "contentConcat",
          "widget": "variable",
          "title": "Content Column",
          "description": "Column name for the text content.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "language",
          "value": "en",
          "widget": "textfield",
          "title": "Language",
          "description": "Language for translation (default: 'en').",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "llmConnection",
          "value": "openai-api-connection",
          "widget": "object_array",
          "title": "Select Connection",
          "description": "Select Connection",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "temperature",
          "value": "0",
          "widget": "textfield",
          "title": "Temperature",
          "description": "Temperature setting for the model (default: 0).",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "image_col",
          "value": "",
          "widget": "variable",
          "title": "Image Column",
          "description": "Column name for the base 64 image.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "inputMode",
          "value": "text",
          "widget": "array",
          "title": "Mode Selection",
          "description": "Select the model to use (text, image, text+image).",
          "optionsArray": [
            "text",
            "image",
            "text+image"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "System Prompt",
          "value": "",
          "widget": "tab",
          "title": "System Prompt",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "writePrompt",
          "value": "",
          "widget": "textareafield",
          "title": "Write Prompt",
          "description": "Prompt text for writing the output.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputPath",
          "value": "${genaiHome}/projects-customers/Lease-Negotiation/Output",
          "widget": "textfield",
          "title": "Output Path",
          "description": "Path where the output will be saved.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputFormat",
          "value": "pdf",
          "widget": "array",
          "title": "Output Format",
          "description": "Output format options: text, pdf, or docx.",
          "optionsArray": [
            "text",
            "pdf",
            "docx"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "4",
      "name": "Sticky Note",
      "description": "Allows capturing Notes on the Workflow",
      "details": "",
      "examples": "",
      "type": "sticky",
      "nodeClass": "fire.nodes.doc.NodeStickyNote",
      "x": "736px",
      "y": "51px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "bgColor",
          "value": "gray",
          "widget": "textfield",
          "title": "Bg Color",
          "description": "Background of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "width",
          "value": "554.095238px",
          "widget": "textfield",
          "title": "Width",
          "description": "Width of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "height",
          "value": "534.095238px",
          "widget": "textfield",
          "title": "Height",
          "description": "Height of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "comment",
          "value": "<h4><code><strong>DocumentToText</strong></code><strong> (PDF Parser)</strong></h4><ul><li><strong>Purpose</strong>: Extracts raw text from one or more uploaded lease agreement PDFs (e.g., <code>verizon_lease_uae_1.pdf</code> to <code>_N.pdf</code>)</li><li><strong>Input</strong>: Folder or PDFs/DOCs</li><li><strong>Output</strong>: Structured text per document, typically includes metadata like <code>fileName</code>, <code>PageNumber</code>, and <code>contentConcat</code>.</li></ul><p><br></p><h4><code><strong>Concat Columns</strong></code></h4><ul><li><strong>Purpose</strong>: Joins key pieces like <code>fileName</code>, <code>PageNumber</code>, and <code>contentConcat</code> (if needed for prompt context)</li><li><strong>Why it's used</strong>: To ensure the LLM receives full and coherent text blocks tagged with the right metadata, useful if leases are split across pages</li></ul><p><br></p><h4><code><strong>Multi LLM Query</strong></code></h4><ul><li><strong>Purpose</strong>: Processes the extracted lease text and other reference data (market rates, competitor rates, foot traffic) to:</li><li class=\"ql-indent-1\">Extract lease parameters (rent, sqft, term, etc.)</li><li class=\"ql-indent-1\">Perform comparative analysis</li><li class=\"ql-indent-1\">Generate recommendations</li><li class=\"ql-indent-1\">Output an HTML table + professional messages for each location</li><li><strong>Inputs</strong>:</li><li class=\"ql-indent-1\">Extracted lease content from <code>DocumentToText</code></li><li class=\"ql-indent-1\">Optional: Reference docs (e.g., market rates, performance data) passed or concatenated earlier</li><li><strong>What it does</strong>:</li><li>Uses templated prompts or custom logic to ask the LLM:</li><li class=\"ql-indent-2\">What is the lease structure?</li><li class=\"ql-indent-2\">How does it compare to benchmarks?</li><li class=\"ql-indent-1\">What is the actionable advice?</li></ul><p><br></p><p><br></p><p><br></p>",
          "widget": "textarea_rich",
          "title": "Comment",
          "description": "Comments for the Workflow",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "7",
      "name": "Concat Columns",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node creates a new DataFrame by concatenating the specified columns of the input DataFrame",
      "details": "<h2>Concat Columns Node Details</h2>\n<br>\nIt adds a new column to the dataframe created by concatenating multiple columns and separated by the specified separator. <br>\n<br>\n<h4>Input</h4>\n<ul>\n<li>   COLUMNS :- Select columns that need to be concatenated. Multiple columns can be selected for concatenation.</li>\n<li>   CONCATENATED COLUMN NAME :- Enter name of the column to list the concatenated values in the outgoing Dataframe.</li>\n<li>\t  SEPARATOR :- Enter a Separator value to separate values from different columns in the output. It can be a multi-character value. Common Separator values used are as follows:</li>\n</ul>\n  b. *<br>\n  c. -<br>\n  d. :<br>\n  e. [Blank Space]<br>\n<br>\n<h4>Output</h4>\n<ul>\n<li>   New concatenated column would be added to the Outgoing Dataframe listing the concatenated values.</li>\n</ul>",
      "examples": "<h2>Concat Columns Examples</h2>\n<br>\n<h4>Incoming Dataframe</h4>\n<br>\nIn this example we have considered an Incoming Dataframe with following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\n<h4>Concat Columns Node Configuration and Output </h4>\n<br>\nConcat Columns Node is configured to concatenate two columns [CUST_CD] and [CUST_NAME] from the incoming Dataframe into a new column [CUST_IDENTIFIER] using separator [-].<br>\nOutput Dataframe would be created as below:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY         |    CUST_IDENTIFIER<br>\n----------------------------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00  |    C01-MATT<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00  |    C02-LISA<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00   |    C03-ROBIN<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00  |    C04-MARCUS<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeConcatColumns",
      "x": "199.717px",
      "y": "383.744px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "inputCols",
          "value": "[\"fileName\",\"pageNumber\",\"content\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "Columns to be concatenated",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "outputCol",
          "value": "contentConcat",
          "widget": "textfield",
          "title": "Concatenated Column Name",
          "description": "Column name for the concatenated columns",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "sep",
          "value": "|",
          "widget": "textfield",
          "title": "Separator",
          "description": "Separator to be used when concatenating the columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "8",
      "name": "Output Formatter",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node formats output from Columns.",
      "details": "",
      "examples": "",
      "type": "transform",
      "nodeClass": "fire.nodes.graph.NodeOutputFormatter",
      "x": "463.067px",
      "y": "146.067px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "column",
          "value": "response",
          "widget": "variable",
          "title": " Select Column",
          "description": "Select Column to format",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "key",
          "value": "genAiResponse",
          "widget": "textfield",
          "title": "Key",
          "description": "Specify a key Name",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "pyspark"
    },
    {
      "id": "9",
      "name": "Print N Rows",
      "iconImage": "/images/icons/node-icon/print_n_rows.svg",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "<h2>Print N Rows Node Details</h2>\n<br>\nThis node is used to print the first N rows from the incoming dataframe.<br>\n<br>\nThe Number of rows that needs to be printed can be configured in the node.<br>\n<br>\n<h4>Input Parameters</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> TITLE : Enter a short description for the type of information being displayed.</li>\n<li> NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N=10).</li>\n<li> DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li> This node can be used to view, analyze and validate the output of the Dataframe.</li>\n</ul>",
      "examples": "when input 5 in no of rows,it will show first 5 rows of the table as follows<br>\n<br>\nPartID\tSupplierID\tPartName\t<br>\n<br>\nP9271\t  S798\t    Part_D\t<br>\nP523\t  S955\t    Part_K\t<br>\nP3201\t  S332\t    Part_M\t<br>\nP9634\t  S527\t    Part_G\t<br>\nP9345\t  S850\t    Part_M<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "477px",
      "y": "300px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "title",
          "value": "Row Values",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": ""
        }
      ],
      "engine": "all"
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "7",
      "id": 1
    },
    {
      "source": "7",
      "target": "2",
      "id": 2
    },
    {
      "source": "2",
      "target": "8",
      "id": 3
    },
    {
      "source": "8",
      "target": "9",
      "id": 4
    }
  ],
  "dataSetDetails": [],
  "engine": "pyspark"
}