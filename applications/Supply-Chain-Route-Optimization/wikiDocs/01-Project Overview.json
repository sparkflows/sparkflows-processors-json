{
  "id": 3576,
  "uuid": "d222782c-fb62-4477-839e-99671f244d49",
  "name": "01-Project Overview",
  "category": "",
  "projectId": 2632,
  "content": "<h2>Project Overview</h2><h3><br></h3><h3>Objective</h3><p><br></p><p>The primary objective of this solution is to optimize the routing between two specified locations by analyzing various routes based on critical factors such as distance, travel time, route cost, weather risk, and market risk. The code aims to identify the most efficient route, referred to as the \"optimized route,\" while also providing alternative routes along with justifications for their viability. This optimization process assists in effective decision-making regarding route selection, ensuring cost-effectiveness and risk mitigation.</p><h3><br></h3><h3>Scope</h3><ol><li>Optimized Route Calculation: Identify the optimal route based on factors such as cost, distance, travel time, weather risks, and market risks.</li><li>Route Comparisons: Compare multiple alternative routes against the optimized route, providing reasons for any higher costs, longer distances, or elevated risks in alternative paths.</li><li>Visual Route Representation: Visualize locations and routes on a network graph with distinct highlights for optimized paths, aiding quick analysis.</li><li>Risk Management Insights: Enable users to assess routes with higher market or weather risks, providing a clear understanding of risk exposure for each route.</li></ol><p><br></p><h3>Approach</h3><p><br></p><ol><li>Data Preparation:</li></ol><ul><li class=\"ql-indent-1\">The input data is received as a PySpark DataFrame, which is then converted into a Pandas DataFrame to facilitate easier manipulation and analysis of the routing information.</li><li class=\"ql-indent-1\">The routes are structured in a manner conducive to optimization, creating a comprehensive dataset that includes all necessary parameters for analysis.</li></ul><p>       2.Route Graph Construction:</p><ul><li class=\"ql-indent-1\">A route graph is constructed using a dictionary. Each key represents a route defined by its start and end locations, while the corresponding values include metrics such as distance, travel time, route cost, weather risk, and market risk.</li></ul><p>        3.Linear Programming for Route Optimization:</p><ul><li class=\"ql-indent-1\">The optimization problem is formulated using linear programming via the&nbsp;<code style=\"background-color: rgb(240, 240, 240);\">pulp</code>&nbsp;library. The objective function is defined to minimize the total route cost across all potential routes.</li><li class=\"ql-indent-1\">Decision variables are established for each route, with constraints ensuring that the routing starts from the specified start location and ends at the designated end location.</li></ul><p>        4.Pathfinding for Alternative Routes:</p><ul><li class=\"ql-indent-1\">A recursive function is employed to identify all possible paths from the start location to the end location. This function collects alternative routes, which are then evaluated against the optimized route.</li><li class=\"ql-indent-1\">Each alternative route is assessed to identify significant differences compared to the optimized route based on predefined thresholds for cost, distance, market risk, and weather risk.</li></ul><p>         5.Output Preparation:</p><ul><li class=\"ql-indent-1\">The results, including the optimized route, alternative routes, and reasons for the viability of these alternatives, are formatted into a structured DataFrame.</li><li class=\"ql-indent-1\">This final DataFrame is prepared for further analysis</li></ul><h3><br></h3><p><br></p>",
  "icon": "{\"type\":\"svg\",\"icon\":\"images/createApplications.svg\"}",
  "description": "",
  "syncedWithGithub": false,
  "createdBy": "mudit",
  "dateCreated": "Aug 12, 2025, 6:44:47 AM",
  "updatedBy": "mudit",
  "dateLastUpdated": "Sep 12, 2025, 10:58:11 AM"
}