{
  "name": "06-Validation",
  "uuid": "dc8f7633-e6ad-4dd3-9c8c-dfd92dce23d4",
  "category": "-",
  "description": "-",
  "parameters": " --var runDataProfiling=true --var yearEDA=2010,2011,2012 --var holidayEDA=1.0,0.0 --var storesEDA='Fresh Valley Market','Metro Mart','Sunrise Grocers','Evergreen Foods','Quality Basket' --var exploreData=false --var yearTraining=2010.0,2011.0,2012.0 --var holidayForecasting=1.0,0.0 --var storesTraining='Fresh Valley Market','Metro Mart','Sunrise Grocers','Evergreen Foods','Quality Basket' --var Model=m3 --var forecast=true --var predictiveAnalysis=true",
  "nodes": [
    {
      "id": "2",
      "name": "Print N Rows",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "<h2>Print N Rows Node Details</h2>\n<br>\nThis node is used to print the first N rows from the incoming dataframe.<br>\n<br>\nThe Number of rows that needs to be printed can be configured in the node.<br>\n<br>\n<h4>Input Parameters</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> TITLE : Enter a short description for the type of information being displayed.</li>\n<li> NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N=10).</li>\n<li> DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li> This node can be used to view, analyze and validate the output of the Dataframe.</li>\n</ul>",
      "examples": "when input 5 in no of rows,it will show first 5 rows of the table as follows<br>\n<br>\nPartID\tSupplierID\tPartName\t<br>\n<br>\nP9271\t  S798\t    Part_D\t<br>\nP523\t  S955\t    Part_K\t<br>\nP3201\t  S332\t    Part_M\t<br>\nP9634\t  S527\t    Part_G\t<br>\nP9345\t  S850\t    Part_M<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "650.208px",
      "y": "374.181px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Row Values",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "3",
      "name": "Save CSV",
      "description": "Saves the DataFrame into the specified location in CSV Format",
      "details": "This node saves incoming Dataframe into the specified location in CSV format.<br>",
      "examples": "path-folder1/folder2/filename<br>\n<br>\nthe file will be saved under the file name at the path provided<br>\nif folder is not present it will be created and save the file<br>\nif the file already exists selection in save mode determines what happens to the file,append-adds the file data to it overwrite-replaces the file altogether<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.save.NodeSaveCSV",
      "x": "1106.22px",
      "y": "687.163px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "path",
          "value": "data/CPG/CPG-Sales-Forecasting/Prediction",
          "widget": "textfield",
          "title": "Path",
          "description": "Path where to save the CSV files",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "saveMode",
          "value": "Overwrite",
          "widget": "array",
          "title": "Save Mode",
          "description": "Whether to Append, Overwrite or Error if the path Exists",
          "optionsArray": [
            "Append",
            "Overwrite",
            "ErrorIfExists",
            "Ignore"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "header",
          "value": "true",
          "widget": "array",
          "title": "Header",
          "description": "Should a Header Row be saved with each File?",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "encoding",
          "value": "UTF-8",
          "widget": "textfield",
          "title": "Encoding",
          "description": "Decodes the CSV files by the given encoding type",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "quote",
          "value": "\"",
          "widget": "textfield",
          "title": "Quote",
          "description": "Sets a single character used for escaping quoted values where the separator can be part of the value",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "escape",
          "value": "\\",
          "widget": "textfield",
          "title": "Escape",
          "description": "Sets a single character used for escaping quotes inside an already quoted value.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "advanced",
          "value": "",
          "widget": "tab",
          "title": "Advanced",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "partitionColNames",
          "value": "[]",
          "widget": "variables",
          "title": "Partition Column Names",
          "description": "Partition Column Names",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "enableDownloadLink",
          "value": "false",
          "widget": "array_single",
          "title": "Enable Download Link",
          "description": "Generate download links for the saved CSV files",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fileName",
          "value": "",
          "widget": "textfield",
          "wdgtCommon": "enableDownloadLink",
          "title": "File Name To Download",
          "description": "Enter the FileName",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": "true"
        },
        {
          "name": "saveAsOneFile",
          "value": "false",
          "widget": "array",
          "title": "Save as One File",
          "description": "Save the output as a single CSV file using coalesce",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "4",
      "name": "Coalesce",
      "description": "This node coalesces the DataFrame into specified number of Partitions",
      "details": "This node coalesces the DataFrame into specified number of Partitions.<br>\n<br>\nIt is specially helpful for the case when too many small files are being created. In such a scenario, the Coalesce node can be used to limit the number of output files produced.<br>",
      "examples": "",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeCoalesce",
      "x": "950.205px",
      "y": "706.16px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "numPartitions",
          "value": "1",
          "widget": "textfield",
          "title": "Number of Partitions",
          "description": "input for number of partitions",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "5",
      "name": "Select Columns",
      "description": "This node creates a new DataFrame that contains only the selected columns",
      "details": "<h2>Select Columns Node Details</h2>\n<br>\nThis node creates a new DataFrame containing only the selected columns.<br>\n<br>\nIt selects columns that need to be passed to the outgoing Dataframe. <br>\n<br>\nColumns that need to be included in the outgoing Dataframe are to be selected in the 'Selected' list. Multiple columns can be selected in the list.<br>",
      "examples": "<h2>Select Columns Node Examples</h2>\n<br>\n<h4>Incoming Dataframe</h4>\n<br>\nIn this example we have considered an Incoming Dataframe with following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\n<h4>Select Columns Node Configuration And Output</h4>\n<br>\n[CUST_CD], [CUST_NAME] and [SALARY] columns from the incoming Dataframe are selected to be part of the outgoing Dataframe.<br>\nOutgoing Dataframe would be created as below containing only the selected columns:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    SALARY<br>\n-------------------------------------------------<br>\nC01        |    MATT         |    USD 200000.00<br>\nC02        |    LISA         |    GBP 100000.00<br>\nC03        |    ROBIN        |    EUR 15000.00<br>\nC04        |    MARCUS       |    AUD 350000.00<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeColumnFilter",
      "x": "790.201px",
      "y": "714.201px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputCols",
          "value": "[\"Store\",\"Size\",\"Temperature\",\"MarkDown1\",\"MarkDown2\",\"MarkDown3\",\"MarkDown4\",\"MarkDown5\",\"CPI\",\"Unemployment\",\"Fuel_Price\",\"Weekly_Sales\",\"IsHoliday\",\"Type\",\"Date_Formatted_year\",\"Date_Formatted_month\",\"Store_names\",\"Dept\",\"Date_Formatted\",\"prediction\",\"Date_Formatted_weekofyear\",\"Date_Formatted_monthname\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "Columns to be included in the output DataFrame",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "6",
      "name": "Graph Values",
      "iconImage": "/images/icons/node-icon/graph_values.svg",
      "details": "<h2>Graph Values Details</h2>\n<br>\nThis node represents variation between data of various data series in Graphical format.<br>\n<br>\nMultiple numeric columns can be plotted along Y-Coordinate. Only one can be selected along X-Coordinate.<br>\n<br>\nVariation between dataseries is plotted as graph of the selected type such as Line-Chart, Bar-Chart or so on.<br>\n<br>\n<h4>Input</h4>\n<ul>\n<li>   TITLE :- The title of a graph can be set here.</li>\n<li>   X LABEL :- X-axis label can be set here.</li>\n<li>   Y LABEL :- Y-axis label can be set here.</li>\n<li>   MAX VALUES TO DISPLAY :- The total number of the data points can be selected here.</li>\n<li>   CHART TYPE :- The desired chart can be selected from the drop-down list(Line Chart,Side By Side Bar Chart,Pie Chart,Scatter Chart)                                                 </li>\n<li>   CHART COLORS :- The different types of color can be selected for better visualization.</li>\n<li>   IS STREAMING? :- If the graph is stream graph set the option as true else false(by default it is false). </li>\n<li>   X COLUMN :- Select the column for X-axis.</li>\n<li>   Y COLUMNS :- Select the colum for Y-axis.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li>   It will plot a graph and will represent the trends between mentioned columns.</li>\n<li>   The different types of a graph can be plotted between specified columns to check the trends.</li>\n</ul>\n<h4>Types Of Chart</h4>\n<ul>\n<li>   Line Chart</li>\n<li>   Side By Side Bar Chart</li>\n<li>   Stack Bar Chart</li>\n<li>   Pie Chart</li>\n<li>   Scatter Chart</li>\n<li>   Dual Line Chart</li>\n<li>   Area Chart</li>\n</ul>\n<h4>Example</h4>\n<ul>\n<li>   A line chart allows us to track the development of several variables at the same time.</li>\n<li>   Scatter plots are used to determine whether or not two variables have a relationship or correlation.</li>\n<li>   The main motive of a stacked bar chart is to compare numeric values between levels of a categorical variable.</li>\n</ul>",
      "examples": "Example:<br>\n<br>\nLet's say you have a dataset with sales figures for different products over time. You can configure the Graph Values node as follows:<br>\n<br>\nX Column: Date<br>\nY Columns: Sales_ProductA, Sales_ProductB<br>\nChart Type: Line Chart<br>\nThe node will generate a line chart showing the sales trends for both products over time.<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.graph.NodeGraphValues",
      "x": "1147.52px",
      "y": "139.517px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Sales Trends by month of year",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "titleColor",
          "value": "#27A588",
          "widget": "textcolors",
          "title": "Title Color",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "description",
          "value": "",
          "widget": "textareafield",
          "title": "Description",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "descriptionColor",
          "value": "#6D6E70",
          "widget": "textcolors",
          "title": "Description Color",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xlabel",
          "value": "",
          "widget": "textfield",
          "title": "X Label",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ylabel",
          "value": "",
          "widget": "textfield",
          "title": "Y Label",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "maxValuesToDisplay",
          "value": "20",
          "widget": "textfield",
          "title": "Max Values To Display",
          "description": "Maximum number of values to display in result.",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "graphType",
          "value": "LINECHART",
          "widget": "enum",
          "title": "Chart Type",
          "optionsMap": {
            "LINECHART": "Line Chart",
            "COLUMNCHART": "Column Chart",
            "BARCHART": "Bar Chart",
            "PIE": "Pie Chart",
            "DONUT ": "Donut Chart",
            "SCATTERCHART": "Scatter Chart",
            "DUALLINECHART": "Dual Line Chart",
            "AREACHART": "Area Chart"
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "chartColors",
          "value": "#77C8D0,#FFE3B2,#FAA19B,#A1BDFD,#B6D7D0,#FFB2C8,#FFD5BE,#C7D2FF,#83E3F4,#D1BFFF,#649BF7,#F8C9EE,#219AAD,#FFBFA3",
          "widget": "colors",
          "title": "Chart Colors",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "isStreaming",
          "value": "false",
          "widget": "array",
          "title": "Is Streaming?",
          "description": "Whether the Graph is a Streaming Graph or not",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "markerSize",
          "value": "12",
          "widget": "textfield",
          "title": "Marker size",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xCol",
          "value": "Months",
          "widget": "variable",
          "title": "X Column",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xSortCol",
          "value": "true",
          "widget": "array",
          "title": "Sort on X Column?",
          "description": "Whether to Sort on X column or not",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "yCols",
          "value": "[\"Weekly_Sales\",\"prediction\"]",
          "widget": "variables",
          "title": "Y Columns",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ySortCol",
          "value": "",
          "widget": "variable",
          "title": "Y Sort Column",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "reNameYColumns",
          "value": "[\"Weekly_Sales:Weekly_Sales\",\"prediction:prediction\"]",
          "widget": "variables_selected",
          "title": "Rename Y Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "8",
      "name": "Graph Values",
      "iconImage": "/images/icons/node-icon/graph_values.svg",
      "details": "<h2>Graph Values Details</h2>\n<br>\nThis node represents variation between data of various data series in Graphical format.<br>\n<br>\nMultiple numeric columns can be plotted along Y-Coordinate. Only one can be selected along X-Coordinate.<br>\n<br>\nVariation between dataseries is plotted as graph of the selected type such as Line-Chart, Bar-Chart or so on.<br>\n<br>\n<h4>Input</h4>\n<ul>\n<li>   TITLE :- The title of a graph can be set here.</li>\n<li>   X LABEL :- X-axis label can be set here.</li>\n<li>   Y LABEL :- Y-axis label can be set here.</li>\n<li>   MAX VALUES TO DISPLAY :- The total number of the data points can be selected here.</li>\n<li>   CHART TYPE :- The desired chart can be selected from the drop-down list(Line Chart,Side By Side Bar Chart,Pie Chart,Scatter Chart)                                                 </li>\n<li>   CHART COLORS :- The different types of color can be selected for better visualization.</li>\n<li>   IS STREAMING? :- If the graph is stream graph set the option as true else false(by default it is false). </li>\n<li>   X COLUMN :- Select the column for X-axis.</li>\n<li>   Y COLUMNS :- Select the colum for Y-axis.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li>   It will plot a graph and will represent the trends between mentioned columns.</li>\n<li>   The different types of a graph can be plotted between specified columns to check the trends.</li>\n</ul>\n<h4>Types Of Chart</h4>\n<ul>\n<li>   Line Chart</li>\n<li>   Side By Side Bar Chart</li>\n<li>   Stack Bar Chart</li>\n<li>   Pie Chart</li>\n<li>   Scatter Chart</li>\n<li>   Dual Line Chart</li>\n<li>   Area Chart</li>\n</ul>\n<h4>Example</h4>\n<ul>\n<li>   A line chart allows us to track the development of several variables at the same time.</li>\n<li>   Scatter plots are used to determine whether or not two variables have a relationship or correlation.</li>\n<li>   The main motive of a stacked bar chart is to compare numeric values between levels of a categorical variable.</li>\n</ul>",
      "examples": "Example:<br>\n<br>\nLet's say you have a dataset with sales figures for different products over time. You can configure the Graph Values node as follows:<br>\n<br>\nX Column: Date<br>\nY Columns: Sales_ProductA, Sales_ProductB<br>\nChart Type: Line Chart<br>\nThe node will generate a line chart showing the sales trends for both products over time.<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.graph.NodeGraphValues",
      "x": "1145.53px",
      "y": "541.198px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Temperature Impact on Sales Performance",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "titleColor",
          "value": "#27A588",
          "widget": "textcolors",
          "title": "Title Color",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "description",
          "value": "",
          "widget": "textareafield",
          "title": "Description",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "descriptionColor",
          "value": "#6D6E70",
          "widget": "textcolors",
          "title": "Description Color",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xlabel",
          "value": "",
          "widget": "textfield",
          "title": "X Label",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ylabel",
          "value": "",
          "widget": "textfield",
          "title": "Y Label",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "maxValuesToDisplay",
          "value": "20",
          "widget": "textfield",
          "title": "Max Values To Display",
          "description": "Maximum number of values to display in result.",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "graphType",
          "value": "LINECHART",
          "widget": "enum",
          "title": "Chart Type",
          "optionsMap": {
            "LINECHART": "Line Chart",
            "COLUMNCHART": "Column Chart",
            "BARCHART": "Bar Chart",
            "PIE": "Pie Chart",
            "DONUT ": "Donut Chart",
            "SCATTERCHART": "Scatter Chart",
            "DUALLINECHART": "Dual Line Chart",
            "AREACHART": "Area Chart"
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "chartColors",
          "value": "#77C8D0,#FFE3B2,#FAA19B,#A1BDFD,#B6D7D0,#FFB2C8,#FFD5BE,#C7D2FF,#83E3F4,#D1BFFF,#649BF7,#F8C9EE,#219AAD,#FFBFA3",
          "widget": "colors",
          "title": "Chart Colors",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "isStreaming",
          "value": "false",
          "widget": "array",
          "title": "Is Streaming?",
          "description": "Whether the Graph is a Streaming Graph or not",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "markerSize",
          "value": "12",
          "widget": "textfield",
          "title": "Marker size",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xCol",
          "value": "Temperature",
          "widget": "variable",
          "title": "X Column",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xSortCol",
          "value": "true",
          "widget": "array",
          "title": "Sort on X Column?",
          "description": "Whether to Sort on X column or not",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "yCols",
          "value": "[\"Weekly_Sales\",\"prediction\"]",
          "widget": "variables",
          "title": "Y Columns",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ySortCol",
          "value": "",
          "widget": "variable",
          "title": "Y Sort Column",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "reNameYColumns",
          "value": "[\"Weekly_Sales:Weekly_Sales\",\"prediction:prediction\"]",
          "widget": "variables_selected",
          "title": "Rename Y Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "9",
      "name": "Row Filter",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node creates a new DataFrame containing the rows that satisfy the given condition",
      "details": "<h2>Details</h2>\n<br>\nRow filter allows the user to filter out rows that do not meet a set condition. Rows that meet the condition are passed on to the next node in a new dataframe.<br>",
      "examples": "<h2>Examples of Conditional Expression</h2>\n<br>\nBelow are some examples of the Conditions Expression which can be used.<br>\n<br>\n<ul>\n<li> col1 > 5 AND col2 > 3</li>\n</ul>\n<ul>\n<li> name is not NULL</li>\n</ul>\n<ul>\n<li> name is NULL</li>\n</ul>\n<ul>\n<li> usd_pledged_real > 0 and (category = \"Narrative Film\" or category == \"Music\") and goal > 100</li>\n</ul>\n<ul>\n<li> dt > '2021-09-03'  (dt column is of type date)</li>\n</ul>\n<ul>\n<li> datetime > '2011-01-01 00:00:00.0'     (datetime column is of type timestamp)</li>\n</ul>\n<ul>\n<li> datetime > '2011-01-01 00:00:00.0' and datetime < '2016-01-01 00:00:00.0'</li>\n</ul>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeRowFilter",
      "x": "634.733px",
      "y": "572.74px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "conditionExpr",
          "value": "Weekly_Sales > 0 AND\r\nDate_Formatted_year == 2012",
          "widget": "code_editor",
          "type": "sparksql",
          "title": "Conditional Expression",
          "description": "The filtering condition. Rows not satisfying given condition will be excluded from output DataFrame. eg: usd_pledged_real > 0 and (category = 1 or category == 2) and goal > 100",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "11",
      "name": "Spark Predict",
      "description": "Predict node takes in a DataFrame and Model and makes predictions",
      "details": "Predict node takes in a DataFrame and Model and makes predictions on the data using the Model.<br>",
      "examples": "",
      "type": "ml-predict",
      "nodeClass": "fire.nodes.ml.NodePredict",
      "x": "480.219px",
      "y": "463.212px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "12",
      "name": "Regression Evaluator",
      "description": "Evaluator for regression, which expects two input columns: prediction and label.",
      "details": "Evaluator for regression, which expects two input columns: prediction and label.<br>\n<br>\nMore details are available at Apache Spark ML docs page:<br>\n<br>\n<a href=\"https://spark.apache.org/docs/latest/api/java/org/apache/spark/ml/evaluation/RegressionEvaluator.html\" target=\"_blank\">spark.apache.org/docs/latest/api/java/org/apache/spark/ml/evaluation/RegressionEvaluator.html</a><br>",
      "examples": "",
      "type": "ml-evaluator",
      "nodeClass": "fire.nodes.ml.NodeRegressionEvaluator",
      "x": "419.205px",
      "y": "663.188px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "labelCol",
          "value": "Weekly_Sales",
          "widget": "variable",
          "title": "Label Column",
          "description": "The label column for model fitting.",
          "datatypes": [
            "double"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "predictionCol",
          "value": "prediction",
          "widget": "variable",
          "title": "Prediction Column",
          "description": "The prediction column.",
          "datatypes": [
            "double"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "scala"
    },
    {
      "id": "15",
      "name": "Spark ML Model Load",
      "iconImage": "fa fa-qrcode",
      "details": "This node loads a previously saved Spark ML model into the workflow. This allows you to reuse trained models for scoring new data or further analysis.<br>",
      "examples": "Configuration:<br>\n<br>\nOutput Storage Level: Choose the storage level for the loaded model.<br>\nPath: Specify the path to the saved model file. You can use the \"Browse File System\" button to navigate and select the model file.<br>\nStatic Path: Set this to true if the model path is a static path.<br>\nModel Type: Specify the type of the model (e.g., KMeans, LogisticRegression, RandomForest).<br>\n<br>\nLet's say you have trained a Spark ML model for customer churn prediction and want to save it ,<br>\n<br>\nPath:data/CPG/Customer-Churn-Prediction/ModelName<br>\nStatic Path:true<br>\n<br>\nit would save the model at the given location with the model name,and can be used later.<br>",
      "type": "ml-modelload",
      "nodeClass": "fire.nodes.ml.NodeModelLoad",
      "x": "356.219px",
      "y": "154.208px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "path",
          "value": "data/CPG/CPG-Sales-Forecasting/${Model}",
          "widget": "textfield",
          "title": "Path",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "fixedPath",
          "value": "true",
          "widget": "array",
          "title": "Static path",
          "description": "Set this to true if you have saved the model to a static path(without UUID) while training the model.",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "false",
            "true"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "modelType",
          "value": "RANDOM_FOREST_REGRESSION",
          "widget": "array",
          "title": "Model Type",
          "description": "Type of ML model to load",
          "optionsArray": [
            "AFT_SURVIVAL_REGRESSION",
            "ALS",
            "CHI_SQ_SELECTOR",
            "COUNT_VECTORIZER",
            "CROSS_VALIDATOR",
            "DISTRIBUTED_LDA",
            "DECISION_TREE_CLASSIFICATION",
            "DECISION_TREE_REGRESSION",
            "GBT_CLASSIFICATION",
            "GBT_REGRESSION",
            "IDF",
            "ISOTONIC_REGRESSION",
            "KMEANS",
            "LDA",
            "LINEAR_REGRESSION",
            "LOGISTIC_REGRESSION",
            "MIN_MAX_SCALER",
            "NAIVE_BAYES",
            "PCA",
            "PIPELINE",
            "RANDOM_FOREST_CLASSIFICATION",
            "RANDOM_FOREST_REGRESSION",
            "STANDARD_SCALER",
            "STRING_INDEXER",
            "STRING_INDEXER_ADVANCED",
            "ONE_HOT_ENCODER_ADVANCED",
            "MAX_ABS_SCALER",
            "ROBUST_SCALER",
            "IMPUTER",
            "ONE_HOT_ENCODER_ADVANCED",
            "NORMALIZER",
            "VECTOR_INDEXER",
            "WORD2VEC"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "scala"
    },
    {
      "id": "16",
      "name": "Read Parquet",
      "iconImage": "fa fa-th-list",
      "description": "Dataset Node for reading Apache Parquet Files",
      "details": "<h2> Read Parquet Node Details</h2>\n<br>\nThis node reads a Parquet file and creates the DataFrame which contains the schema and data of the specified Parquet file.<br>\n<br>\n<h4> Parameters to be set:</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> PATH : Specify the path of the Parquet file to be read.</li>\n<li> ADD INPUT FILE NAME : Select if the Parquet file name needs to be added to the DataFrame.</li>\n<li> SCHEMA COLUMNS : Refresh the schema of the DataFrame.</li>\n</ul>",
      "examples": "<h2> Read Parquet Node Examples</h2>\n<br>\n<h4> Example of Values</h4>\n<ul>\n<li> PATH : /tmp/sample.parquet</li>\n<li> ADD INPUT FILE NAME : False</li>\n<li> SCHEMA COLUMNS : Refresh the schema of the DataFrame.</li>\n</ul>",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetParquet",
      "x": "204.215px",
      "y": "387.219px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "path",
          "value": "data/CPG/CPG-Sales-Forecasting/Test-Data",
          "widget": "textfield",
          "title": "Path",
          "description": "Path of the Parquet file/directory",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "addInputFileName",
          "value": "false",
          "widget": "array",
          "title": "Add Input File Name",
          "description": "Add the new field:input_file_name",
          "optionsArray": [
            "false",
            "true"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[\"Store\",\"Temperature\",\"CPI\",\"Unemployment\",\"Fuel_Price\",\"Weekly_Sales\",\"IsHoliday\",\"Type\",\"Dept\",\"Date_Formatted\",\"Date_Formatted_year\",\"Date_Formatted_month\",\"Date_Formatted_weekofyear\",\"Date_Formatted_monthname\",\"Store_names\",\"MarkDown1\",\"MarkDown2\",\"MarkDown3\",\"MarkDown4\",\"MarkDown5\",\"Size\",\"Vector_Data\"]",
          "widget": "schema_col_names",
          "title": "Column Names for the Parquet",
          "description": "Output Columns of the Parquet",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"INTEGER\",\"DATE\",\"INTEGER\",\"INTEGER\",\"INTEGER\",\"STRING\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"VECTORUDT\"]",
          "widget": "schema_col_types",
          "title": "Column Types for the Parquet",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Column Formats for the Parquet",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "20",
      "name": "Case When",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node creates a new Dataframe with a new column appended to it containing value based on the condition met",
      "details": "<h2>Case When Node Details</h2>\n<br>\nThis node creates a new Dataframe with new output column added to the incoming dataframe. Value of the new column is set based on the Condition met and corresponding value fetched.<br>\n<br>\nIt evaluates a set of expressions and outputs value of the expression that evaluates to true. If none of the expressions evaluates to true then it outputs value assigned in the 'else' section.<br>\n<br>\n<h3>When conditions can be entered as followings:</h3>\n<br>\n<h4>Using Comparison Operators</h4>\n<ul>\n<li>\tComparing a value against a String column\t\t->\t\tExample:\tPRD_CATEGORY = 'MACHINE'</li>\n<li>\tChecking for not equal to condition against a String column\t\t->\t\tExample:\tPRD_CATEGORY != 'MACHINE'</li>\n<li>\tComparing a value against a Numeric column\t\t->\t\tExample:\tAGE >= 35</li>\n<li>\tUsing a Mathematical operator\t\t\t\t\t->\t\tExample:\t(AGE * 10) < 90</li>\n<li> Checking for multiple values using IN and NOT IN  ->  Example:    DEPT IN ('HR', 'SALES')</li>\n</ul>\n<h4>Using Logical Operators To Combine Multiple Expressions</h4>\n<ul>\n<li>\tChecking for two conditions in single expression\t->\t\tExample:\tDEPT = 'HR' AND AGE >= 25</li>\n<li>\tChecking for two conditions in single expression\t\t->\t\tExample:\tAGE >= 35 OR AGE <45</li>\n</ul>\n<h4>Checking For Null Value</h4>\n<ul>\n<li>\tChecking whether a column value is Null\t\t\t->\t\tExample:\tDEPT IS NULL</li>\n</ul>\n<h4>Checking For Blank Value</h4>\n<ul>\n<li>\tChecking whether value in a column is empty\t\t->\t\tExample:\tTRIM(DATE_OF_JOINING) = ''</li>\n</ul>\n<h4>Checking Against Boolean Value</h4>\n<ul>\n<li>\tChecking whether a Boolean column is True or False\t\t->\t\tExample:\tIS_DATEGREATER = TRUE</li>\n</ul>\n<h4>Checking Against Date-Time Value</h4>\n<ul>\n<li>\tComparing a Date column against a Date value\t->\t\tExample:\tCURR_DATE > TO_DATE('2021-12-12','yyyy-MM-dd')</li>\n<li>\tComparing a Date-Time column against a Date-Time value\t->\t\tExample:\tCURR_TIME > TO_TIMESTAMP('2021-12-12 12:12:12','yyyy-MM-dd HH:mm:ss')</li>\n</ul>\n<br>\n<h3>Values can entered as followings:</h3>\n<br>\n<h4>Assigning value from a column</h4>\n<ul>\n<li> \tAssigning value from a column[DEPT] to output (Value)\t\t->\t\tExample:\tDEPT</li>\n<li> \tApplying a operator before assigning value from a column\t\t->\t\tExample:\tSALARY * 10</li>\n</ul>\n<h4>Assigning a String or Number constant</h4>\n<ul>\n<li>\tAssigning a String constant\t\t->\t\tExample:\t'DEPT IS HR'</li>\n<li>\tAssigning a Number constant\t\t->\t\tExample:\t1000</li>\n</ul>\n<h4>Assigning Current Date and Current Timestamp</h4>\n<ul>\n<li>\tAssigning Current Date\t\t->\t\tExample:\tCURRENT_DATE</li>\n<li>\tAssigning Current Date-Time\t\t->\t\tExample:\tCURRENT_TIMESTAMP</li>\n</ul>",
      "examples": "<h2>Case When Node Examples</h2>\n<br>\n<h4>Incoming Dataframe</h4>\n<br>\nIn this example we have considered a Incoming Dataframe with following rows:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT       |    AGE    |    DATE_OF_JOINING   |    PERFORMANCE     |    SALARY<br>\n------------------------------------------------------------------------------------------------------------------<br>\nE01       |    DAVID       |    HR         |    25     |    2021-01-01        |    GOOD            |    12000<br>\nE02       |    JOHN        |    SALES      |    35     |    2019-05-04        |    VERY GOOD       |    11000<br>\nE03       |    MARTIN      |    MARKETING  |    40     |    2018-06-07        |    AVERAGE         |    34000<br>\nE04       |    TONY        |    MARKETING  |    45     |    2017-02-01        |    VERY VERY GOOD  |    12500<br>\nE05       |    MARK        |    HR         |    25     |    2020-12-21        |    BAD             |    78999<br>\n<br>\n<h4>CaseWhen Node Configuration</h4>\n<br>\nCaseWhen node is configured as below to compute values for the output column:<br>\n<br>\nWHEN CONDITION                        |        VALUE<br>\n------------------------------------------------------------------<br>\nSALARY < 12500                        |        'FIRST_GRADE'<br>\nSALARY>= 12500 AND SALARY < 30000     |        'SECOND_GRADE'<br>\nSALARY >- 30000 AND SALARY < 70000    |        'THIRD_GRADE'<br>\nELSE                                  |        'FOURTH_GRADE'<br>\n<br>\n[ELSE] is the default condition processed if no other condition is met<br>\n<br>\n<h4>Node Output</h4>\n<br>\nOutput Dataframe would be created as below where value of [SALARY] is compared against [WHEN CONDITION] and [VALUE] is fetched for the output column [SALARY_GRADE]:<br>\n<br>\nEMP_CD    |    EMP_NAME    |    DEPT       |    AGE    |    DATE_OF_JOINING   |    PERFORMANCE     |    SALARY    |    SALARY_GRADE<br>\n---------------------------------------------------------------------------------------------------------------------------------------<br>\nE01       |    DAVID       |    HR         |    25     |    2021-01-01        |    GOOD            |    12000     |    FIRST_GRADE<br>\nE02       |    JOHN        |    SALES      |    35     |    2019-05-04        |    VERY GOOD       |    11000     |    FIRST_GRADE<br>\nE03       |    MARTIN      |    MARKETING  |    40     |    2018-06-07        |    AVERAGE         |    34000     |    THIRD_GRADE<br>\nE04       |    TONY        |    MARKETING  |    45     |    2017-02-01        |    VERY VERY GOOD  |    12500     |    SECOND_GRADE<br>\nE05       |    MARK        |    HR         |    25     |    2020-12-21        |    BAD             |    78999     |    FOURTH_GRADE<br>\n<br>\n<h4> Values can also be assigned based on the value of another column</h4>\n<br>\nif CaseWhen node is configured as below to compute values for the output column:<br>\n<br>\nWHEN CONDITION                        |        VALUE<br>\n------------------------------------------------------------------<br>\nSALARY IS NULL                        |        AGE<br>\nELSE                                  |        SALARY<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeCaseWhen",
      "x": "968.316px",
      "y": "485.326px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputCol",
          "value": "Months",
          "widget": "textfield",
          "title": "Output Column Name",
          "description": "output column name",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "whenConditions",
          "value": "[\"Date_Formatted_monthname == 'January'\",\"Date_Formatted_monthname == 'February'\",\"Date_Formatted_monthname == 'March'\",\"Date_Formatted_monthname == 'April'\",\"Date_Formatted_monthname == 'May'\",\"Date_Formatted_monthname == 'June'\",\"Date_Formatted_monthname == 'July'\",\"Date_Formatted_monthname == 'August'\",\"Date_Formatted_monthname == 'September'\",\"Date_Formatted_monthname == 'October'\",\"Date_Formatted_monthname == 'November'\",\"Date_Formatted_monthname == 'December'\"]",
          "widget": "key_array",
          "type": "sparksql",
          "title": "Case Condition",
          "description": "When Condition",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": true,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "values",
          "value": "[\"'01-Jan'\",\"'01-Feb'\",\"'01-Mar'\",\"'01-Apr'\",\"'01-May'\",\"'01-Jun'\",\"'01-Jul'\",\"'01-Aug'\",\"'01-Sep'\",\"'01-Oct'\",\"'01-Nov'\",\"'01-Dec'\"]",
          "widget": "value_array",
          "type": "sparksql",
          "title": "Value",
          "description": "Value when this condition is true",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": true,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "finallyElse",
          "value": "",
          "widget": "key_textfield",
          "title": "Else Value",
          "description": "else",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": true,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "21",
      "name": "Sort By",
      "iconImage": "fa fa-tumblr-square",
      "description": "It sorts the incoming DataFrame on the fields specified.",
      "details": "This node sorts the incoming DataFrame based on the values present in columns specified.<br>\n<br>\nMultiple columns can be selected for sorting data. Data can be sorted in Ascending or Descending order.<br>",
      "examples": "Incoming Dataframe has following rows:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\n<br>\nIf SortBy node is configured to sort data in descending order of values present in [CUST_NAME] column then outgoing Dataframe would be created as below:<br>\n<br>\nCUST_CD    |    CUST_NAME    |    AGE    |    DATE_OF_JOINING    |    SALARY<br>\n-------------------------------------------------------------------------------------<br>\nC03        |    ROBIN        |    30     |    10-10-2015         |    EUR 15000.00<br>\nC01        |    MATT         |    50     |    12-02-2002         |    USD 200000.00<br>\nC04        |    MARCUS       |    35     |    01-01-2021         |    AUD 350000.00<br>\nC02        |    LISA         |    45     |    15-11-2020         |    GBP 100000.00<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSortBy",
      "x": "981.208px",
      "y": "83.2049px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "sortByColNames",
          "value": "[\"Months\"]",
          "widget": "variables_list_select",
          "title": "Columns",
          "description": "Columns on which to Sort By",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ascDesc",
          "value": "[\"ASC\"]",
          "widget": "variables_list_array",
          "title": "Sorting Order",
          "description": "Whether to sort in ascending or descending order",
          "optionsArray": [
            "DESC",
            "ASC"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "22",
      "name": "Bar Group Chart",
      "iconImage": "/images/icons/node-icon/bar_group_chart.svg",
      "details": "<h2> Bar Group Chart Node</h2>\n<br>\nThis node creates a grouped bar chart to visualize data with multiple categories. Each group of bars represents a category, and the bars within each group represent different values depending on the grouping criteria.<br>",
      "examples": "<h2> Bar Group Chart Node Example</h2>\n<br>\nScenario:<br>\n<br>\nLet's say you have a dataset with sales figures for different products across multiple regions. You can use the Bar Group Chart node to visualize the sales for each product in each region.<br>\n<br>\nConfiguration:<br>\n<br>\n1. **X Label:** Set the label for the X-axis (e.g., \"Region\").<br>\n2. **Y Label:** Set the label for the Y-axis (e.g., \"Sales\").<br>\n3. **X Axis Sorting Order:** Choose how to sort the groups on the X-axis (e.g., alphabetically, numerically).<br>\n4. **Max Values to Display:** Limit the number of groups displayed on the chart.<br>\n5. **Chart Type:** Select the type of chart (e.g., grouped bar chart, stacked bar chart).<br>\n6. **Chart Colors:** Customize the color palette for the bars.<br>\n7. **Is Streaming:** Enable or disable streaming updates to the chart.<br>\n8. **Material Chart:** Use Material Design for the chart's appearance.<br>\n9. **Use Percent:** Display the Y-axis values as percentages.<br>\n10. **X Column:** Select the column to be used for the X-axis (e.g., \"Region\").<br>\n11. **Group By Column:** Select the column to group the data by (e.g., \"Product\").<br>\n12. **Y Column:** Select the column to be used for the Y-axis (e.g., \"Sales\").<br>\n<br>\nOutput:<br>\n<br>\nThe node will generate a grouped bar chart visualizing the selected data. Each group of bars will represent a product, and the height of each bar will represent the sales for that product in a particular region.<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.graph.NodeBarGroupChart",
      "x": "828.215px",
      "y": "411.219px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Store-wise Sales Prediction across months",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "titleColor",
          "value": "#27A588",
          "widget": "textcolors",
          "title": "Title Color",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "description",
          "value": "",
          "widget": "textareafield",
          "title": "Description",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "descriptionColor",
          "value": "#6D6E70",
          "widget": "textcolors",
          "title": "Description Color",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xlabel",
          "value": "",
          "widget": "textfield",
          "title": "X Label",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "ylabel",
          "value": "",
          "widget": "textfield",
          "title": "Y Label",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xSort",
          "value": "",
          "widget": "array",
          "title": "X Axis Sorting order",
          "description": "Choose sorting for X-axis if needed.",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "asc",
            "desc"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "maxValuesToDisplay",
          "value": "20",
          "widget": "textfield",
          "title": "Max Values To Display",
          "description": "Maximum number of values to display in result.",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "graphType",
          "value": "VERTICALBARGROUP",
          "widget": "enum",
          "title": "Chart Type",
          "optionsMap": {
            "VERTICALBAR": "Vertical Bar Chart"
          },
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "chartColors",
          "value": "#77C8D0,#FFE3B2,#FAA19B,#A1BDFD,#B6D7D0,#FFB2C8,#FFD5BE,#C7D2FF,#83E3F4,#D1BFFF,#649BF7,#F8C9EE,#219AAD,#FFBFA3",
          "widget": "colors",
          "title": "Chart Colors",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "isStreaming",
          "value": "false",
          "widget": "array",
          "title": "Is Streaming?",
          "description": "Whether the Graph is a Streaming Graph or not",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "material",
          "value": "false",
          "widget": "array",
          "title": "Material Chart",
          "description": "Select true will use material design",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "percent",
          "value": "false",
          "widget": "array",
          "title": "Use percent",
          "description": "Select true to present data in percent",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "xCol",
          "value": "Store_names",
          "widget": "variable",
          "title": "X Column",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "groupByCol",
          "value": "Months",
          "widget": "variable",
          "title": "Group by Column",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "yCol",
          "value": "prediction",
          "widget": "variable",
          "title": "Y Column",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "23",
      "name": "Print N Rows",
      "iconImage": "/images/icons/node-icon/print_n_rows.svg",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "<h2>Print N Rows Node Details</h2>\n<br>\nThis node is used to print the first N rows from the incoming dataframe.<br>\n<br>\nThe Number of rows that needs to be printed can be configured in the node.<br>\n<br>\n<h4>Input Parameters</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> TITLE : Enter a short description for the type of information being displayed.</li>\n<li> NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N=10).</li>\n<li> DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li> This node can be used to view, analyze and validate the output of the Dataframe.</li>\n</ul>",
      "examples": "when input 5 in no of rows,it will show first 5 rows of the table as follows<br>\n<br>\nPartID\tSupplierID\tPartName\t<br>\n<br>\nP9271\t  S798\t    Part_D\t<br>\nP523\t  S955\t    Part_K\t<br>\nP3201\t  S332\t    Part_M\t<br>\nP9634\t  S527\t    Part_G\t<br>\nP9345\t  S850\t    Part_M<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "936.097px",
      "y": "298.111px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Row Values",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "24",
      "name": "SQL",
      "iconImage": "fa fa-tumblr-square",
      "description": "This node runs the given SQL on the incoming DataFrame",
      "details": "<h2>SQL Details</h2>\n<br>\nSQL node receives an input data frame. It creates a temporary table on top of that data frame. It executes the provided SQL in the node on the temporary table.<br>\n<br>\nThe resulting data frame of running the SQL is passed on to the next node.<br>",
      "examples": "<h2>SQL Examples</h2>\n<br>\nBelow are some examples of SQL. <br>\n<br>\nTemporary table name used : tempTable<br>\n<br>\nThe schema of the Input Dataframe is : id, price, lotsize, bedrooms, bathrms, stories, driveway, recroom, fullbase, gashw, airco, garagepl, prefarea<br>\n<br>\n<h4> find the average price of houses</h4>\n<br>\nselect avg(price) as avg_price from tempTable<br>\n<br>\n<br>\n<h4> find bedrooms with avg price greater than 10000</h4>\n<br>\nselect bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000<br>\n<br>\n<br>\n<h4> details of houses with bedrooms avg price greater than 10000</h4>\n<br>\nselect tempTable.* , inner_table.avg_price from<br>\n(select bedrooms, avg_price from<br>\n(select bedrooms, avg(price) as avg_price from tempTable group by bedrooms) as temp where avg_price > 10000) as inner_table<br>\nJOIN tempTable ON(inner_table.bedrooms = tempTable.bedrooms)<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSQL",
      "x": "724.205px",
      "y": "235.222px",
      "hint": "Whenever the table is changed, go to InferSchema tab and Infer the Schema",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "tempTable",
          "value": "fire_temp_table",
          "widget": "textfield",
          "title": "Temp Table",
          "description": "Temp Table Name to be used",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "sql",
          "value": "SELECT\r\n  Date_Formatted_year,\r\n  Date_Formatted_month,\r\n  Months,\r\n  AVG(Weekly_Sales) AS avg_weekly_sales,\r\n  AVG(prediction) AS avg_prediction\r\nFROM fire_temp_table\r\nGROUP BY\r\n  Date_Formatted_year,\r\n  Date_Formatted_month,\r\n  Months\r\nORDER BY\r\n  Date_Formatted_year,\r\n  Months;",
          "widget": "code_editor",
          "type": "sql_mysql",
          "title": "SQL",
          "description": "SQL to be run",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[]",
          "widget": "schema_col_names",
          "title": "Output Column Names",
          "description": "Name of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[]",
          "widget": "schema_col_types",
          "title": "Output Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[]",
          "widget": "schema_col_formats",
          "title": "Output Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    },
    {
      "id": "25",
      "name": "Print N Rows",
      "iconImage": "/images/icons/node-icon/print_n_rows.svg",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "<h2>Print N Rows Node Details</h2>\n<br>\nThis node is used to print the first N rows from the incoming dataframe.<br>\n<br>\nThe Number of rows that needs to be printed can be configured in the node.<br>\n<br>\n<h4>Input Parameters</h4>\n<ul>\n<li> OUTPUT STORAGE LEVEL : Keep this as DEFAULT.</li>\n<li> TITLE : Enter a short description for the type of information being displayed.</li>\n<li> NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N=10).</li>\n<li> DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.</li>\n</ul>\n<h4>Output</h4>\n<ul>\n<li> This node can be used to view, analyze and validate the output of the Dataframe.</li>\n</ul>",
      "examples": "when input 5 in no of rows,it will show first 5 rows of the table as follows<br>\n<br>\nPartID\tSupplierID\tPartName\t<br>\n<br>\nP9271\t  S798\t    Part_D\t<br>\nP523\t  S955\t    Part_K\t<br>\nP3201\t  S332\t    Part_M\t<br>\nP9634\t  S527\t    Part_G\t<br>\nP9345\t  S850\t    Part_M<br>",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "795.104px",
      "y": "93.1111px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "title",
          "value": "Row Values",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "all"
    }
  ],
  "edges": [
    {
      "source": "11",
      "target": "12",
      "id": 1
    },
    {
      "source": "4",
      "target": "3",
      "id": 2
    },
    {
      "source": "5",
      "target": "4",
      "id": 3
    },
    {
      "source": "4",
      "target": "8",
      "id": 4
    },
    {
      "source": "11",
      "target": "9",
      "id": 5
    },
    {
      "source": "9",
      "target": "2",
      "id": 6
    },
    {
      "source": "9",
      "target": "5",
      "id": 7
    },
    {
      "source": "15",
      "target": "11",
      "id": 8
    },
    {
      "source": "16",
      "target": "11",
      "id": 9
    },
    {
      "source": "4",
      "target": "20",
      "id": 10
    },
    {
      "source": "21",
      "target": "6",
      "id": 11
    },
    {
      "source": "20",
      "target": "22",
      "id": 12
    },
    {
      "source": "20",
      "target": "23",
      "id": 13
    },
    {
      "source": "20",
      "target": "24",
      "id": 14
    },
    {
      "source": "24",
      "target": "25",
      "id": 15
    },
    {
      "source": "23",
      "target": "21",
      "id": 16
    }
  ],
  "dataSetDetails": [],
  "engine": "scala"
}