{
  "name": "05-PLPS-V2",
  "uuid": "17b5d7dc-b282-4861-8af1-9db56cf46571",
  "category": "PLPS-ICF Generator",
  "parameters": " --var textField1=CSP --var destinationPath1=/home/ubuntu/coreinsights-data/data/GENAI/Regulatory-Navigator/CSP/uploads/Prot_000.pdf --var textField=CSP --var refresh=true --var view4=false --var folderPath=/home/ubuntu/coreinsights-data/data/GENAI/Regulatory-Navigator/CSP/uploads/Prot_000.pdf --var folderPath3='/home/ubuntu/coreinsights-data/data/GENAI/Regulatory-Navigator/CSP/uploads/Prot_000.pdf' --var destinationPath=/data/GENAI/Regulatory-Navigator/CSP/uploads/ --var all=true --var toc='1.0 TRIAL SUMMARY','2.0 TRIAL DESIGN','3.0 OBJECTIVE(S) & HYPOTHESIS(ES)','4.0 BACKGROUND & RATIONALE','5.0 METHODOLOGY','6.0 TRIAL FLOW CHART','7.0 TRIAL PROCEDURES','8.0 STATISTICAL ANALYSIS PLAN','9.0 LABELING, PACKAGING, STORAGE AND RETURN OF CLINICAL SUPPLIES','10.0 ADMINISTRATIVE AND REGULATORY DETAILS','11.0 LIST OF REFERENCES','12.0 APPENDICES','13.0 SIGNATURES' --var generateIcf=false --var generateIcf1=true --var selectExecution=1 --var refresh1=false --var folderPath2=/data/GENAI/Regulatory-Navigator/CSP/output/PLPS --var folderPath1=/data/GENAI/Regulatory-Navigator/CSP/output/ICF/ --var checkbox2=false --var view2=false --var download=false",
  "nodes": [
    {
      "id": "1",
      "name": "PySpark",
      "description": "This node runs any given PySpark code. The input dataframe is passed into the function myfn as a parameter.",
      "details": "",
      "examples": "",
      "type": "pyspark",
      "nodeClass": "fire.nodes.etl.NodePySpark",
      "x": "523px",
      "y": "300px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "code",
          "value": "'''\nInput:\n  spark: spark session \n  workflowContext:  workflowcontext object \n  id: node number \n  inDF: input pyspark dataframe \n  cust_dict: Dictionary of the workflow variables passed from previous node \nOutput:\n  outDF: return pyspark dataframe i.e outDF \n ''' \n \nfrom pyspark.sql.types import * \nfrom pyspark.sql.functions import * \nfrom pyspark.sql import * \nfrom fire.workflowcontext import WorkflowContext\nfrom bs4 import BeautifulSoup\nimport pymupdf\nimport pandas as pd\nimport re\nfrom xhtml2pdf import pisa\nfrom io import BytesIO\nimport os\n\ndef html_to_pdf(html_string, output_filename):\n    with BytesIO() as pdf_buffer:\n        pisa.CreatePDF(BytesIO(html_string.encode('utf-8')), dest=pdf_buffer)\n        pdf_buffer.seek(0)\n        with open(output_filename, 'wb') as output_file:\n            output_file.write(pdf_buffer.read())\n\n\ndef save_list_to_txt(file_path1, string_list):\n    with open(file_path1, 'w') as file:\n        for item in string_list:\n            file.write(item + ', \\n')\n\ndef extract_text_from_pdf(pdf_path):\n    # Open the PDF file\n    document = pymupdf.open(pdf_path)\n    text = \"\"\n    # Iterate over each page in the PDF\n    for page_num in range(document.page_count):\n        # Get a page\n        page = document[page_num]\n        # Extract text from the page\n        text += page.get_text()\n    # Close the PDF file\n    document.close()\n    return text\n  \ndef myfn(spark: SparkSession, workflowContext: WorkflowContext, id: int, inDF: DataFrame, cust_dict:dict):\n      # Path to your PDF file\n      # pdf_path = '/home/sparkflows/fire-data/Spotline/Clinical-Study-Protocols/Prot_000.pdf'\n    import glob\n    # mylist = [f for f in glob.glob(\"/home/sparkflows/fire-data/Spotline/CSP/uploads/*.pdf\")]\n    # pdf_path = \"${folderPath3}\"# mylist[0]\n      # Extract text\n    pdf_text = extract_text_from_pdf(\"${folderPath}\")\n    with open('${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/TOC_output/Table_of_content.txt', 'r', encoding='utf-8') as file:\n        html_content = file.read()\n    h2_pattern = r'<h2[^>]*>(.*?)</h2>'\n    h2_tags = re.findall(h2_pattern, html_content, re.DOTALL)\n    List1 = []\n    for h2 in h2_tags:\n        List1.append(h2.strip())    \n    input_string = \"${toc}\"\n    # print(List1, \"List1\")\n    extracted_text = re.findall(r\"'(.*?)'\", input_string)\n    select_topic = extracted_text\n    # ['TRIAL SUMMARY','TRIAL DESIGN','OBJECTIVE(S) & HYPOTHESIS(ES)','BACKGROUND & RATIONALE','METHODOLOGY','TRIAL FLOW CHART','TRIAL PROCEDURES','TRIAL GOVERNANCE AND OVERSIGHT','STATISTICAL ANALYSIS PLAN','LABELING, PACKAGING, STORAGE AND RETURN OF CLINICAL SUPPLIES','ADMINISTRATIVE AND REGULATORY DETAILS','LIST OF REFERENCES','APPENDICES','SIGNATURES'] \n    # [\"${selectBoxes}\"]\n    #'METHODOLOGY', 'STATISTICAL ANALYSIS PLAN']\n    \n    \n    # Extract the last line after the final full stop\n    last_line = pdf_text.split('.')[-1].strip().split('\\n')[-1].strip()\n    \n    # Create the list of lists by matching the selected topics\n    output = []\n    for topic in select_topic:\n        if topic in List1:\n            index = List1.index(topic)\n            # Ensure there's a next element in the list\n            if index + 1 < len(List1):\n                output.append([List1[index], List1[index + 1]])\n            else:\n                # For the last item, add the extracted last line instead of the full sentence\n                output.append([List1[index], last_line])\n    \n    def extract_all_text_between_headings(text, start_heading, end_heading):\n        # Regular expression to extract all text between headings\n        pattern = re.compile(\n            rf'{re.escape(start_heading)}(.*?){re.escape(end_heading)}',\n            re.DOTALL | re.IGNORECASE  # Case-insensitive matching\n        )\n        \n        # Find all matches\n        matches = pattern.findall(text)\n        # Clean up the matches (strip leading/trailing whitespace)\n        cleaned_matches = [match.strip() for match in matches]\n        \n        return cleaned_matches\n    \n    selected_text = []\n    # Define your headings\n    for i in output:\n        start_heading = i[0]\n        end_heading = i[1]\n        \n        # Extract all occurrences of text between headings\n        all_texts = extract_all_text_between_headings(pdf_text, start_heading, end_heading)\n        \n        def get_max_length_sentence(sentences):\n            \"\"\"\n            Returns the longest sentence (by character length) from a list of sentences.\n            Parameters:\n            sentences (list): A list of sentences (strings).\n            Returns:\n            str: The sentence with the maximum length. Returns None if the list is empty.\n            \"\"\"\n            if not sentences:  # Check if the list is empty\n                return None  # Return None if the list is empty\n            # Find the sentence with the maximum length manually\n            max_sentence = sentences[0]\n            for sentence in sentences[1:]:\n                if len(sentence) > len(max_sentence):\n                    max_sentence = sentence\n            return max_sentence\n        \n        longest_sentence = get_max_length_sentence(all_texts)\n        selected_text.append(longest_sentence)\n    GOOGLE_API_KEY='$Gemini_API_reg'\n    import json\n    import requests\n    payload = {\n            \"contents\": [\n                {\n                    \"parts\": [\n                        {\"text\": f\"\"\" You are a helpful assistant,\n                        Create a detailed Plain Language Protocol Synopsis (PLPS) that summarizes the clinical trial described in the attached document. The synopsis should be accessible for non-expert audiences and aim for a comprehensive explanation across approximately 2000 words. Structure the summary to cover the following areas, with clear and visually appealing HTML formatting:\n        \n        Introduction and Background (200-400 words):\n        \n        Use <h1> or <h2> tags for the main headings and subheadings.\n\t1. Study Overview (1000+ words)\n\tIntroduce the Study: Start by describing the study in a broad context to help readers understand why the research is necessary and what potential impact it could have.\n\n\tExample: \"This clinical study, led by [Sponsor/Institution], investigates a novel approach for treating [Condition] through a carefully designed protocol. [Condition] is a complex disease that affects thousands/millions globally, and traditional treatments often fall short due to [limitations]. To address this gap, researchers have initiated this study, aiming to explore how the new treatment [Drug/Procedure] might enhance patient outcomes.\"\n\tStudy Motivation and Goals: Dive into why this specific treatment is being researched. Include background on the disease burden, gaps in current therapies, and potential benefits.\n\n\tExample: \"The study aims to provide a more effective, safer, or more targeted treatment by examining the benefits and risks associated with [Drug/Procedure]. The motivation stems from existing data suggesting that [specific drug actions or mechanisms] could uniquely benefit patients with [Condition]. With this study, researchers hope to gather substantial evidence on [outcomes like symptom relief, disease progression, or survival rate improvements].\"\n\t2. Purpose of Study (1000+ words)\n\tBackground on the Disease and Treatment Challenges: Provide a layperson-friendly overview of the medical condition, including its causes, prevalence, symptoms, and impact on patients' quality of life.\n\n\tExample: \"[Condition] is characterized by [main symptoms or complications], leading to a significant reduction in life quality. For many, daily life involves managing [list specific symptoms], requiring frequent visits to healthcare providers and, often, long-term treatment. Currently, therapies are limited to [briefly list existing treatments], which only offer partial relief.\"\n\tSpecific Study Goals and Hypotheses: Explain what the researchers hope to discover. Include an explanation of how the treatment might work differently or better than existing therapies.\n\n\tExample: \"This study hypothesizes that [Drug/Procedure] can work more effectively because it [describe the unique action of the drug]. Researchers are particularly interested in evaluating if the drug can extend [specific outcome like remission, symptom reduction], which would mark a substantial improvement over existing options.\"\n\t3. Explanation of Condition (If Needed) (1000+ words)\n\tDisease Mechanics and Pathology: Provide an in-depth explanation of the diseaseÃÂÃÂ¢ÃÂÃÂÃÂÃÂs biology and pathology, especially as it relates to treatment targets in the study.\n\n\tExample: \"[Condition] arises when [describe the disease cause, e.g., cells malfunction, an immune response goes awry]. Over time, the disease leads to [detailed explanation of symptoms, organs impacted, long-term risks]. The specific focus of this study is on how the condition impacts [mention relevant systems, like blood, bone marrow, or nervous system], which is where [Drug/Procedure] is thought to make a difference.\"\n\tDaily Life and Impact on Patients: Explain how the condition affects daily life, emphasizing symptoms and patient needs that the treatment aims to address.\n\n\tExample: \"Living with [Condition] often involves coping with [symptoms in detail], which can severely impact a person's daily life. For example, [symptom examples like chronic pain, fatigue, loss of mobility]. Managing these symptoms requires [mention treatments or lifestyle adjustments currently used]. Unfortunately, current therapies have limitations such as [describe limitations in effect or side effects], underscoring the need for a more effective solution like the one under study.\"\n\t4. Participant Criteria (1000+ words)\n\tDetailed Eligibility Criteria: Expand on who can and cannot participate in the study, explaining how these criteria are determined.\n\n\tExample: \"To participate, individuals must meet certain criteria, including age, medical history, and the current stage of [Condition]. For instance, participants need to be between [age range] to ensure safety and relevance to the study's outcomes. They must also have [describe the condition or risk level needed]. These criteria are in place to focus on those most likely to benefit from or be safely tested with the treatment.\"\n\tImportance of Each Criterion: Explain why these specific criteria were chosen and how they help ensure the study's scientific validity.\n\n\tExample: \"Each criterion is selected carefully to create a uniform group of participants. For example, the age range is set because [reason why certain age groups may respond differently to the treatment]. Similarly, people who have previously taken treatments for [Condition] are excluded to avoid results being skewed by past drug interactions.\"\n\t5. Study Design and Groups (1000+ words)\n\tDetailed Study Methodology: Provide an in-depth description of the study design, including group assignments, blinding procedures, and the type of comparisons being made.\n\n\tExample: \"The study uses a randomized, double-blind design to avoid bias. This means neither the participants nor the research team knows who is receiving [Drug/Procedure] or [Placebo/Standard Treatment], which helps ensure that any observed effects are genuinely due to the treatment itself.\"\n\tExplanation of Treatment Groups: Detail the procedures for each group, including the treatment schedule, dose adjustments, and monitoring frequency.\n\n\tExample: \"Participants are randomly assigned to one of two groups: one receiving [Drug A] with standard care, and the other receiving a placebo. Those in the [Drug A] group follow a strict dosing schedule designed to optimize the treatment's effectiveness. Regular monitoring is in place to track each participantÃÂÃÂ¢ÃÂÃÂÃÂÃÂs progress, assess for potential side effects, and adjust doses as needed.\"\n\t6. Key Results (1000+ words)\n\tDetailed Outcome Measures: Discuss the primary and secondary outcomes the study evaluated, including how these metrics were chosen and measured.\n\n\tExample: \"Researchers evaluated several key outcomes, including overall survival, remission rates, and quality of life metrics. Each outcome provides insights into different aspects of [Drug/Procedure]'s effects, helping to determine if it offers a meaningful benefit over the standard treatment.\"\n\tStatistical Findings and Interpretations: Present statistical findings, comparing the results between groups with explanations of what these numbers mean in practical terms.\n\n\tExample: \"The study found that [Drug Group] had a [percentage] improvement in remission rates compared to the control. This statistic translates to a substantial impact for patients, as higher remission rates often correlate with longer, healthier lives for those with [Condition].\"\n\t7. Safety and Side Effects (1000+ words)\n\tIn-Depth Side Effect Overview: Break down side effects by frequency, severity, and type, explaining each in lay terms.\n\n\tExample: \"Side effects were carefully tracked to evaluate [Drug/Procedure]'s safety. Common side effects included [list side effects], typically mild to moderate in severity. However, some participants experienced serious side effects, including [serious side effects]. These were assessed for their severity and relevance to the study, with researchers taking extra measures to ensure participantsÃÂÃÂ¢ÃÂÃÂÃÂÃÂ safety.\"\n\tExplanation of Risk-Benefit Balance: Provide context around why these side effects may be acceptable given the potential benefits, and compare them with those from existing treatments.\n\n\tExample: \"While there are risks, researchers consider them manageable when weighed against the potential benefits. For example, similar side effects are often seen with current therapies, which are known to [describe common adverse effects of existing treatments].\"\n\t8. Conclusion and Next Steps (1000+ words)\n\tDetailed Study Implications: Explore what these results mean for the treatment of the condition and for future research.\n\n\tExample: \"The findings suggest that [Drug/Procedure] could be a promising addition to the treatment arsenal for [Condition]. Although further studies are needed to validate these results in larger populations, this study provides a foundational understanding of the drug's effectiveness.\"\n\tFuture Research Directions: Discuss the next steps planned for this treatment or other studies in the pipeline, giving insight into the long-term vision for research.\n\n\tExample: \"Future studies will expand on this work, potentially exploring different dosages or combinations with other therapies. The goal is to refine [Drug/Procedure] for even better efficacy and safety.\"\n\tFor the overall layout, use:\n        \n        <h1>, <h2>, <h3> for headings.\n        <p> for paragraphs.\n        <ul>, <ol> for bullet or numbered lists.\n        <table>, <tr>, <td> for any tabular data if needed.\n        Inline CSS for basic styling if possible, ensuring good spacing and readability.\n        Ensure the language is simple, clear, and accessible for a general audience, while maintaining visually appealing formatting through appropriate use of HTML.\n                         from the given {selected_text} \"\"\"}\n                    ]\n                }\n            ],\n        }\n        \n    model1 = \"gemini-1.5-pro-exp-0801\"\n    model2 = \"gemini-1.5-flash\"\n    response = requests.post(f\"https://generativelanguage.googleapis.com/v1beta/models/{model2}:generateContent?key={GOOGLE_API_KEY}\", data=json.dumps(payload))\n    ahtml = response.json()[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"].replace(\"\\n\",\"\")\n    filenames = \"PLPS_\"+\"${folderPath}\".split(\"/\")[-1] # .format(pd.datetime.now().strftime(\"%Y-%m-%d-%H%M%S\"))\n    newpath='${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'\n    \n    newpath =\"/\".join(newpath.split(\"/\")) + \"/\"\n    output_dir_path = \"/\".join(newpath.split(\"/\")) + \"/output/PLPS/\"\n    output_dir_path2 = \"/\".join(newpath.split(\"/\")) + \"/output/PLPS_Txt_Output/\"\n    \n    if not os.path.exists(output_dir_path):\n      os.makedirs(output_dir_path)\n    if not os.path.exists(output_dir_path2):\n      os.makedirs(output_dir_path2)\n    \n    output_path = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/PLPS/'+filenames\n    html_to_pdf(ahtml, output_path)\n    output_path1 = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/PLPS_Txt_Output/PLPS_Data.txt'\n    with open(output_path1, \"w\") as text_file:\n      text_file.write(ahtml)\n    workflowContext.outStr(3,\"Saved file at : \"+output_path1,\"Saved Summaries\")\n    return",
          "widget": "textarea_large",
          "type": "python",
          "title": "PySpark",
          "description": "PySpark code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[]",
          "widget": "schema_col_names",
          "title": "Column Names",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[]",
          "widget": "schema_col_types",
          "title": "Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[]",
          "widget": "schema_col_formats",
          "title": "Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [],
  "dataSetDetails": [],
  "engine": "pyspark"
}