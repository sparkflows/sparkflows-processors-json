{
  "name": "07-ICF-V1",
  "uuid": "406db9ea-e4b9-4f6d-8f04-d3ee71d88a31",
  "category": "PLPS-ICF Generator",
  "description": "-",
  "parameters": " --var textField1=CSP --var destinationPath1=/home/sparkflows/fire-data/Spotline/CSP/uploads/ --var textField=CSP --var refresh=true --var view4=false --var folderPath=/home/sparkflows/fire-data/Spotline/CSP/uploads/NCT01705509_Prot_001.pdf --var folderPath3='/home/sparkflows/fire-data/Spotline/CSP/uploads/NCT01705509_Prot_001.pdf' --var destinationPath=/home/sparkflows/fire-data/Spotline/CSP/uploads/ --var all=true --var toc='1. Introduction/Background','2. Hypothesis','3. Study Design','4. Endpoints','5. Study Population','6. Informed Consent','7. Monitoring and Reporting of Adverse Reaction','8. Institutions Review Board','9. Record Retention','10. Study Finances','11. Payment','12. Study Medication','13. Study Duration','14. Endpoints','Reference' --var generateIcf=true --var generateIcf1=false --var selectExecution=1 --var refresh1=false --var folderPath2=/home/sparkflows/fire-data/Spotline/CSP/output/PLPS --var folderPath1=/home/sparkflows/fire-data/Spotline/CSP/output/ICF/ --var checkbox2=false --var view2=false --var download=false",
  "nodes": [
    {
      "id": "1",
      "name": "ICF Generator",
      "description": "This node runs any given PySpark code. The input dataframe is passed into the function myfn as a parameter.",
      "details": "",
      "examples": "",
      "type": "pyspark",
      "nodeClass": "fire.nodes.etl.NodePySpark",
      "x": "237.333px",
      "y": "79.3333px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "code",
          "value": "'''\nInput:\n  spark: spark session \n  workflowContext:  workflowcontext object \n  id: node number \n  inDF: input pyspark dataframe \n  cust_dict: Dictionary of the workflow variables passed from previous node \nOutput:\n  outDF: return pyspark dataframe i.e outDF \n ''' \n \nfrom pyspark.sql.types import * \nfrom pyspark.sql.functions import * \nfrom pyspark.sql import * \nfrom fire.workflowcontext import WorkflowContext\nfrom bs4 import BeautifulSoup\nimport pymupdf\nimport pandas as pd\nimport re\nfrom xhtml2pdf import pisa\nfrom io import BytesIO\n\ndef html_to_pdf(html_string, output_filename):\n    with BytesIO() as pdf_buffer:\n        pisa.CreatePDF(BytesIO(html_string.encode('utf-8')), dest=pdf_buffer)\n        pdf_buffer.seek(0)\n        with open(output_filename, 'wb') as output_file:\n            output_file.write(pdf_buffer.read())\n\n\ndef save_list_to_txt(file_path1, string_list):\n    with open(file_path1, 'w') as file:\n        for item in string_list:\n            file.write(item + ', \\n')\n\ndef extract_text_from_pdf(pdf_path):\n    # Open the PDF file\n    document = pymupdf.open(pdf_path)\n    text = \"\"\n    # Iterate over each page in the PDF\n    for page_num in range(document.page_count):\n        # Get a page\n        page = document[page_num]\n        # Extract text from the page\n        text += page.get_text()\n    # Close the PDF file\n    document.close()\n    return text\n  \ndef myfn(spark: SparkSession, workflowContext: WorkflowContext, id: int, inDF: DataFrame, cust_dict:dict):\n      # Path to your PDF file\n      # pdf_path = '/home/sparkflows/fire-data/Spotline/Clinical-Study-Protocols/Prot_000.pdf'\n    import glob\n    # mylist = [f for f in glob.glob(\"/home/sparkflows/fire-data/Spotline/CSP/uploads/*.pdf\")]\n    # pdf_path = \"${folderPath3}\"# mylist[0]\n      # Extract text\n    pdf_text = extract_text_from_pdf(\"${folderPath}\")\n    with open('${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/TOC_output/Table_of_content.txt', 'r', encoding='utf-8') as file:\n        html_content = file.read()\n    h2_pattern = r'<h2[^>]*>(.*?)</h2>'\n    h2_tags = re.findall(h2_pattern, html_content, re.DOTALL)\n    List1 = []\n    for h2 in h2_tags:\n        List1.append(h2.strip())    \n    input_string = \"${toc}\"\n    # print(List1, \"List1\")\n    extracted_text = re.findall(r\"'(.*?)'\", input_string)\n    select_topic = extracted_text\n    # ['TRIAL SUMMARY','TRIAL DESIGN','OBJECTIVE(S) & HYPOTHESIS(ES)','BACKGROUND & RATIONALE','METHODOLOGY','TRIAL FLOW CHART','TRIAL PROCEDURES','TRIAL GOVERNANCE AND OVERSIGHT','STATISTICAL ANALYSIS PLAN','LABELING, PACKAGING, STORAGE AND RETURN OF CLINICAL SUPPLIES','ADMINISTRATIVE AND REGULATORY DETAILS','LIST OF REFERENCES','APPENDICES','SIGNATURES'] \n    # [\"${selectBoxes}\"]\n    #'METHODOLOGY', 'STATISTICAL ANALYSIS PLAN']\n    \n    \n    # Extract the last line after the final full stop\n    last_line = pdf_text.split('.')[-1].strip().split('\\n')[-1].strip()\n    \n    # Create the list of lists by matching the selected topics\n    output = []\n    for topic in select_topic:\n        if topic in List1:\n            index = List1.index(topic)\n            # Ensure there's a next element in the list\n            if index + 1 < len(List1):\n                output.append([List1[index], List1[index + 1]])\n            else:\n                # For the last item, add the extracted last line instead of the full sentence\n                output.append([List1[index], last_line])\n    \n    def extract_all_text_between_headings(text, start_heading, end_heading):\n        # Regular expression to extract all text between headings\n        pattern = re.compile(\n            rf'{re.escape(start_heading)}(.*?){re.escape(end_heading)}',\n            re.DOTALL | re.IGNORECASE  # Case-insensitive matching\n        )\n        \n        # Find all matches\n        matches = pattern.findall(text)\n        # Clean up the matches (strip leading/trailing whitespace)\n        cleaned_matches = [match.strip() for match in matches]\n        \n        return cleaned_matches\n    \n    selected_text = []\n    # Define your headings\n    for i in output:\n        start_heading = i[0]\n        end_heading = i[1]\n        \n        # Extract all occurrences of text between headings\n        all_texts = extract_all_text_between_headings(pdf_text, start_heading, end_heading)\n        \n        def get_max_length_sentence(sentences):\n            \"\"\"\n            Returns the longest sentence (by character length) from a list of sentences.\n            Parameters:\n            sentences (list): A list of sentences (strings).\n            Returns:\n            str: The sentence with the maximum length. Returns None if the list is empty.\n            \"\"\"\n            if not sentences:  # Check if the list is empty\n                return None  # Return None if the list is empty\n            # Find the sentence with the maximum length manually\n            max_sentence = sentences[0]\n            for sentence in sentences[1:]:\n                if len(sentence) > len(max_sentence):\n                    max_sentence = sentence\n            return max_sentence\n        \n        longest_sentence = get_max_length_sentence(all_texts)\n        selected_text.append(longest_sentence)\n    GOOGLE_API_KEY='$Gemini_API'\n    import json\n    import requests\n    payload = {\n            \"contents\": [\n                {\n                    \"parts\": [\n                        {\"text\": f\"\"\"You are a very good principal investigator. Your work is to create Informed consent forms (ICF). Output must follow html format and make sure output must be more then 10000 words\n    Please provide detailed instructions covering the initial and adjusted dosages of the medication, any monitoring and follow-up required to ensure the correct dosage, and specific instructions on how the medication should be administered. Make sure each section is clear and easy to understand for the patient.\n    Provide a clean and concise version of the provided text, ensuring there are no duplicate lines, repeated information, or unnecessary prompts in the output. Organize the content so it reads smoothly, focusing on removing redundancy while maintaining the main ideas and structure.\n    Output must be in html format.\n    Here is the pdf text:\n     {selected_text}\n\tIntroduction and Purpose of the Study:\n\n\tProvide a brief, accessible introduction to the research study, including its name, purpose, and why itÃÂ¢ÃÂÃÂs being conducted.\n\tExplain the background of the study, focusing on the health condition being researched and the rationale for testing this specific treatment or intervention.\n\tExample: ÃÂ¢ÃÂÃÂThis study, titled [Study Title], aims to investigate the effects of [Drug Name/Procedure] on [Condition]. The goal is to learn how this treatment might improve [mention key symptom or condition aspect].ÃÂ¢ÃÂÃÂ\n\tParticipant Expectations and Study Duration:\n\n\tOutline the total duration of the study and what is expected of participants, including study-related visits, medications, and evaluations.\n\tUse clear, step-by-step language to describe each phase of participation, the procedures involved (such as tests or monitoring), and the specific role of the participant.\n\tExample: ÃÂ¢ÃÂÃÂIf you decide to participate, you will be in the study for approximately [number] weeks. During this time, you will take part in [describe tests and any monitoring], and we will track your health through [describe evaluations].ÃÂ¢ÃÂÃÂ\n\tRisks and Discomforts:\n\n\tDetail any known risks or side effects of the study treatment, breaking down risks by severity and likelihood where possible.\n\tDescribe potential physical, psychological, or procedural risks that could arise from participation, including risks associated with any tests, treatments, or drug side effects.\n\tExample: ÃÂ¢ÃÂÃÂParticipating in this study may involve some risks, such as [common side effects like fatigue, nausea]. In rare cases, more serious risks may occur, such as [serious side effects or potential complications].ÃÂ¢ÃÂÃÂ\n\tBenefits:\n\n\tOutline any potential benefits that participants might experience, being transparent about the possibility that some participants may not experience any direct benefits.\n\tExplain how the study may contribute to future treatment improvements for others with the condition, emphasizing that participation may advance medical knowledge.\n\tExample: ÃÂ¢ÃÂÃÂAlthough we cannot guarantee personal benefits, participating in this study may contribute to improved understanding of [Condition]. This knowledge may help advance future treatments for patients with similar conditions.ÃÂ¢ÃÂÃÂ\n\tAlternatives to Participation:\n\n\tDescribe alternative treatments or interventions available outside of the study so participants can make an informed choice.\n\tProvide examples of standard care options and encourage participants to discuss these with their healthcare providers if desired.\n\tExample: ÃÂ¢ÃÂÃÂIf you decide not to participate, other treatments for [Condition] are available, including [list of options]. You can receive these treatments through your regular healthcare provider.ÃÂ¢ÃÂÃÂ\n\tConfidentiality and Data Privacy:\n\n\tExplain how participant information will be protected, including details on who will have access to their data, any anonymization procedures, and data storage practices.\n\tInclude information on how data may be shared with relevant regulatory bodies, emphasizing that all shared data will be de-identified.\n\tExample: ÃÂ¢ÃÂÃÂYour privacy is a priority. Only authorized researchers will access your data, which will be stored securely. If any data is shared, it will be de-identified to protect your privacy.ÃÂ¢ÃÂÃÂ\n\tVoluntary Participation and Right to Withdraw:\n\n\tEmphasize that joining the study is voluntary and that participants can withdraw at any time without penalty.\n\tOutline how they can withdraw from the study and the implications, if any, on their ongoing care.\n\tExample: ÃÂ¢ÃÂÃÂParticipation in this study is completely voluntary. You may withdraw at any time by contacting the study coordinator, and your choice will not affect your current or future care.ÃÂ¢ÃÂÃÂ\n\tCost and Compensation:\n\n\tDetail any costs that participants might incur, as well as any compensations, reimbursements, or benefits they may receive, such as free medication or travel compensation.\n\tExample: ÃÂ¢ÃÂÃÂThis study covers the cost of [Drug/Procedure]. You will not be charged for study-related care, but if additional care is needed, standard charges may apply.ÃÂ¢ÃÂÃÂ\n\tContact Information for Questions or Concerns:\n\n\tProvide contact details for the principal investigator, study coordinators, and an independent body (such as an ethics board) so participants can ask questions, report issues, or discuss their rights.\n\tExample: ÃÂ¢ÃÂÃÂIf you have questions or concerns about the study or your rights as a participant, please contact [Principal InvestigatorÃÂ¢ÃÂÃÂs name, phone number, email].ÃÂ¢ÃÂÃÂ\n\tConsent Statement:\n\n\tInclude a signature section where participants acknowledge they have read and understood the information, that theyÃÂ¢ÃÂÃÂve had the opportunity to ask questions, and that they voluntarily agree to participate.\n\tExample: ÃÂ¢ÃÂÃÂI have read this form, and the study staff have answered my questions. I consent to participate in this study, and I understand that I can withdraw at any time without affecting my care.ÃÂ¢ÃÂÃÂ\n    At last Please add all references from which you are creating responce, reference such as pahe number of headings.\n         \"\"\"}\n                    ]\n                }\n            ],\n        }\n        \n    model1 = \"gemini-1.5-pro-exp-0801\"\n    model2 = \"gemini-1.5-flash\"\n    response = requests.post(f\"https://generativelanguage.googleapis.com/v1beta/models/{model2}:generateContent?key={GOOGLE_API_KEY}\", data=json.dumps(payload))\n    ahtml = response.json()[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"].replace(\"\\n\",\"\")\n    filenames = \"ICF_\"+\"${folderPath}\".split(\"/\")[-1] # .format(pd.datetime.now().strftime(\"%Y-%m-%d-%H%M%S\"))\n    output_path = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/ICF/'+filenames\n    html_to_pdf(ahtml, output_path)\n    output_path1 = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/ICF_Txt_Output/ICF_Data.txt'\n    with open(output_path1, \"w\") as text_file:\n      text_file.write(ahtml)\n    workflowContext.outStr(3,\"Saved file at : \"+output_path1,\"Saved Summaries\")\n    return",
          "widget": "textarea_large",
          "title": "PySpark",
          "description": "PySpark code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "Schema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[]",
          "widget": "schema_col_names",
          "title": "Column Names",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[]",
          "widget": "schema_col_types",
          "title": "Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[]",
          "widget": "schema_col_formats",
          "title": "Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [],
  "dataSetDetails": [],
  "engine": "pyspark"
}