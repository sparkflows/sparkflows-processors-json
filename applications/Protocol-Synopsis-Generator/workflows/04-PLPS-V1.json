{
  "name": "04-PLPS-V1",
  "uuid": "e9c0c052-e7e0-4e90-9e26-d69896440e9e",
  "category": "PLPS-ICF Generator",
  "parameters": " --var textField1=CSP --var destinationPath1=/home/sparkflows/fire-data/Spotline/CSP/uploads/ --var textField=CSP --var refresh=true --var view4=false --var folderPath=/home/sparkflows/fire-data/Spotline/CSP/uploads/NCT01705509_Prot_001.pdf --var folderPath3='/home/sparkflows/fire-data/Spotline/CSP/uploads/NCT01705509_Prot_001.pdf' --var destinationPath=/home/sparkflows/fire-data/Spotline/CSP/uploads/ --var all=true --var toc='1. Introduction/Background','2. Hypothesis','3. Study Design','4. Endpoints','5. Study Population','6. Informed Consent','7. Monitoring and Reporting of Adverse Reaction','8. Institutions Review Board','9. Record Retention','10. Study Finances','11. Payment','12. Study Medication','13. Study Duration','14. Endpoints','Reference' --var generateIcf=false --var generateIcf1=true --var selectExecution=1 --var refresh1=false --var folderPath2=/home/sparkflows/fire-data/Spotline/CSP/output/PLPS --var folderPath1=/home/sparkflows/fire-data/Spotline/CSP/output/ICF/ --var checkbox2=false --var view2=false --var download=false",
  "nodes": [
    {
      "id": "1",
      "name": "PySpark",
      "description": "This node runs any given PySpark code. The input dataframe is passed into the function myfn as a parameter.",
      "details": "",
      "examples": "",
      "type": "pyspark",
      "nodeClass": "fire.nodes.etl.NodePySpark",
      "x": "523px",
      "y": "300px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "code",
          "value": "'''\nInput:\n  spark: spark session \n  workflowContext:  workflowcontext object \n  id: node number \n  inDF: input pyspark dataframe \n  cust_dict: Dictionary of the workflow variables passed from previous node \nOutput:\n  outDF: return pyspark dataframe i.e outDF \n ''' \n \nfrom pyspark.sql.types import * \nfrom pyspark.sql.functions import * \nfrom pyspark.sql import * \nfrom fire.workflowcontext import WorkflowContext\nfrom bs4 import BeautifulSoup\nimport pymupdf\nimport pandas as pd\nimport re\nfrom xhtml2pdf import pisa\nfrom io import BytesIO\n\ndef html_to_pdf(html_string, output_filename):\n    with BytesIO() as pdf_buffer:\n        pisa.CreatePDF(BytesIO(html_string.encode('utf-8')), dest=pdf_buffer)\n        pdf_buffer.seek(0)\n        with open(output_filename, 'wb') as output_file:\n            output_file.write(pdf_buffer.read())\n\n\ndef save_list_to_txt(file_path1, string_list):\n    with open(file_path1, 'w') as file:\n        for item in string_list:\n            file.write(item + ', \\n')\n\ndef extract_text_from_pdf(pdf_path):\n    # Open the PDF file\n    document = pymupdf.open(pdf_path)\n    text = \"\"\n    # Iterate over each page in the PDF\n    for page_num in range(document.page_count):\n        # Get a page\n        page = document[page_num]\n        # Extract text from the page\n        text += page.get_text()\n    # Close the PDF file\n    document.close()\n    return text\n  \ndef myfn(spark: SparkSession, workflowContext: WorkflowContext, id: int, inDF: DataFrame, cust_dict:dict):\n      # Path to your PDF file\n      # pdf_path = '/home/sparkflows/fire-data/Spotline/Clinical-Study-Protocols/Prot_000.pdf'\n    import glob\n    # mylist = [f for f in glob.glob(\"/home/sparkflows/fire-data/Spotline/CSP/uploads/*.pdf\")]\n    # pdf_path = \"${folderPath3}\"# mylist[0]\n      # Extract text\n    pdf_text = extract_text_from_pdf(\"${folderPath}\")\n    with open('${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/TOC_output/Table_of_content.txt', 'r', encoding='utf-8') as file:\n        html_content = file.read()\n    h2_pattern = r'<h2[^>]*>(.*?)</h2>'\n    h2_tags = re.findall(h2_pattern, html_content, re.DOTALL)\n    List1 = []\n    for h2 in h2_tags:\n        List1.append(h2.strip())    \n    input_string = \"${toc}\"\n    # print(List1, \"List1\")\n    extracted_text = re.findall(r\"'(.*?)'\", input_string)\n    select_topic = extracted_text\n    # ['TRIAL SUMMARY','TRIAL DESIGN','OBJECTIVE(S) & HYPOTHESIS(ES)','BACKGROUND & RATIONALE','METHODOLOGY','TRIAL FLOW CHART','TRIAL PROCEDURES','TRIAL GOVERNANCE AND OVERSIGHT','STATISTICAL ANALYSIS PLAN','LABELING, PACKAGING, STORAGE AND RETURN OF CLINICAL SUPPLIES','ADMINISTRATIVE AND REGULATORY DETAILS','LIST OF REFERENCES','APPENDICES','SIGNATURES'] \n    # [\"${selectBoxes}\"]\n    #'METHODOLOGY', 'STATISTICAL ANALYSIS PLAN']\n    \n    \n    # Extract the last line after the final full stop\n    last_line = pdf_text.split('.')[-1].strip().split('\\n')[-1].strip()\n    \n    # Create the list of lists by matching the selected topics\n    output = []\n    for topic in select_topic:\n        if topic in List1:\n            index = List1.index(topic)\n            # Ensure there's a next element in the list\n            if index + 1 < len(List1):\n                output.append([List1[index], List1[index + 1]])\n            else:\n                # For the last item, add the extracted last line instead of the full sentence\n                output.append([List1[index], last_line])\n    \n    def extract_all_text_between_headings(text, start_heading, end_heading):\n        # Regular expression to extract all text between headings\n        pattern = re.compile(\n            rf'{re.escape(start_heading)}(.*?){re.escape(end_heading)}',\n            re.DOTALL | re.IGNORECASE  # Case-insensitive matching\n        )\n        \n        # Find all matches\n        matches = pattern.findall(text)\n        # Clean up the matches (strip leading/trailing whitespace)\n        cleaned_matches = [match.strip() for match in matches]\n        \n        return cleaned_matches\n    \n    selected_text = []\n    # Define your headings\n    for i in output:\n        start_heading = i[0]\n        end_heading = i[1]\n        \n        # Extract all occurrences of text between headings\n        all_texts = extract_all_text_between_headings(pdf_text, start_heading, end_heading)\n        \n        def get_max_length_sentence(sentences):\n            \"\"\"\n            Returns the longest sentence (by character length) from a list of sentences.\n            Parameters:\n            sentences (list): A list of sentences (strings).\n            Returns:\n            str: The sentence with the maximum length. Returns None if the list is empty.\n            \"\"\"\n            if not sentences:  # Check if the list is empty\n                return None  # Return None if the list is empty\n            # Find the sentence with the maximum length manually\n            max_sentence = sentences[0]\n            for sentence in sentences[1:]:\n                if len(sentence) > len(max_sentence):\n                    max_sentence = sentence\n            return max_sentence\n        \n        longest_sentence = get_max_length_sentence(all_texts)\n        selected_text.append(longest_sentence)\n    GOOGLE_API_KEY='$Gemini_API'\n    import json\n    import requests\n    payload = {\n            \"contents\": [\n                {\n                    \"parts\": [\n                        {\"text\": f\"\"\" You are a helpful assistant,\n                        Create a detailed Plain Language Protocol Synopsis (PLPS) that summarizes the clinical trial described in the attached document. The synopsis should be accessible for non-expert audiences and aim for a comprehensive explanation across approximately 2000 words. Structure the summary to cover the following areas, with clear and visually appealing HTML formatting:\n        \n    Use <h1> or <h2> tags for the main headings and subheadings.\n\tStudy Overview (1000+ words):\n\n\tProvide an extensive summary introducing the study in non-technical language. Start with the context behind the research, such as why this particular treatment area or condition needs more study, recent developments in the field, or gaps in existing treatments.\n\tExplain the study sponsor and their motivations for conducting the study, giving background on the organization and its goals in clinical research.\n\tIntroduce the study name or nickname if it has one, detailing why it was chosen and what it represents.\n\tDiscuss briefly how this research aligns with broader public health goals and its potential significance for patients.\n\tExample: \"This clinical study, sponsored by [Sponsor], was developed to address the significant challenges faced by patients with [Disease/Condition]. By testing the combination of [Drug Name] and [Standard Treatment], researchers hoped to achieve new insights into managing [specific symptoms] more effectively...\"\n\tPurpose of the Study (1000+ words):\n\n\tOffer an in-depth discussion of the studyÃÂ¢ÃÂÃÂs purpose, starting with background information about the condition being treated and the general goals of similar research.\n\tExplain why this study is essential in the context of existing treatments, the limitations of these treatments, and how this studyÃÂ¢ÃÂÃÂs approach might provide new solutions.\n\tUse analogies and relatable examples to explain scientific concepts where applicable. Include examples of how this research can impact patientsÃÂ¢ÃÂÃÂ lives and the healthcare field.\n\tExample: \"Researchers conducted this study because, despite current treatments for [Disease/Condition], there remains a large unmet need... Many patients experience [specific limitation or adverse effect] from available therapies, and [Drug Name] offers the potential to address these challenges...\"\n\tExplanation of the Condition (If Applicable) (1000+ words):\n\n\tDescribe the condition in detail, covering how it affects the body, known causes, risk factors, and symptoms.\n\tBreak down complex medical processes (e.g., immune responses, cellular changes) into everyday language. Use graphics or metaphorical explanations to clarify technical terms.\n\tProvide a narrative perspective on what itÃÂ¢ÃÂÃÂs like to live with the condition, including common symptoms and impacts on daily life.\n\tExample: \"[Condition] is a complex condition that affects [body system]. The disease often leads to [symptoms], impacting everything from basic daily activities to long-term health. Here, weÃÂ¢ÃÂÃÂll explore how this condition progresses, what might cause it, and the current approaches doctors take to manage it...\"\n\tParticipant Criteria (1000+ words):\n\n\tExplain the criteria for participation, detailing inclusion and exclusion standards. Use clear examples to describe why certain patients could or could not participate.\n\tProvide the reasoning behind each requirement (e.g., age, previous treatments) to help readers understand how these criteria help achieve reliable and relevant results.\n\tDiscuss ethical considerations, such as the protection of vulnerable populations, and any benefits or limitations these criteria present to the study outcomes.\n\tExample: \"To join this study, participants had to meet specific criteria to ensure that the results would be safe, effective, and applicable. This section explains why researchers look for particular characteristics, such as age and health status, to create a reliable participant group...\"\n\tStudy Design and Groups (1000+ words):\n\n\tProvide an elaborate overview of the studyÃÂ¢ÃÂÃÂs structure, including group assignments, dosages, the concept of randomization, and blinding.\n\tExplain how the study is designed to eliminate bias, discussing the role of placebos and controls in ensuring valid comparisons.\n\tDescribe each phase of treatment, explaining in non-technical terms the cycle or dosing schedule.\n\tExample: \"Participants were assigned to different groups using a process called ÃÂ¢ÃÂÃÂrandomization.ÃÂ¢ÃÂÃÂ This approach ensures that treatment assignments are unbiased, helping researchers objectively determine the effectiveness of [Drug Name]...\"\n\tQuestions the Study Aimed to Answer (1000+ words):\n\n\tBreak down each question the study sought to answer, including why each is important for understanding the treatmentÃÂ¢ÃÂÃÂs efficacy and safety.\n\tUse sub-sections to elaborate on each research question, explaining how the answers would contribute to clinical knowledge and patient care.\n\tInclude hypothetical scenarios or relatable examples to explain why these questions matter to real-world treatment outcomes.\n\tExample: \"The study was designed to answer crucial questions, such as: How effective is [Drug Name] compared to a placebo? In this section, weÃÂ¢ÃÂÃÂll explore each question in detail, discussing its importance for clinical treatments...\"\n\tDetailed Key Results (1000+ words):\n\n\tDiscuss the study findings in depth, highlighting how each outcome informs the treatmentÃÂ¢ÃÂÃÂs effectiveness, safety, and overall impact.\n\tProvide quantitative results but translate these into clear takeaways, such as survival rates, remission percentages, or quality of life changes.\n\tCompare outcomes between treatment groups, explaining statistical terms like ÃÂ¢ÃÂÃÂmedianÃÂ¢ÃÂÃÂ and ÃÂ¢ÃÂÃÂsignificanceÃÂ¢ÃÂÃÂ with relatable examples.\n\tExample: \"The studyÃÂ¢ÃÂÃÂs results were enlightening: [Drug Name] demonstrated a [X%] improvement in [specific outcome]. In this section, we delve into each finding, discussing how researchers measured these results and what they mean for patients...\"\n\tSafety and Side Effects (1000+ words):\n\n\tOffer a detailed summary of side effects, categorizing them by severity, frequency, and impact on participantsÃÂ¢ÃÂÃÂ lives.\n\tUse patient-friendly language to explain terms like ÃÂ¢ÃÂÃÂserious adverse eventsÃÂ¢ÃÂÃÂ and provide a context for how common or severe these side effects are.\n\tDiscuss how the researchers managed and monitored side effects, and any protocols followed to minimize risk.\n\tExample: \"Safety was a priority in this study, and researchers closely monitored participants for any side effects. In this section, weÃÂ¢ÃÂÃÂll discuss what side effects were observed, their frequency, and how doctors ensured participantsÃÂ¢ÃÂÃÂ safety throughout the study...\"\n\tConclusion and Future Directions (1000+ words):\n\n\tSummarize the overall conclusions, explaining if and how the treatment will impact current medical practices.\n\tInclude discussions on the limitations of this study, future research recommendations, and the broader implications for the medical community.\n\tConclude with a hopeful message about how this research contributes to progress, mentioning any upcoming studies planned based on these findings.\n\tExample: \"The study concluded with promising findings, although some questions remain unanswered. This section reviews what researchers learned, future studies that could build on these results, and the hopeful outlook for [Condition] treatment...\"\n\tAdditional Resources and Further Learning (1000+ words):\n\n\tGuide readers on how to learn more, including reputable online resources, contact information for the research sponsor, and relevant support groups.\n\tExplain how to access more technical summaries for those interested and the value of consulting healthcare providers about the studyÃÂ¢ÃÂÃÂs relevance to their condition.\n\tExample: \"For those who want to dive deeper, resources are available to explore this study and related topics further. This section includes links to clinical trial registries, information on similar studies, and resources for patients and caregivers seeking more support...\"\n        For the overall layout, use:\n        \n        <h1>, <h2>, <h3> for headings.\n        <p> for paragraphs.\n        <ul>, <ol> for bullet or numbered lists.\n        <table>, <tr>, <td> for any tabular data if needed.\n        Inline CSS for basic styling if possible, ensuring good spacing and readability.\n        Ensure the language is simple, clear, and accessible for a general audience, while maintaining visually appealing formatting through appropriate use of HTML.\n                         from the given {selected_text} \"\"\"}\n                    ]\n                }\n            ],\n        }\n        \n    model1 = \"gemini-1.5-pro-exp-0801\"\n    model2 = \"gemini-1.5-flash\"\n    response = requests.post(f\"https://generativelanguage.googleapis.com/v1beta/models/{model2}:generateContent?key={GOOGLE_API_KEY}\", data=json.dumps(payload))\n    ahtml = response.json()[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"].replace(\"\\n\",\"\")\n    filenames = \"PLPS_\"+\"${folderPath}\".split(\"/\")[-1] # .format(pd.datetime.now().strftime(\"%Y-%m-%d-%H%M%S\"))\n    output_path = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/PLPS/'+filenames\n    html_to_pdf(ahtml, output_path)\n    output_path1 = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/PLPS_Txt_Output/PLPS_Data.txt'\n    with open(output_path1, \"w\") as text_file:\n      text_file.write(ahtml)\n    workflowContext.outStr(3,\"Saved file at : \"+output_path1,\"Saved Summaries\")\n    return",
          "widget": "textarea_large",
          "title": "PySpark",
          "description": "PySpark code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "Schema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[]",
          "widget": "schema_col_names",
          "title": "Column Names",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[]",
          "widget": "schema_col_types",
          "title": "Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[]",
          "widget": "schema_col_formats",
          "title": "Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [],
  "dataSetDetails": [],
  "engine": "pyspark"
}