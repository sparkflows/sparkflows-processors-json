{
  "name": "06-ICF-V2",
  "uuid": "b597681a-f390-473c-9565-95310a9e6399",
  "category": "PLPS-ICF Generator",
  "description": "-",
  "parameters": " --var textField1=CSP --var destinationPath1=/home/ubuntu/coreinsights-data/data/GENAI/Regulatory-Navigator/CSP/uploads/Prot_000.pdf --var textField=CSP --var refresh=true --var view4=false --var folderPath=/home/ubuntu/coreinsights-data/data/GENAI/Regulatory-Navigator/CSP/uploads/Prot_000.pdf --var folderPath3='/home/ubuntu/coreinsights-data/data/GENAI/Regulatory-Navigator/CSP/uploads/Prot_000.pdf' --var destinationPath=/data/GENAI/Regulatory-Navigator/CSP/uploads/ --var all=true --var toc='1.0 TRIAL SUMMARY','2.0 TRIAL DESIGN','3.0 OBJECTIVE(S) & HYPOTHESIS(ES)','4.0 BACKGROUND & RATIONALE','5.0 METHODOLOGY','6.0 TRIAL FLOW CHART','7.0 TRIAL PROCEDURES','8.0 STATISTICAL ANALYSIS PLAN','9.0 LABELING, PACKAGING, STORAGE AND RETURN OF CLINICAL SUPPLIES','10.0 ADMINISTRATIVE AND REGULATORY DETAILS','11.0 LIST OF REFERENCES','12.0 APPENDICES','13.0 SIGNATURES' --var generateIcf=true --var generateIcf1=true --var selectExecution=1 --var refresh1=false --var folderPath2=/data/GENAI/Regulatory-Navigator/CSP/output/PLPS --var folderPath1=/data/GENAI/Regulatory-Navigator/CSP/output/ICF/ --var checkbox2=false --var view2=false --var download=false",
  "nodes": [
    {
      "id": "1",
      "name": "ICF Generator",
      "description": "This node runs any given PySpark code. The input dataframe is passed into the function myfn as a parameter.",
      "details": "",
      "examples": "",
      "type": "pyspark",
      "nodeClass": "fire.nodes.etl.NodePySpark",
      "x": "237.333px",
      "y": "79.3333px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "code",
          "value": "'''\nInput:\n  spark: spark session \n  workflowContext:  workflowcontext object \n  id: node number \n  inDF: input pyspark dataframe \n  cust_dict: Dictionary of the workflow variables passed from previous node \nOutput:\n  outDF: return pyspark dataframe i.e outDF \n ''' \n \nfrom pyspark.sql.types import * \nfrom pyspark.sql.functions import * \nfrom pyspark.sql import * \nfrom fire.workflowcontext import WorkflowContext\nfrom bs4 import BeautifulSoup\nimport pymupdf\nimport pandas as pd\nimport re\nfrom xhtml2pdf import pisa\nfrom io import BytesIO\nimport os\n\ndef html_to_pdf(html_string, output_filename):\n    with BytesIO() as pdf_buffer:\n        pisa.CreatePDF(BytesIO(html_string.encode('utf-8')), dest=pdf_buffer)\n        pdf_buffer.seek(0)\n        with open(output_filename, 'wb') as output_file:\n            output_file.write(pdf_buffer.read())\n\n\ndef save_list_to_txt(file_path1, string_list):\n    with open(file_path1, 'w') as file:\n        for item in string_list:\n            file.write(item + ', \\n')\n\ndef extract_text_from_pdf(pdf_path):\n    # Open the PDF file\n    document = pymupdf.open(pdf_path)\n    text = \"\"\n    # Iterate over each page in the PDF\n    for page_num in range(document.page_count):\n        # Get a page\n        page = document[page_num]\n        # Extract text from the page\n        text += page.get_text()\n    # Close the PDF file\n    document.close()\n    return text\n  \ndef myfn(spark: SparkSession, workflowContext: WorkflowContext, id: int, inDF: DataFrame, cust_dict:dict):\n      # Path to your PDF file\n      # pdf_path = '/home/sparkflows/fire-data/Spotline/Clinical-Study-Protocols/Prot_000.pdf'\n    import glob\n    # mylist = [f for f in glob.glob(\"/home/sparkflows/fire-data/Spotline/CSP/uploads/*.pdf\")]\n    # pdf_path = \"${folderPath3}\"# mylist[0]\n      # Extract text\n    pdf_text = extract_text_from_pdf(\"${folderPath}\")\n    with open('${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/TOC_output/Table_of_content.txt', 'r', encoding='utf-8') as file:\n        html_content = file.read()\n    h2_pattern = r'<h2[^>]*>(.*?)</h2>'\n    h2_tags = re.findall(h2_pattern, html_content, re.DOTALL)\n    List1 = []\n    for h2 in h2_tags:\n        List1.append(h2.strip())    \n    input_string = \"${toc}\"\n    # print(List1, \"List1\")\n    extracted_text = re.findall(r\"'(.*?)'\", input_string)\n    select_topic = extracted_text\n    # ['TRIAL SUMMARY','TRIAL DESIGN','OBJECTIVE(S) & HYPOTHESIS(ES)','BACKGROUND & RATIONALE','METHODOLOGY','TRIAL FLOW CHART','TRIAL PROCEDURES','TRIAL GOVERNANCE AND OVERSIGHT','STATISTICAL ANALYSIS PLAN','LABELING, PACKAGING, STORAGE AND RETURN OF CLINICAL SUPPLIES','ADMINISTRATIVE AND REGULATORY DETAILS','LIST OF REFERENCES','APPENDICES','SIGNATURES'] \n    # [\"${selectBoxes}\"]\n    #'METHODOLOGY', 'STATISTICAL ANALYSIS PLAN']\n    \n    \n    # Extract the last line after the final full stop\n    last_line = pdf_text.split('.')[-1].strip().split('\\n')[-1].strip()\n    \n    # Create the list of lists by matching the selected topics\n    output = []\n    for topic in select_topic:\n        if topic in List1:\n            index = List1.index(topic)\n            # Ensure there's a next element in the list\n            if index + 1 < len(List1):\n                output.append([List1[index], List1[index + 1]])\n            else:\n                # For the last item, add the extracted last line instead of the full sentence\n                output.append([List1[index], last_line])\n    \n    def extract_all_text_between_headings(text, start_heading, end_heading):\n        # Regular expression to extract all text between headings\n        pattern = re.compile(\n            rf'{re.escape(start_heading)}(.*?){re.escape(end_heading)}',\n            re.DOTALL | re.IGNORECASE  # Case-insensitive matching\n        )\n        \n        # Find all matches\n        matches = pattern.findall(text)\n        # Clean up the matches (strip leading/trailing whitespace)\n        cleaned_matches = [match.strip() for match in matches]\n        \n        return cleaned_matches\n    \n    selected_text = []\n    # Define your headings\n    for i in output:\n        start_heading = i[0]\n        end_heading = i[1]\n        \n        # Extract all occurrences of text between headings\n        all_texts = extract_all_text_between_headings(pdf_text, start_heading, end_heading)\n        \n        def get_max_length_sentence(sentences):\n            \"\"\"\n            Returns the longest sentence (by character length) from a list of sentences.\n            Parameters:\n            sentences (list): A list of sentences (strings).\n            Returns:\n            str: The sentence with the maximum length. Returns None if the list is empty.\n            \"\"\"\n            if not sentences:  # Check if the list is empty\n                return None  # Return None if the list is empty\n            # Find the sentence with the maximum length manually\n            max_sentence = sentences[0]\n            for sentence in sentences[1:]:\n                if len(sentence) > len(max_sentence):\n                    max_sentence = sentence\n            return max_sentence\n        \n        longest_sentence = get_max_length_sentence(all_texts)\n        selected_text.append(longest_sentence)\n    GOOGLE_API_KEY='$Gemini_API_reg'\n    import json\n    import requests\n    payload = {\n            \"contents\": [\n                {\n                    \"parts\": [\n                        {\"text\": f\"\"\"You are a very good principal investigator. Your work is to create Informed consent forms (ICF). Output must follow html format and make sure output must be more then 10000 words\n    Please provide detailed instructions covering the initial and adjusted dosages of the medication, any monitoring and follow-up required to ensure the correct dosage, and specific instructions on how the medication should be administered. Make sure each section is clear and easy to understand for the patient.\n    Provide a clean and concise version of the provided text, ensuring there are no duplicate lines, repeated information, or unnecessary prompts in the output. Organize the content so it reads smoothly, focusing on removing redundancy while maintaining the main ideas and structure.\n    Output must be in html format.\n    Here is the pdf text:\n     {selected_text}\n\tStudy Title and Introduction (1000+ words):\n\n\tBegin with a formal title and concise summary, explaining the study's purpose and background.\n\tProvide a context for the study by detailing the condition it addresses, current treatment challenges, and the need for this research.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂThis study, titled [Study Title], is conducted to explore [treatment/medication] effects on patients with [condition]. This section will give you an overview of the study's purpose and why it is crucial for advancing treatments.ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tBackground and Purpose of the Study (1000+ words):\n\n\tExplain the medical condition and its impact on patients, including details on prevalence and common challenges.\n\tDiscuss the drug or intervention being tested, how it works, and why it could be beneficial compared to existing treatments.\n\tProvide an overview of study goals, focusing on how they aim to improve knowledge or patient outcomes.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂThis study focuses on [condition], affecting millions globally. Current treatments often fall short, and [Drug Name] is being tested to address [specific symptom or limitation]ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tParticipant Expectations and Study Duration (1000+ words):\n\n\tBreak down the total duration of the study, specifying all visits, tests, and interventions expected from participants.\n\tInclude descriptions of each phase, detailing required tests (e.g., CPET, blood work) and intervals between visits, using plain language to explain scientific terms.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂParticipants will be involved for about [duration], with regular assessments and treatment adjustments. Each stage of the study has specific expectations, which are outlined belowÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tRisks and Discomforts (1000+ words):\n\n\tProvide a thorough overview of potential risks, explaining common and rare side effects, their severity, and likelihood.\n\tDiscuss any procedural risks (e.g., exercise testing, medication) and detail safety measures in place.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂAs with all medications, there are potential risks. Common side effects of [Drug Name] include [list common effects]. Rare, more serious risks include [explain rare effects]ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tPotential Benefits (1000+ words):\n\n\tOutline any potential health improvements or benefits, while clarifying that benefits are not guaranteed.\n\tEmphasize the importance of the study as outcomes for future patients and medical knowledge, even if direct participant benefits are not certain.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂThis study might help improve understanding of [condition] and lead to better treatments. However, individual benefits are not guaranteedÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tAlternative Treatments (1000+ words):\n\n\tDescribe other standard treatments available outside the study to help participants understand their options.\n\tMention any differences in treatment effectiveness or side effects that could be relevant to their decision.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂIf you choose not to participate, there are alternative treatments such as [mention options]. Discussing these with your healthcare provider can help you make an informed choiceÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tConfidentiality and Data Privacy (1000+ words):\n\n\tExplain data collection, storage, and sharing policies, assuring participants of confidentiality and how their information will be protected.\n\tDescribe anonymization practices and who may have access to data, including regulatory bodies or research partners.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂYour privacy is a top priority. All data will be anonymized and securely stored, with access limited to authorized personnel. If results are shared, they will not include personal identifiersÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tVoluntary Participation and Right to Withdraw (1000+ words):\n\n\tEmphasize the voluntary nature of participation, including the right to withdraw without affecting their medical care.\n\tExplain how participants can communicate a decision to leave the study and any follow-up required upon withdrawal.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂJoining the study is voluntary, and you may withdraw at any time without penalty. If you choose to withdraw, please inform the study coordinatorÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tCost and Compensation (500+ words):\n\n\tDetail any costs that participants might incur and explain what the study will cover (e.g., medication, tests) and if there are any compensations or reimbursements.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂThere is no cost to participate in the study. The study sponsor covers the cost of [Drug/Procedure]. Participants will not receive financial compensation but may be reimbursed for travelÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tContact Information for Questions or Concerns (1000+ words):\n\n\tInclude contact details for the principal investigator, research coordinators, and any independent review boards so participants know who to reach out to with questions or concerns.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂIf you have questions about the study or your rights as a participant, please contact [InvestigatorÃÂÃÂ¢ÃÂÃÂÃÂÃÂs name, phone number, email].ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tAuthorization to Use and Share Health Information (1000+ words):\n\n\tExplain the types of data that may be collected and how it will be used and shared for research purposes.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂYour medical information, including [types of records], will be collected as part of this study. This data is essential to the studyÃÂÃÂ¢ÃÂÃÂÃÂÃÂs success, and only de-identified information will be sharedÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ\n\tConsent Statement and Signature Block (1000+ words):\n\n\tCraft a clear statement confirming that participants have read and understood the form and agree to participate voluntarily.\n\tInclude spaces for participant and witness signatures, reinforcing their rights to ask questions and receive clarification.\n\tExample: ÃÂÃÂ¢ÃÂÃÂÃÂÃÂI have read this form, had the opportunity to ask questions, and understand the studyÃÂÃÂ¢ÃÂÃÂÃÂÃÂs requirements, risks, and benefits. By signing below, I voluntarily consent to participateÃÂÃÂ¢ÃÂÃÂÃÂÃÂ¦ÃÂÃÂ¢ÃÂÃÂÃÂÃÂ    At last Please add all references from which you are creating responce, reference such as pahe number of headings.\n         \"\"\"}\n                    ]\n                }\n            ],\n        }\n        \n    model1 = \"gemini-1.5-pro-exp-0801\"\n    model2 = \"gemini-1.5-flash\"\n    response = requests.post(f\"https://generativelanguage.googleapis.com/v1beta/models/{model2}:generateContent?key={GOOGLE_API_KEY}\", data=json.dumps(payload))\n    ahtml = response.json()[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"].replace(\"\\n\",\"\")\n    filenames = \"ICF_\"+\"${folderPath}\".split(\"/\")[-1] # .format(pd.datetime.now().strftime(\"%Y-%m-%d-%H%M%S\"))\n    \n    newpath='${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'\n    newpath =\"/\".join(newpath.split(\"/\")) + \"/\"\n    output_dir_path = \"/\".join(newpath.split(\"/\")) + \"/output/ICF/\"\n    output_dir_path2 = \"/\".join(newpath.split(\"/\")) + \"/output/ICF_Txt_Output/\"\n    \n    if not os.path.exists(output_dir_path):\n      os.makedirs(output_dir_path)\n    if not os.path.exists(output_dir_path2):\n      os.makedirs(output_dir_path2)\n    \n    output_path = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/ICF/'+filenames\n    html_to_pdf(ahtml, output_path)\n    output_path1 = '${genaiHome}'+'/data/GENAI/Regulatory-Navigator/'+'${textField}'+'/output/ICF_Txt_Output/ICF_Data.txt'\n    with open(output_path1, \"w\") as text_file:\n      text_file.write(ahtml)\n    workflowContext.outStr(3,\"Saved file at : \"+output_path1,\"Saved Summaries\")\n    return",
          "widget": "textarea_large",
          "type": "python",
          "title": "PySpark",
          "description": "PySpark code to be run. Input dataframe : \"inDF\", SparkContext : \"sc\", SQLContext : \"sqlContext\",  Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "InferSchema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColNames",
          "value": "[]",
          "widget": "schema_col_names",
          "title": "Column Names",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColTypes",
          "value": "[]",
          "widget": "schema_col_types",
          "title": "Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        },
        {
          "name": "outputColFormats",
          "value": "[]",
          "widget": "schema_col_formats",
          "title": "Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false,
          "header": "",
          "size": "100%",
          "toggle": ""
        }
      ],
      "engine": "pyspark"
    }
  ],
  "edges": [],
  "dataSetDetails": [],
  "engine": "pyspark"
}