{
  "id": "7",
  "name": "Python Operator",
  "description": "This node executes Python code using the Python operator",
  "type": "python",
  "nodeClass": "fire.pipelineNodes.code",
  "fields" : [
	{"name": "python", "required":true, "widget": "shellcommand", "title": "Python", "description": "Write Python Code here"},
        {"name": "Name", "value":"", "required":true, "widget": "textfield", "title": "Task Name", "description": "Unique name of the task in Airflow DAG"},
        {"name": "python_callable", "value":"", "required":true, "widget": "textfield", "title": "Python Callable", "description": "Input name of user defined function name in the Python code." },
	{"name": "trigger_rule", "value":"all_success", "required":true, "widget": "array", "optionsArray": ["all_success","all_failed","all_done","all_skipped","one_failed","one_success","none_failed","none_failed_min_one_success","none_skipped","always"], "title": "Trigger Rule", "description": "Trigger Rule to be used" },
	{"name": "arguments", "value":"[]",  "widget": "variablesList", "optionsArray": ["Key","Value"], "title": "Arguments", "description": "List of Arguments to be passed to the user defined function" }
  ]
}
start-details:

h2:Python Operator

This node executes Python code using the Python operator.

end-details:

start-examples:

h2: Python Operator Examples

h4: Example of a Simple Python Function

def my_function(ti, next_ds):
return "Hello, World!"

h4: Explanation
* This function returns a simple greeting message and uses Airflow context variables.

h4: Usage
* Task ID: "python_operator_task"
* Python Callable: my_function

h4: Example of Python Function with Explicit Arguments

def add(a, b):
return a + b

h4: Explanation
* This function takes two arguments and returns their sum.

h4: Usage
* Task ID: "python_operator_task"
* Python Callable: add
* Arguments: {"a": 5, "b": 3}

h4: Example of Python Function with Keyword Arguments

def push_xcom(**kwargs):
ti = kwargs["ti"]
ti.xcom_push(key='my_key', value='some_value')

h4: Explanation
* This function uses XCom to push a value for use in downstream tasks.

h4: Usage
* Task ID: "python_operator_task"
* Python Callable: push_xcom
* Arguments: {}

h4: Example of Using Templated Fields

def greet(name):
return f"Hello, {name}!"

h4: Explanation
* This function takes a name and returns a greeting. It can use templated values.

h4: Usage
* Task ID: "python_operator_task"
* Python Callable: greet
* Arguments: {"name": "{{ dag_run.conf['name'] }}"}

end-examples:


